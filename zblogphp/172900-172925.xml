<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\function\lib\metas.php' crc32='1E566597'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIOaJqeWxleWGheWuueexuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIENvdW50DQogKiBAcHJvcGVydHkgc3RyaW5nIFVybA0KICovDQpjbGFzcyBNZXRhcw0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheSDlrZjlgqhNZXRhc+ebuOW6lOaVsOWAvOeahOaVsOe7hA0KICAgICAqLw0KICAgIHByaXZhdGUgJHBfZGF0YSA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIGtleeWQjQ0KICAgICAqIEBwYXJhbSAkdmFsdWUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19zZXQoJG5hbWUsICR2YWx1ZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5wX2RhdGFbJG5hbWVdID0gJHZhbHVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUga2V55ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5wX2RhdGFbJG5hbWVdKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5wX2RhdGFbJG5hbWVdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9faXNzZXQoJG5hbWUpDQogICAgew0KICAgICAgICByZXR1cm4gaXNzZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3Vuc2V0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgdW5zZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuaVsOe7hOaVsOaNrui9rOaNouS4uk1ldGFz5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIGFycmF5ICRhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1ldGFzDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBDb252ZXJ0QXJyYXkoJGEpDQogICAgew0KICAgICAgICAkbSA9IG5ldyBzZWxmKCk7DQogICAgICAgIGlmIChpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgICRtLT5wX2RhdGEgPSAkYTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5ZEYXRh5pWw5o2uLg0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXREYXRhKCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+cF9kYXRhOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS+neaNrnpicOiuvue9ruabv+aNouetvuagh+S4umhvc3TlgLzmiJbmmK/lm7rlrprln5/lkI0uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR2YWx1ZQ0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFJlcGxhY2VUYWcySG9zdCgkdmFsdWUpDQogICAgew0KICAgICAgICBnbG9iYWwgJGJsb2dob3N0Ow0KDQogICAgICAgIHJldHVybiBzdHJfcmVwbGFjZSgneyNaQ19CTE9HX0hPU1QjfScsICRibG9naG9zdCwgJHZhbHVlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkvp3mja56YnDorr7nva7mm7/mjaJob3N05YC85Li6562+5qCHLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdmFsdWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBSZXBsYWNlSG9zdDJUYWcoJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICRibG9naG9zdDsNCg0KICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UoJGJsb2dob3N0LCAneyNaQ19CTE9HX0hPU1QjfScsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5p+lRGF0YeWxnuaAp++8iOaVsOe7hO+8ieWxnuaAp+WAvOaYr+aYr+WQpuWtmOWcqOebuOW6lGtleS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUga2V55ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gSGFzS2V5KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGFycmF5X2tleV9leGlzdHMoJG5hbWUsICR0aGlzLT5wX2RhdGEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpURhdGHlsZ7mgKfvvIjmlbDnu4TvvInkuK3nmoTljZXlhYPmlbDnm64uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDb3VudEl0ZW0oKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGNvdW50KCR0aGlzLT5wX2RhdGEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpERhdGHlsZ7mgKfvvIjmlbDnu4TvvInkuK3nmoTnm7jlupTpobkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIGtleeWQjQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWwoJG5hbWUpDQogICAgew0KICAgICAgICB1bnNldCgkdGhpcy0+cF9kYXRhWyRuYW1lXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5bCGRGF0YeWxnuaAp++8iOaVsOe7hO+8ieWAvOW6j+WIl+WMli4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnuW6j+WIl+WMlueahOWAvA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTZXJpYWxpemUoKQ0KICAgIHsNCiAgICAgICAgaWYgKGNvdW50KCR0aGlzLT5wX2RhdGEpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiAnJzsNCiAgICAgICAgfQ0KDQogICAgICAgICRkYXRhID0gJHRoaXMtPnBfZGF0YTsNCiAgICAgICAgZm9yZWFjaCAoJGRhdGEgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgIGlmIChpc19zdHJpbmcoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICRkYXRhWyRrZXldID0gc2VsZjo6UmVwbGFjZUhvc3QyVGFnKCR2YWx1ZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvL3JldHVybiBqc29uX2VuY29kZSgkZGF0YSk7DQogICAgICAgIHJldHVybiBzZXJpYWxpemUoJGRhdGEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuW6j+WIl+WMlueahOWAvOWPjeW6j+WIl+WMluWQjui1i+S6iERhdGHlsZ7mgKflgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHMg5bqP5YiX5YyW5YC8DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVW5zZXJpYWxpemUoJHMpDQogICAgew0KICAgICAgICBpZiAoJHMgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vaWYoc3RycG9zKCRzLCd7Jyk9PT0wKXsNCiAgICAgICAgLy8kdGhpcy0+cF9kYXRhPWpzb25fZGVjb2RlKCRzLHRydWUpOw0KICAgICAgICAvL31lbHNlew0KICAgICAgICBAJHRoaXMtPnBfZGF0YSA9IHVuc2VyaWFsaXplKCRzKTsNCiAgICAgICAgLy99DQogICAgICAgIGlmIChpc19hcnJheSgkdGhpcy0+cF9kYXRhKSkgew0KICAgICAgICAgICAgaWYgKGNvdW50KCR0aGlzLT5wX2RhdGEpID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnBfZGF0YSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgIGlmIChpc19zdHJpbmcoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cF9kYXRhWyRrZXldID0gc2VsZjo6UmVwbGFjZVRhZzJIb3N0KCR2YWx1ZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHRoaXMtPnBfZGF0YSA9IGFycmF5KCk7DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='DD416665'  dt:dt='bin.base64'></file>
	<file name='zb_system\defend\error.php' crc32='8B316803'  dt:dt='bin.base64'></file>
	<file name='zb_system\defend\routes_post_article.php' crc32='69FECD01'  dt:dt='bin.base64'>PD9waHANCg0KcmV0dXJuIGFycmF5ICgNCi8vICDmt7vliqAg5paH56ug6aG15Y2V6aG1IOWKqOaAgei3r+eUsQ0KICAnYWN0aXZlX3Bvc3RfYXJ0aWNsZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdhY3RpdmUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX3NpbmdsZScsDQogICAgJ2NhbGwnID0+ICdWaWV3UG9zdCcsDQogICAgJ2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGUnLA0KICAgICAgMSA9PiAnYXV0aCcsDQogICAgICAyID0+ICd0YWdzJywNCiAgICAgIDMgPT4gJ2RhdGUnLA0KICAgICksDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICd0b19wZXJtYWxpbmsnID0+IHRydWUsDQogICksDQovLyAg5re75YqgIOaWh+eroGNhdGXpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF9jYXRlZ29yeScgPT4gDQogIGFycmF5ICgNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9jYXRlZ29yeScsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdnZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3BhZ2UnLA0KICAgICksDQogICAgJ211c3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdjYXRlJywNCiAgICApLA0KICAgICdub3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdpZCcsDQogICAgICAxID0+ICdhbGlhcycsDQogICAgKSwNCiAgKSwNCi8vICDmt7vliqAg5paH56ugYXV0aOmhteWIl+ihqCjluKblj4LmlbApIOWKqOaAgei3r+eUsQ0KICAnYWN0aXZlX3Bvc3RfYXJ0aWNsZV9saXN0X2F1dGhvcicgPT4gDQogIGFycmF5ICgNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9hdXRob3InLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdtdXN0X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnYXV0aCcsDQogICAgKSwNCiAgICAnbm90X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroGRhdGXpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF9kYXRlJyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAnYWN0aXZlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X2RhdGUnLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdtdXN0X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnZGF0ZScsDQogICAgKSwNCiAgICAnbm90X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroHRhZ3PpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF90YWcnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdhY3RpdmUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfdGFnJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncGFnZScsDQogICAgKSwNCiAgICAnbXVzdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3RhZ3MnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2lkJywNCiAgICAgIDEgPT4gJ2FsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6DpobXljZXpobUg5Lyq6Z2Z6Lev55SxDQogICdyZXdyaXRlX3Bvc3RfYXJ0aWNsZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9zaW5nbGUnLA0KICAgICdjYWxsJyA9PiAnVmlld1Bvc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncG9zdEBpZCcsDQogICAgICAxID0+ICdwb3N0QGFsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BpbmRleOWIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3QnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0JywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3BhZ2UnLA0KICAgICksDQogICAgJ2FyZ3Nfd2l0aCcgPT4gDQogICAgYXJyYXkgKA0KICAgICksDQogICAgJ2FiYnJfdXJsJyA9PiB0cnVlLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BjYXRlZ29yeeWIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3RfY2F0ZWdvcnknID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X2NhdGVnb3J5JywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGVAaWQnLA0KICAgICAgMSA9PiAnY2F0ZUBhbGlhcycsDQogICAgICAyID0+ICdwYWdlJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BhdXRob3LliJfooagg5Lyq6Z2Z6Lev55SxDQogICdyZXdyaXRlX3Bvc3RfYXJ0aWNsZV9saXN0X2F1dGhvcicgPT4gDQogIGFycmF5ICgNCiAgICAndHlwZScgPT4gJ3Jld3JpdGUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfYXV0aG9yJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2F1dGhAaWQnLA0KICAgICAgMSA9PiAnYXV0aEBhbGlhcycsDQogICAgICAyID0+ICdwYWdlJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BkYXRl5YiX6KGoIOS8qumdmei3r+eUsQ0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfbGlzdF9kYXRlJyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9kYXRlJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2RhdGUnLA0KICAgICAgMSA9PiAncGFnZScsDQogICAgKSwNCiAgKSwNCi8vICDmt7vliqAg5paH56ugdGFn5YiX6KGoIOS8qumdmei3r+eUsQ0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfbGlzdF90YWcnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X3RhZycsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdhcmdzJyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICd0YWdzQGlkJywNCiAgICAgIDEgPT4gJ3RhZ3NAYWxpYXMnLA0KICAgICAgMiA9PiAncGFnZScsDQogICAgKSwNCiAgKSwNCi8vICDov5nmmK/kuIDkuKrkvovlrZDvvJog5paH56ug5pCc57Si55qE5Lyq6Z2Z6Lev55Sx55qE5a6e546wDQovKg0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfc2VhcmNoJyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfc2VhcmNoJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdTZWFyY2gnLA0KICAgICdwcmVmaXgnID0+ICdzZWFyY2gnLA0KICAgICd1cmxydWxlJyA9PiAneyVob3N0JX17JXElfV97JXBhZ2UlfS5odG1sJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgJ3EnID0+ICdbXlxcL19dKycsDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdhcmdzX3dpdGgnID0+IA0KICAgIGFycmF5ICgNCiAgICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICApLA0KICAgICdyZXF1ZXN0X21ldGhvZCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnR0VUJywNCiAgICAgIDEgPT4gJ1BPU1QnLA0KICAgICksDQogICAgJ29ubHlfbWF0Y2hfcGFnZScgPT4gZmFsc2UsDQogICksDQoqLw0KLy8gIOa3u+WKoCDpu5jorqTot6/nlLEg77yI5paH56ug6aG15YiX6KGo55qE6aaW6aG16Lev55Sx77yM5Y+q5Zyo5rKh5pyJ5byA5ZCv5Lyq6Z2Z5LiL5ZCv55So77yJDQogICdkZWZhdWx0X3Bvc3RfYXJ0aWNsZV9saXN0JyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAnZGVmYXVsdCcsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdCcsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdnZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3BhZ2UnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGUnLA0KICAgICAgMSA9PiAndGFncycsDQogICAgICAyID0+ICdhdXRoJywNCiAgICAgIDMgPT4gJ2RhdGUnLA0KICAgICAgNCA9PiAnaWQnLA0KICAgICAgNSA9PiAnYWxpYXMnLA0KICAgICksDQogICAgJ2FiYnJfdXJsJyA9PiB0cnVlLA0KICApLA0KKTsNCg==</file>
	<file name='zb_system\function\c_system_admin_function.php' crc32='21322896'  dt:dt='bin.base64'>PD9waHANCi8qKg0KICog5ZCO5Y+w566h55CG6L6F5Yqp5Ye95pWw55u45YWzDQogKiBAcGFja2FnZSBaLUJsb2dQSFANCiAqIEBzdWJwYWNrYWdlIFN5c3RlbS9BZG1pbmlzdHJhdG9yIOWQjuWPsOeuoeeQhg0KICogQGF1dGhvciBaLUJsb2dQSFAgVGVhbQ0KICovDQoNCmlmICghZGVmaW5lZCgnWkJQX1BBVEgnKSkgew0KICAgIGV4aXQoJ0FjY2VzcyBkZW5pZWQnKTsNCn0NCg0KLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCg0KLyoqDQogKiDmt7vliqDpobXpnaLnrqHnkIblrZDoj5zljZUo5YaF572u5o+S5Lu25Ye95pWwKS4NCiAqLw0KZnVuY3Rpb24gSW5jbHVkZV9BZG1pbl9BZGRwYWdlc3VibWVudSgpDQp7DQogICAgZWNobyBNYWtlU3ViTWVudSgkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnbmV3X3BhZ2UnXSwgJy4uL2NtZC5waHA/YWN0PVBhZ2VFZHQnLCAnbS1sZWZ0JywgbnVsbCwgbnVsbCwgbnVsbCwgJ2ljb24tZmlsZS1wbHVzLWZpbGwnKTsNCn0NCg0KLyoqDQogKiDmt7vliqDmoIfnrb7nrqHnkIblrZDoj5zljZUo5YaF572u5o+S5Lu25Ye95pWwKS4NCiAqLw0KZnVuY3Rpb24gSW5jbHVkZV9BZG1pbl9BZGR0YWdzdWJtZW51KCkNCnsNCiAgICAkdHlwZSA9IChpbnQpIEdldFZhcnMoJ3R5cGUnKTsNCiAgICAkdHlwZXVybCA9ICR0eXBlID4gMCA/ICgnJnR5cGU9JyAuICR0eXBlKSA6ICcnOw0KICAgIGVjaG8gTWFrZVN1Yk1lbnUoJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ25ld190YWcnXSwgJy4uL2NtZC5waHA/YWN0PVRhZ0VkdCcgLiAkdHlwZXVybCwgJ20tbGVmdCcsIG51bGwsIG51bGwsIG51bGwsICdpY29uLXRhZy1maWxsJyk7DQp9DQoNCi8qKg0KICog5re75Yqg5YiG57G7566h55CG5a2Q6I+c5Y2VKOWGhee9ruaPkuS7tuWHveaVsCkuDQogKi8NCmZ1bmN0aW9uIEluY2x1ZGVfQWRtaW5fQWRkY2F0ZXN1Ym1lbnUoKQ0Kew0KICAgICR0eXBlID0gKGludCkgR2V0VmFycygndHlwZScpOw0KICAgICR0eXBldXJsID0gJHR5cGUgPiAwID8gKCcmdHlwZT0nIC4gJHR5cGUpIDogJyc7DQogICAgZWNobyBNYWtlU3ViTWVudSgkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnbmV3X2NhdGVnb3J5J10sICcuLi9jbWQucGhwP2FjdD1DYXRlZ29yeUVkdCcgLiAkdHlwZXVybCwgJ20tbGVmdCcsIG51bGwsIG51bGwsIG51bGwsICdpY29uLWZvbGRlci1wbHVzJyk7DQp9DQoNCi8qKg0KICog5re75Yqg55So5oi3566h55CG5a2Q6I+c5Y2VKOWGhee9ruaPkuS7tuWHveaVsCkuDQogKi8NCmZ1bmN0aW9uIEluY2x1ZGVfQWRtaW5fQWRkbWVtc3VibWVudSgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgaWYgKCR6YnAtPkNoZWNrUmlnaHRzKCdNZW1iZXJOZXcnKSkgew0KICAgICAgICBlY2hvIE1ha2VTdWJNZW51KCRHTE9CQUxTWydsYW5nJ11bJ21zZyddWyduZXdfbWVtYmVyJ10sICcuLi9jbWQucGhwP2FjdD1NZW1iZXJOZXcnLCAnbS1sZWZ0JywgbnVsbCwgbnVsbCwgbnVsbCwgJ2ljb24tcGVyc29uLXBsdXMtZmlsbCcpOw0KICAgIH0NCiAgICBlY2hvIE1ha2VTdWJNZW51KCRHTE9CQUxTWydsYW5nJ11bJ21zZyddWyd2aWV3X3JpZ2h0cyddLCAnLi4vY21kLnBocD9hY3Q9bWlzYyZhbXA7dHlwZT12cnMnLCAnbS1sZWZ0JywgbnVsbCwgbnVsbCwgbnVsbCwgJ2ljb24tcGVyc29uLWNoZWNrLWZpbGwnKTsNCn0NCg0KLyoqDQogKiDmt7vliqDmqKHlnZfnrqHnkIblrZDoj5zljZUo5YaF572u5o+S5Lu25Ye95pWwKS4NCiAqLw0KZnVuY3Rpb24gSW5jbHVkZV9BZG1pbl9BZGRtb2RzdWJtZW51KCkNCnsNCiAgICBlY2hvIE1ha2VTdWJNZW51KCRHTE9CQUxTWydsYW5nJ11bJ21zZyddWyduZXdfbW9kdWxlJ10sICcuLi9jbWQucGhwP2FjdD1Nb2R1bGVFZHQnLCAnbS1sZWZ0JywgbnVsbCwgbnVsbCwgbnVsbCwgJ2ljb24tc3VidHJhY3QnKTsNCiAgICBlY2hvIE1ha2VTdWJNZW51KCRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydtb2R1bGVfbmF2YmFyJ10sICcuLi9jbWQucGhwP2FjdD1Nb2R1bGVFZHQmYW1wO2ZpbGVuYW1lPW5hdmJhcicpOw0KICAgIGVjaG8gTWFrZVN1Yk1lbnUoJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ21vZHVsZV9saW5rJ10sICcuLi9jbWQucGhwP2FjdD1Nb2R1bGVFZHQmYW1wO2ZpbGVuYW1lPWxpbmsnKTsNCiAgICBlY2hvIE1ha2VTdWJNZW51KCRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydtb2R1bGVfZmF2b3JpdGUnXSwgJy4uL2NtZC5waHA/YWN0PU1vZHVsZUVkdCZhbXA7ZmlsZW5hbWU9ZmF2b3JpdGUnKTsNCiAgICBlY2hvIE1ha2VTdWJNZW51KCRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydtb2R1bGVfbWlzYyddLCAnLi4vY21kLnBocD9hY3Q9TW9kdWxlRWR0JmFtcDtmaWxlbmFtZT1taXNjJyk7DQp9DQoNCi8qKg0KICog5re75Yqg6K+E6K66566h55CG5a2Q6I+c5Y2VKOWGhee9ruaPkuS7tuWHveaVsCkuDQogKi8NCmZ1bmN0aW9uIEluY2x1ZGVfQWRtaW5fQWRkY210c3VibWVudSgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgaWYgKCR6YnAtPkNoZWNrUmlnaHRzKCdDb21tZW50QWxsJykpIHsNCiAgICAgICAgJG4gPSAoJHpicC0+Y2FjaGUtPmFsbF9jb21tZW50X251bXMgLSAkemJwLT5jYWNoZS0+bm9ybWFsX2NvbW1lbnRfbnVtcyk7DQogICAgICAgIGlmICgkbiAhPSAwKSB7DQogICAgICAgICAgICAkbiA9ICcgKCcgLiAkbiAuICcpJzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRuID0gJyc7DQogICAgICAgIH0NCiAgICAgICAgZWNobyBNYWtlU3ViTWVudSgkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnY2hlY2tfY29tbWVudCddIC4gJG4sICcuLi9jbWQucGhwP2FjdD1Db21tZW50TW5nJmFtcDtpc2NoZWNraW5nPTEnLCAnbS1sZWZ0ICcgLiAoR2V0VmFycygnaXNjaGVja2luZycpID8gJ20tbm93JyA6ICcnKSwgbnVsbCwgbnVsbCwgbnVsbCwgJ2ljb24tc2hpZWxkLXNoYWRlZCcpOw0KICAgIH0NCn0NCg0KLyoqDQogKiDmt7vliqDnvZHnq5norr7nva7lrZDoj5zljZUo5YaF572u5o+S5Lu25Ye95pWwKS4NCiAqLw0KZnVuY3Rpb24gSW5jbHVkZV9BZG1pbl9BZGRzZXR0aW5nc3VibWVudSgpDQp7DQogICAgZWNobyBNYWtlU3ViTWVudSgkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnY2xlYXJfdGh1bWJfY2FjaGUnXSwgJ2phdmFzY3JpcHQ6d2luZG93LmNvbmZpcm0oXCcnIC4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ2NvbmZpcm1fY2xlYXJfdGh1bWJfY2FjaGUnXSAuICdcJykgJiYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCcnIC4gQnVpbGRTYWZlQ21kVVJMKCdhY3Q9bWlzYyZ0eXBlPWNsZWFydGh1bWJjYWNoZScpIC4gJ1wnKTsnLCAnbS1yaWdodCcsIG51bGwsIG51bGwsIG51bGwsICdpY29uLXRyYXNoLWZpbGwnKTsNCn0NCg0KLyoqDQogKiDljYfnuqfmlbDmja7lupMNCiAqLw0KZnVuY3Rpb24gSW5jbHVkZV9BZG1pbl9VcGRhdGVEQigpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICBpZiAoJHpicC0+dmVyc2lvbiA+PSBaQ19MQVNUX1ZFUlNJT04gJiYgKGludCkgJHpicC0+b3B0aW9uWydaQ19MQVNUX1ZFUlNJT04nXSA8IFpDX0xBU1RfVkVSU0lPTikgew0KICAgICAgICBpZiAoc3Vic3RyKEdldFZhbHVlSW5BcnJheShnZXRfaW5jbHVkZWRfZmlsZXMoKSwgMCksIC05KSA9PSAnaW5kZXgucGhwJykgew0KICAgICAgICAgICAgJHpicC0+U2V0SGludCgndGlwcycsICc8YSBocmVmPSIjIiBvbmNsaWNrPSIkLmdldChibG9naG9zdCtcJ3piX3N5c3RlbS9hZG1pbi91cGRhdGVkYi5waHBcJywgZnVuY3Rpb24oZGF0YSl7YWxlcnQoSlNPTi5wYXJzZShkYXRhKS5kYXRhKTt3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7fSk7Ij4nIC4gQCR6YnAtPmxhbmdzLT5tc2ctPnVwZGF0ZV9kYiAuICc8L2E+JywgMTAwMDApOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQovKioNCiAqIENoZWNrIEh0dHAgMzA0T0sNCiAqLw0KZnVuY3Rpb24gSW5jbHVkZV9BZG1pbl9DaGVja0h0dHAzMDRPSygpDQp7DQogICAgZ2xvYmFsICR6YnAsICRhY3Rpb247DQogICAgaWYgKCRhY3Rpb24gIT0gJ2FkbWluJykgew0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIGlmICghJHpicC0+Q2hlY2tSaWdodHMoJ3Jvb3QnKSkgew0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIC8v5Y6f5Zug5piv5LiN6IO96L6T5Ye6MzA054q25oCB55qE77yM5Y+R546w6L6T5Ye6NTAw54q25oCB5Lmf5piv6ZSZ55qE77yM5omA5Lul5qOA5rWLNTAw55So5LqOMzA05LiKDQogICAgaWYgKEdldFZhcnMoJ2h0dHAzMDRvaycsICdDT09LSUUnKSAhPT0gJzEnICYmIEdldFZhcnMoJ2h0dHAzMDRvaycsICdDT09LSUUnKSAhPT0gJzAnKSB7DQogICAgICAgIGVjaG8gJzxzY3JpcHQ+DQogICAgICAgICB2YXIgZXhwID0gbmV3IERhdGUoKTsNCiAgICAgICAgIGV4cC5zZXRUaW1lKGV4cC5nZXRUaW1lKCkgKyAzNjUqMjQqMzYwMCoxMDAwKTsNCiAgICAgICAgICQoZnVuY3Rpb24gKCkgeyAgJC5hamF4KHt0eXBlOiAiR0VUIix1cmw6ICInIC4gJHpicC0+aG9zdCAuICd6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9Y2hlY2todHRwMzA0b2siLHN1Y2Nlc3M6IGZ1bmN0aW9uKG1zZyl7IA0KICAgICAgICAgICAgZG9jdW1lbnQuY29va2llPSJodHRwMzA0b2s9MDsgcGF0aD0nIC4gJHpicC0+Y29va2llc3BhdGggLiAnIiArICI7IGV4cGlyZXM9IiArIGV4cC50b0dNVFN0cmluZygpOw0KICAgICAgICAgfSxzdGF0dXNDb2RlOiB7NTAwOiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZT0iaHR0cDMwNG9rPTE7IHBhdGg9JyAuICR6YnAtPmNvb2tpZXNwYXRoIC4gJyIgKyAiOyBleHBpcmVzPSIgKyBleHAudG9HTVRTdHJpbmcoKTsNCiAgICAgICAgIH19fSk7IH0pOyA8L3NjcmlwdD4nOw0KICAgIH0NCiAgICBpZiAoR2V0VmFycygnaHR0cDMwNG9rJywgJ0NPT0tJRScpID09PSAnMCcpIHsNCiAgICAgICAgaWYgKCR6YnAtPm9wdGlvblsnWkNfSlNfMzA0X0VOQUJMRSddID09IHRydWUpIHsNCiAgICAgICAgICAgICR6YnAtPm9wdGlvblsnWkNfSlNfMzA0X0VOQUJMRSddID0gZmFsc2U7DQogICAgICAgICAgICAkemJwLT5TYXZlT3B0aW9uKCk7DQogICAgICAgIH0NCiAgICB9IGVsc2VpZiAoR2V0VmFycygnaHR0cDMwNG9rJywgJ0NPT0tJRScpID09PSAnMScpIHsNCiAgICAgICAgaWYgKCR6YnAtPm9wdGlvblsnWkNfSlNfMzA0X0VOQUJMRSddID09IGZhbHNlKSB7DQogICAgICAgICAgICAkemJwLT5vcHRpb25bJ1pDX0pTXzMwNF9FTkFCTEUnXSA9IHRydWU7DQogICAgICAgICAgICAkemJwLT5TYXZlT3B0aW9uKCk7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCiR0b3BtZW51cyA9IGFycmF5KCk7DQoNCiRsZWZ0bWVudXMgPSBhcnJheSgpOw0KDQovKioNCiAqIOWQjuWPsOeuoeeQhuW3puS+p+WvvOiIquiPnOWNlS4NCiAqLw0KZnVuY3Rpb24gUmVzcG9uc2VBZG1pbl9MZWZ0TWVudSgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgZ2xvYmFsICRsZWZ0bWVudXM7DQoNCiAgICAkbGVmdG1lbnVzWyduYXZfbmV3J10gPSBNYWtlTGVmdE1lbnUoIkFydGljbGVFZHQiLCAkemJwLT5sYW5nWydtc2cnXVsnbmV3X2FydGljbGUnXSwgJHpicC0+aG9zdCAuICJ6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9QXJ0aWNsZUVkdCIsICJuYXZfbmV3IiwgImFBcnRpY2xlRWR0IiwgIiIsICJpY29uLXBlbmNpbC1zcXVhcmUtZmlsbCIpOw0KICAgICRsZWZ0bWVudXNbJ25hdl9hcnRpY2xlJ10gPSBNYWtlTGVmdE1lbnUoIkFydGljbGVNbmciLCAkemJwLT5sYW5nWydtc2cnXVsnYXJ0aWNsZV9tYW5hZ2UnXSwgJHpicC0+aG9zdCAuICJ6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9QXJ0aWNsZU1uZyIsICJuYXZfYXJ0aWNsZSIsICJhQXJ0aWNsZU1uZyIsICIiLCAiaWNvbi1zdGlja2llcyIpOw0KICAgICRsZWZ0bWVudXNbJ25hdl9wYWdlJ10gPSBNYWtlTGVmdE1lbnUoIlBhZ2VNbmciLCAkemJwLT5sYW5nWydtc2cnXVsncGFnZV9tYW5hZ2UnXSwgJHpicC0+aG9zdCAuICJ6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9UGFnZU1uZyIsICJuYXZfcGFnZSIsICJhUGFnZU1uZyIsICIiLCAiaWNvbi1zdGlja2llcy1maWxsIik7DQoNCiAgICAkbGVmdG1lbnVzW10gPSAiPGxpIGNsYXNzPSdzcGxpdCc+PGhyLz48L2xpPiI7DQoNCiAgICAkbGVmdG1lbnVzWyduYXZfY2F0ZWdvcnknXSA9IE1ha2VMZWZ0TWVudSgiQ2F0ZWdvcnlNbmciLCAkemJwLT5sYW5nWydtc2cnXVsnY2F0ZWdvcnlfbWFuYWdlJ10sICR6YnAtPmhvc3QgLiAiemJfc3lzdGVtL2NtZC5waHA/YWN0PUNhdGVnb3J5TW5nIiwgIm5hdl9jYXRlZ29yeSIsICJhQ2F0ZWdvcnlNbmciLCAiIiwgImljb24tZm9sZGVyLWZpbGwiKTsNCiAgICAkbGVmdG1lbnVzWyduYXZfdGFncyddID0gTWFrZUxlZnRNZW51KCJUYWdNbmciLCAkemJwLT5sYW5nWydtc2cnXVsndGFnX21hbmFnZSddLCAkemJwLT5ob3N0IC4gInpiX3N5c3RlbS9jbWQucGhwP2FjdD1UYWdNbmciLCAibmF2X3RhZ3MiLCAiYVRhZ01uZyIsICIiLCAiaWNvbi10YWdzLWZpbGwiKTsNCiAgICAkbGVmdG1lbnVzWyduYXZfY29tbWVudDEnXSA9IE1ha2VMZWZ0TWVudSgiQ29tbWVudE1uZyIsICR6YnAtPmxhbmdbJ21zZyddWydjb21tZW50X21hbmFnZSddLCAkemJwLT5ob3N0IC4gInpiX3N5c3RlbS9jbWQucGhwP2FjdD1Db21tZW50TW5nIiwgIm5hdl9jb21tZW50IiwgImFDb21tZW50TW5nIiwgIiIsICJpY29uLWNoYXQtdGV4dC1maWxsIik7DQogICAgJGxlZnRtZW51c1snbmF2X3VwbG9hZCddID0gTWFrZUxlZnRNZW51KCJVcGxvYWRNbmciLCAkemJwLT5sYW5nWydtc2cnXVsndXBsb2FkX21hbmFnZSddLCAkemJwLT5ob3N0IC4gInpiX3N5c3RlbS9jbWQucGhwP2FjdD1VcGxvYWRNbmciLCAibmF2X3VwbG9hZCIsICJhVXBsb2FkTW5nIiwgIiIsICJpY29uLWluYm94ZXMtZmlsbCIpOw0KICAgICRsZWZ0bWVudXNbJ25hdl9tZW1iZXInXSA9IE1ha2VMZWZ0TWVudSgiTWVtYmVyTW5nIiwgJHpicC0+bGFuZ1snbXNnJ11bJ21lbWJlcl9tYW5hZ2UnXSwgJHpicC0+aG9zdCAuICJ6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9TWVtYmVyTW5nIiwgIm5hdl9tZW1iZXIiLCAiYU1lbWJlck1uZyIsICIiLCAiaWNvbi1wZW9wbGUtZmlsbCIpOw0KDQogICAgJGxlZnRtZW51c1tdID0gIjxsaSBjbGFzcz0nc3BsaXQnPjxoci8+PC9saT4iOw0KDQogICAgJGxlZnRtZW51c1snbmF2X3RoZW1lJ10gPSBNYWtlTGVmdE1lbnUoIlRoZW1lTW5nIiwgJHpicC0+bGFuZ1snbXNnJ11bJ3RoZW1lX21hbmFnZSddLCAkemJwLT5ob3N0IC4gInpiX3N5c3RlbS9jbWQucGhwP2FjdD1UaGVtZU1uZyIsICJuYXZfdGhlbWUiLCAiYVRoZW1lTW5nIiwgIiIsICJpY29uLWdyaWQtMXgyLWZpbGwiKTsNCiAgICAkbGVmdG1lbnVzWyduYXZfbW9kdWxlJ10gPSBNYWtlTGVmdE1lbnUoIk1vZHVsZU1uZyIsICR6YnAtPmxhbmdbJ21zZyddWydtb2R1bGVfbWFuYWdlJ10sICR6YnAtPmhvc3QgLiAiemJfc3lzdGVtL2NtZC5waHA/YWN0PU1vZHVsZU1uZyIsICJuYXZfbW9kdWxlIiwgImFNb2R1bGVNbmciLCAiIiwgImljb24tZ3JpZC0zeDMtZ2FwLWZpbGwiKTsNCiAgICAkbGVmdG1lbnVzWyduYXZfcGx1Z2luJ10gPSBNYWtlTGVmdE1lbnUoIlBsdWdpbk1uZyIsICR6YnAtPmxhbmdbJ21zZyddWydwbHVnaW5fbWFuYWdlJ10sICR6YnAtPmhvc3QgLiAiemJfc3lzdGVtL2NtZC5waHA/YWN0PVBsdWdpbk1uZyIsICJuYXZfcGx1Z2luIiwgImFQbHVnaW5NbmciLCAiIiwgImljb24tcHV6emxlLWZpbGwiKTsNCg0KICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0FkbWluX0xlZnRNZW51J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcG5hbWUoJGxlZnRtZW51cyk7DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJGxlZnRtZW51cyBhcyAkbSkgew0KICAgICAgICBlY2hvICRtOw0KICAgIH0NCn0NCg0KLyoqDQogKiDlkI7lj7DnrqHnkIbpobbpg6joj5zljZUuDQogKi8NCmZ1bmN0aW9uIFJlc3BvbnNlQWRtaW5fVG9wTWVudSgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgZ2xvYmFsICR0b3BtZW51czsNCg0KICAgICR0b3BtZW51c1tdID0gTWFrZVRvcE1lbnUoImFkbWluIiwgJHpicC0+bGFuZ1snbXNnJ11bJ2Rhc2hib2FyZCddLCAkemJwLT5ob3N0IC4gInpiX3N5c3RlbS9jbWQucGhwP2FjdD1hZG1pbiIsICIiLCAiIiwgImljb24taG91c2UtZG9vci1maWxsIik7DQogICAgJHRvcG1lbnVzW10gPSBNYWtlVG9wTWVudSgiU2V0dGluZ01uZyIsIEAkemJwLT5sYW5nWydtc2cnXVsnd2ViX3NldHRpbmdzJ10sICR6YnAtPmhvc3QgLiAiemJfc3lzdGVtL2NtZC5waHA/YWN0PVNldHRpbmdNbmciLCAiIiwgIiIsICJpY29uLWdlYXItZmlsbCIpOw0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fVG9wTWVudSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnBuYW1lKCR0b3BtZW51cyk7DQogICAgfQ0KDQogICAgJHRvcG1lbnVzW10gPSBNYWtlVG9wTWVudSgibWlzYyIsICR6YnAtPmxhbmdbJ21zZyddWydvZmZpY2lhbF93ZWJzaXRlJ10sICJodHRwczovL3d3dy56YmxvZ2NuLmNvbS8iLCAiX2JsYW5rIiwgIiIsICJpY29uLXpibG9nLWNpcmNsZS1maWxsIik7DQoNCiAgICBmb3JlYWNoICgkdG9wbWVudXMgYXMgJG0pIHsNCiAgICAgICAgZWNobyAkbTsNCiAgICB9DQp9DQoNCi8qKg0KICog5re75Yqg5a2Q6I+c5Y2V6aG5Lg0KICoNCiAqIEBwYXJhbSAkc3RyTmFtZQ0KICogQHBhcmFtICRzdHJVcmwNCiAqIEBwYXJhbSAkc3RyQ2xhc3MNCiAqIEBwYXJhbSAkc3RyVGFyZ2V0DQogKiBAcGFyYW0gJHN0cklkDQogKiBAcGFyYW0gJHN0clRpdGxlDQogKg0KICogQHJldHVybiBudWxsfHN0cmluZw0KICovDQpmdW5jdGlvbiBNYWtlU3ViTWVudSgkc3RyTmFtZSwgJHN0clVybCwgJHN0ckNsYXNzID0gJ20tbGVmdCcsICRzdHJUYXJnZXQgPSAnJywgJHN0cklkID0gJycsICRzdHJUaXRsZSA9ICcnLCAkc3RySWNvbkNsYXNzID0gJycpDQp7DQogICAgJHMgPSAnPGEgaHJlZj0iJyAuICRzdHJVcmwgLiAnIiAnOw0KICAgIGlmICgkc3RyVGFyZ2V0KSB7DQogICAgICAgICRzIC49ICd0YXJnZXQ9IicgLiAkc3RyVGFyZ2V0IC4gJyInOw0KICAgIH0NCiAgICBpZiAoJHN0cklkKSB7DQogICAgICAgICRzIC49ICdpZD0iJyAuICRzdHJJZCAuICciJzsNCiAgICB9DQogICAgaWYgKCRzdHJUaXRsZSkgew0KICAgICAgICAkcyAuPSAndGl0bGU9IicgLiAkc3RyVGl0bGUgLiAnIiAnIC4gJ2FsdD0iJyAuICRzdHJUaXRsZSAuICciICc7DQogICAgfQ0KICAgICRzIC49ICc+JzsNCiAgICAkc3RySWNvbkVsZW0gPSAkc3RySWNvbkNsYXNzICE9PSAiIiA/ICI8aSBjbGFzcz1cIiIgLiAkc3RySWNvbkNsYXNzIC4gIlwiIHN0eWxlPVwibGluZS1oZWlnaHQ6IDFlbTtcIj48L2k+ICIgOiAiIjsNCiAgICAkcyAuPSAnPHNwYW4gY2xhc3M9IicgLiAkc3RyQ2xhc3MgLiAnIj4nIC4gJHN0ckljb25FbGVtIC4gJHN0ck5hbWUgLiAnPC9zcGFuPjwvYT4nOw0KDQogICAgcmV0dXJuICRzOw0KfQ0KDQovKioNCiAqIOa3u+WKoOmhtumDqOiPnOWNlemhuS4NCiAqDQogKiBAcGFyYW0gJHJlcXVpcmVBY3Rpb24NCiAqIEBwYXJhbSAkc3RyTmFtZQ0KICogQHBhcmFtICRzdHJVcmwNCiAqIEBwYXJhbSAkc3RyVGFyZ2V0DQogKiBAcGFyYW0gJHN0ckxpSWQNCiAqIEBwYXJhbSAkc3RySWNvbkNsYXNzDQogKg0KICogQHJldHVybiBudWxsfHN0cmluZw0KICovDQpmdW5jdGlvbiBNYWtlVG9wTWVudSgkcmVxdWlyZUFjdGlvbiwgJHN0ck5hbWUsICRzdHJVcmwsICRzdHJUYXJnZXQsICRzdHJMaUlkLCAkc3RySWNvbkNsYXNzID0gIiIpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICBzdGF0aWMgJEFkbWluVG9wTWVudUNvdW50ID0gMDsNCiAgICBpZiAoJHpicC0+Q2hlY2tSaWdodHMoJHJlcXVpcmVBY3Rpb24pID09IGZhbHNlKSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICAkdG1wID0gbnVsbDsNCiAgICBpZiAoJHN0clRhcmdldCA9PSAiIikgew0KICAgICAgICAkc3RyVGFyZ2V0ID0gIl9zZWxmIjsNCiAgICB9DQogICAgJEFkbWluVG9wTWVudUNvdW50ID0gKCRBZG1pblRvcE1lbnVDb3VudCArIDEpOw0KICAgIGlmICgkc3RyTGlJZCA9PSAiIikgew0KICAgICAgICAkc3RyTGlJZCA9ICJ0b3BtZW51IiAuICRBZG1pblRvcE1lbnVDb3VudDsNCiAgICB9DQogICAgJHN0ckljb25FbGVtID0gJHN0ckljb25DbGFzcyAhPT0gIiIgPyAiPGkgY2xhc3M9XCIiIC4gJHN0ckljb25DbGFzcyAuICJcIj48L2k+PHNwYW4+IiA6ICI8c3Bhbj4iOw0KICAgICR0bXAgPSAiPGxpIGlkPVwiIiAuICRzdHJMaUlkIC4gIlwiPjxhIGhyZWY9XCIiIC4gJHN0clVybCAuICJcIiB0YXJnZXQ9XCIiIC4gJHN0clRhcmdldCAuICJcIiB0aXRsZT1cIiIgLiBodG1sc3BlY2lhbGNoYXJzKCRzdHJOYW1lKSAuICJcIj4iIC4gJHN0ckljb25FbGVtIC4gJHN0ck5hbWUgLiAiPC9zcGFuPjwvYT48L2xpPiI7DQoNCiAgICByZXR1cm4gJHRtcDsNCn0NCg0KLyoqDQogKiDmt7vliqDlt6bkvqfoj5zljZXpobkuDQogKg0KICogQHBhcmFtICRyZXF1aXJlQWN0aW9uDQogKiBAcGFyYW0gJHN0ck5hbWUNCiAqIEBwYXJhbSAkc3RyVXJsDQogKiBAcGFyYW0gJHN0ckxpSWQNCiAqIEBwYXJhbSAkc3RyQUlkDQogKiBAcGFyYW0gJHN0ckltZ1VybA0KICoNCiAqIEByZXR1cm4gbnVsbHxzdHJpbmcNCiAqLw0KZnVuY3Rpb24gTWFrZUxlZnRNZW51KCRyZXF1aXJlQWN0aW9uLCAkc3RyTmFtZSwgJHN0clVybCwgJHN0ckxpSWQsICRzdHJBSWQsICRzdHJJbWdVcmwsICRzdHJJY29uQ2xhc3MgPSAiIikNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIHN0YXRpYyAkQWRtaW5MZWZ0TWVudUNvdW50ID0gMDsNCiAgICBpZiAoJHpicC0+Q2hlY2tSaWdodHMoJHJlcXVpcmVBY3Rpb24pID09IGZhbHNlKSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICAkQWRtaW5MZWZ0TWVudUNvdW50ID0gKCRBZG1pbkxlZnRNZW51Q291bnQgKyAxKTsNCiAgICAkdG1wID0gbnVsbDsNCiAgICANCiAgICBpZiAoJHN0ckljb25DbGFzcyAhPSAiIikgew0KICAgICAgICAkdG1wID0gIjxsaSBpZD1cIiIgLiAkc3RyTGlJZCAuICJcIj48YSBpZD1cIiIgLiAkc3RyQUlkIC4gIlwiIGhyZWY9XCIiIC4gJHN0clVybCAuICJcIiB0aXRsZT1cIiIgLiBzdHJpcF90YWdzKCRzdHJOYW1lKSAuICJcIj48c3Bhbj48aSBjbGFzcz1cIiIgLiAkc3RySWNvbkNsYXNzIC4gIlwiPjwvaT4iIC4gJHN0ck5hbWUgLiAiPC9zcGFuPjwvYT48L2xpPiI7DQogICAgfSBlbHNlaWYgKCRzdHJJbWdVcmwgIT0gIiIpIHsNCiAgICAgICAgJHRtcCA9ICI8bGkgaWQ9XCIiIC4gJHN0ckxpSWQgLiAiXCI+PGEgaWQ9XCIiIC4gJHN0ckFJZCAuICJcIiBocmVmPVwiIiAuICRzdHJVcmwgLiAiXCIgdGl0bGU9XCIiIC4gc3RyaXBfdGFncygkc3RyTmFtZSkgLiAiXCI+PHNwYW4gY2xhc3M9XCJiZ2ljb25cIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6dXJsKCciIC4gJHN0ckltZ1VybCAuICInKVwiPiIgLiAkc3RyTmFtZSAuICI8L3NwYW4+PC9hPjwvbGk+IjsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkdG1wID0gIjxsaSBpZD1cIiIgLiAkc3RyTGlJZCAuICJcIj48YSBpZD1cIiIgLiAkc3RyQUlkIC4gIlwiIGhyZWY9XCIiIC4gJHN0clVybCAuICJcIiB0aXRsZT1cIiIgLiBzdHJpcF90YWdzKCRzdHJOYW1lKSAuICJcIj48c3Bhbj48aSBjbGFzcz1cImljb24td2luZG93LWZpbGxcIj48L2k+IiAuICRzdHJOYW1lIC4gIjwvc3Bhbj48L2E+PC9saT4iOw0KICAgIH0NCg0KICAgIHJldHVybiAkdG1wOw0KfQ0KDQovLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQovKioNCiAqIOeUn+aIkOmAmueUqOihqOWNleeahG9wdGlvbuWIl+ihqC4NCiAqDQogKiBAcGFyYW0gJGRlZmF1bHQNCiAqIEBwYXJhbSAkYXJyYXkNCiAqIEBwYXJhbSAkbmFtZQ0KICoNCiAqIEByZXR1cm4gbnVsbHxzdHJpbmcNCiAqLw0KZnVuY3Rpb24gT3V0cHV0T3B0aW9uSXRlbXNPZkNvbW1vbigkZGVmYXVsdCwgJGFycmF5LCAkbmFtZSA9ICdDb21tb24nKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRzID0gbnVsbDsNCiAgICAkdHogPSAkYXJyYXk7DQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZkNvbW1vbiddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRkZWZhdWx0LCAkdHosICRuYW1lKTsNCiAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQogICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJHR6IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICRzIC49ICc8b3B0aW9uIHZhbHVlPSInIC4gJGtleSAuICciICcgLiAoJGRlZmF1bHQgPT0gJGtleSA/ICdzZWxlY3RlZD0ic2VsZWN0ZWQiJyA6ICcnKSAuICcgPicgLiAkdmFsdWUgLiAnPC9vcHRpb24+JzsNCiAgICB9DQogICAgcmV0dXJuICRzOw0KfQ0KDQovKioNCiAqIOeUn+aIkOWIhuexu3NlbGVjdOihqOWNlS4NCiAqDQogKiBAcGFyYW0gJGRlZmF1bHQNCiAqDQogKiBAcmV0dXJuIG51bGx8c3RyaW5nDQogKi8NCmZ1bmN0aW9uIE91dHB1dE9wdGlvbkl0ZW1zT2ZDYXRlZ29yaWVzKCRkZWZhdWx0LCAkdHlwZSA9IDApDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICAkcyA9IG51bGw7DQogICAgJHR6ID0gYXJyYXkoKTsNCiAgICBmb3JlYWNoICgkemJwLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlWyR0eXBlXSBhcyAkaWQgPT4gJGNhdGUpIHsNCiAgICAgICAgJHR6WyRjYXRlLT5JRF0gPSAkY2F0ZS0+U3ltYm9sTmFtZTsNCiAgICB9DQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZkNhdGVnb3JpZXMnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkZGVmYXVsdCwgJHR6LCAkdHlwZSk7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR0eiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcyAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRrZXkgLiAnIiAnIC4gKCRkZWZhdWx0ID09ICRrZXkgPyAnc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgLiAnID4nIC4gJHZhbHVlIC4gJzwvb3B0aW9uPic7DQogICAgfQ0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDnlJ/miJDmqKHmnb9zZWxlY3TooajljZUuDQogKg0KICogQHBhcmFtICRkZWZhdWx0DQogKiBAcGFyYW0gJHJlZnVzZV9maWxlX2ZpbHRlcg0KICogQHBhcmFtICRhY2NlcHRfdHlwZQ0KICoNCiAqIEByZXR1cm4gbnVsbHxzdHJpbmcNCiAqLw0KZnVuY3Rpb24gT3V0cHV0T3B0aW9uSXRlbXNPZlRlbXBsYXRlKCRkZWZhdWx0LCAkcmVmdXNlX2ZpbGVfZmlsdGVyID0gYXJyYXkoKSwgJGFjY2VwdF90eXBlID0gYXJyYXkoKSkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICAkdGVzdFJlZ0V4cCA9ICIvXihcLnxwb3N0LXxtb2R1bGV8aGVhZGVyfGZvb3Rlcnxjb21tZW50fHNpZGViYXJ8cGFnZWJhcnxbYS16QS1aXVxfKS9zaSI7DQogICAgJHMgPSBudWxsOw0KICAgICR0eiA9IGFycmF5KCk7DQogICAgJHR6WycnXSA9ICR6YnAtPmxhbmdbJ21zZyddWydub25lJ107DQoNCiAgICAvL3R5cGUgPSBsaXN0LHNpbmdsZSxhcnRpY2xlLHBhZ2UsY2F0ZWdvcnksdGFnLGF1dGhvcixkYXRl77yM5Y+v5Lul5bm25YiX5aSa5LiqDQoNCiAgICBmb3JlYWNoICgkemJwLT50ZW1wbGF0ZS0+dGVtcGxhdGVzIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgIGlmIChwcmVnX21hdGNoKCR0ZXN0UmVnRXhwLCAka2V5KSkgew0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCg0KICAgICAgICAkYiA9IGZhbHNlOw0KICAgICAgICBmb3JlYWNoICgkcmVmdXNlX2ZpbGVfZmlsdGVyIGFzICRrZXkyID0+ICR2YWx1ZTIpIHsNCiAgICAgICAgICAgICR0ZXN0UmVnRXhwMiA9ICIvLiooJHZhbHVlMikvc2kiOw0KICAgICAgICAgICAgaWYgKHByZWdfbWF0Y2goJHRlc3RSZWdFeHAyLCAka2V5KSkgew0KICAgICAgICAgICAgICAgICRiID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoJGIgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCg0KICAgICAgICAkbmFtZSA9ICR6YnAtPnRlbXBsYXRlLT50ZW1wbGF0ZXNfTmFtZVska2V5XTsNCiAgICAgICAgJHR5cGUgPSAkemJwLT50ZW1wbGF0ZS0+dGVtcGxhdGVzX1R5cGVbJGtleV07DQogICAgICAgICR0eXBlQXJyYXkgPSBleHBsb2RlKCd8JywgJHR5cGUpOw0KDQogICAgICAgIGlmIChzdHJ0b2xvd2VyKCR0eXBlKSA9PSAnbm9uZScpIHsNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy/liKTmlq3kuLvpopjmmK/lkKblr7nmqKHmnb/ov5vooYzkuoZUZW1wbGF0ZSBUeXBl5qCH5rOoDQogICAgICAgIGlmICgkemJwLT50ZW1wbGF0ZS0+aXN1c2VfbmFtZWFuZHR5cGUgPT0gdHJ1ZSkgey8v55SoJGFjY2VwdF90eXBl5Y675qOA5p+lJHR5cGVBcnJhee+8jOS4uuecnyRj5bCx5pivdHJ1ZeWwseWPr+S7peaUvuWFpeWIl+ihqA0KICAgICAgICAgICAgJGMgPSBmYWxzZTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRhY2NlcHRfdHlwZSBhcyAkazEgPT4gJHYxKSB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHR5cGVBcnJheSBhcyAkazIgPT4gJHYyKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChzdHJ0b2xvd2VyKHRyaW0oJHYxKSkgPT0gc3RydG9sb3dlcih0cmltKCR2MikpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkYyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJGMpIHsNCiAgICAgICAgICAgICAgICBpZiAoJGRlZmF1bHQgPT0gJGtleSkgew0KICAgICAgICAgICAgICAgICAgICAkczIgPSAoJG5hbWUgIT09ICcnKSA/ICcgKCcgLiAkbmFtZSAuICcpJyA6ICRuYW1lOw0KICAgICAgICAgICAgICAgICAgICAkdHpbJGtleV0gPSAnWycgLiAkemJwLT5sYW5nWydtc2cnXVsnY3VycmVudF90ZW1wbGF0ZSddIC4gJ10gJyAuICRrZXkgLiAkczI7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJHMyID0gKCRuYW1lICE9PSAnJykgPyAnICgnIC4gJG5hbWUgLiAnKScgOiAkbmFtZTsNCiAgICAgICAgICAgICAgICAgICAgJHR6WyRrZXldID0gJGtleSAuICRzMjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7IC8v5rKh5pyJ5qCH5rOo5bCx55So5Lyg57uf5pa55rOVDQogICAgICAgICAgICBpZiAoJGRlZmF1bHQgPT0gJGtleSkgew0KICAgICAgICAgICAgICAgICRzMiA9ICgkbmFtZSAhPT0gJycpID8gJyAoJyAuICRuYW1lIC4gJyknIDogJG5hbWU7DQogICAgICAgICAgICAgICAgJHR6WyRrZXldID0gJ1snIC4gJHpicC0+bGFuZ1snbXNnJ11bJ2N1cnJlbnRfdGVtcGxhdGUnXSAuICddICcgLiAka2V5IC4gJHMyOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkczIgPSAoJG5hbWUgIT09ICcnKSA/ICcgKCcgLiAkbmFtZSAuICcpJyA6ICRuYW1lOw0KICAgICAgICAgICAgICAgICR0elska2V5XSA9ICRrZXkgLiAkczI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9PdXRwdXRPcHRpb25JdGVtc09mVGVtcGxhdGUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkZGVmYXVsdCwgJHR6LCAkcmVmdXNlX2ZpbGVfZmlsdGVyLCAkYWNjZXB0X3R5cGUpOw0KICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCiAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkdHogYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgJHMgLj0gJzxvcHRpb24gdmFsdWU9IicgLiAka2V5IC4gJyIgJyAuICgkZGVmYXVsdCA9PSAka2V5ID8gJ3NlbGVjdGVkPSJzZWxlY3RlZCInIDogJycpIC4gJyA+JyAuICR2YWx1ZSAuICc8L29wdGlvbj4nOw0KICAgIH0NCiAgICByZXR1cm4gJHM7DQp9DQoNCi8qKg0KICog55Sf5oiQ55So5oi3562J57qnc2VsZWN06KGo5Y2VLg0KICoNCiAqIEBwYXJhbSAkZGVmYXVsdA0KICoNCiAqIEByZXR1cm4gbnVsbHxzdHJpbmcNCiAqLw0KZnVuY3Rpb24gT3V0cHV0T3B0aW9uSXRlbXNPZk1lbWJlckxldmVsKCRkZWZhdWx0KQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHMgPSBudWxsOw0KICAgICR0eiA9IGFycmF5KCk7DQogICAgaWYgKCEkemJwLT5DaGVja1JpZ2h0cygnTWVtYmVyQWxsJykpIHsNCiAgICAgICAgJHR6WyRkZWZhdWx0XSA9ICR6YnAtPmxhbmdbJ3VzZXJfbGV2ZWxfbmFtZSddWyRkZWZhdWx0XTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBmb3IgKCRpID0gMTsgJGkgPCAoY291bnQoJHpicC0+bGFuZ1sndXNlcl9sZXZlbF9uYW1lJ10pICsgMSk7ICRpKyspIHsNCiAgICAgICAgICAgICR0elskaV0gPSAkemJwLT5sYW5nWyd1c2VyX2xldmVsX25hbWUnXVskaV07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9PdXRwdXRPcHRpb25JdGVtc09mTWVtYmVyTGV2ZWwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkZGVmYXVsdCk7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR0eiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcyAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRrZXkgLiAnIiAnIC4gKCRkZWZhdWx0ID09ICRrZXkgPyAnc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgLiAnID4nIC4gJHZhbHVlIC4gJzwvb3B0aW9uPic7DQogICAgfQ0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDnlJ/miJDnlKjmiLdzZWxlY3TooajljZUuDQogKg0KICogQHBhcmFtICRkZWZhdWx0DQogKg0KICogQHJldHVybiBudWxsfHN0cmluZw0KICovDQpmdW5jdGlvbiBPdXRwdXRPcHRpb25JdGVtc09mTWVtYmVyKCRkZWZhdWx0KQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHMgPSBudWxsOw0KICAgICR0eiA9IGFycmF5KCk7DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9PdXRwdXRPcHRpb25JdGVtc09mTWVtYmVyX0JlZ2luJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGRlZmF1bHQsICR0eik7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGlmICghJHpicC0+Q2hlY2tSaWdodHMoJ0FydGljbGVBbGwnKSkgew0KICAgICAgICBpZiAoIWlzc2V0KCR6YnAtPm1lbWJlcnNbJGRlZmF1bHRdKSkgew0KICAgICAgICAgICAgJHR6WzBdID0gJyc7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkdHpbJGRlZmF1bHRdID0gJHpicC0+bWVtYmVyc1skZGVmYXVsdF0tPk5hbWU7DQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBmb3IgKCRpID0gMTsgJGkgPCAoY291bnQoJHpicC0+bGFuZ1sndXNlcl9sZXZlbF9uYW1lJ10pICsgMSk7ICRpKyspIHsNCiAgICAgICAgICAgIGlmICgkemJwLT5DaGVja1JpZ2h0c0J5TGV2ZWwoJ0FydGljbGVFZHQnLCAkaSkgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkemJwLT5Mb2FkTWVtYmVycygkaSk7DQogICAgICAgICRtZW1iZXJieW5hbWUgPSBhcnJheSgpOw0KICAgICAgICBmb3JlYWNoICgkemJwLT5tZW1iZXJzIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoJHpicC0+Q2hlY2tSaWdodHNCeUxldmVsKCdBcnRpY2xlRWR0JywgJHpicC0+bWVtYmVyc1ska2V5XS0+TGV2ZWwpKSB7DQogICAgICAgICAgICAgICAgJG1lbWJlcmJ5bmFtZVskemJwLT5tZW1iZXJzWyRrZXldLT5OYW1lXSA9ICR6YnAtPm1lbWJlcnNbJGtleV0tPklEOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGtzb3J0KCRtZW1iZXJieW5hbWUpOw0KICAgICAgICBmb3JlYWNoICgkbWVtYmVyYnluYW1lIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAkdHpbJHZhbHVlXSA9ICRrZXk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9PdXRwdXRPcHRpb25JdGVtc09mTWVtYmVyJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGRlZmF1bHQsICR0eik7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR0eiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcyAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRrZXkgLiAnIiAnIC4gKCRkZWZhdWx0ID09ICRrZXkgPyAnc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgLiAnID4nIC4gJHZhbHVlIC4gJzwvb3B0aW9uPic7DQogICAgfQ0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDnlJ/miJDmlofnq6BJc1RvcOeKtuaAgXNlbGVjdOihqOWNlS4NCiAqDQogKiBAcGFyYW0gJGRlZmF1bHQNCiAqDQogKiBAcmV0dXJuIG51bGx8c3RyaW5nDQogKi8NCmZ1bmN0aW9uIE91dHB1dE9wdGlvbkl0ZW1zT2ZJc1RvcCgkZGVmYXVsdCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgICRzID0gbnVsbDsNCiAgICAkdHogPSBhcnJheSgpOw0KICAgICR0elswXSA9ICR6YnAtPmxhbmdbJ21zZyddWydub25lJ107DQogICAgJHR6WzJdID0gJHpicC0+bGFuZ1snbXNnJ11bJ3RvcF9pbmRleCddOw0KICAgICR0elsxXSA9ICR6YnAtPmxhbmdbJ21zZyddWyd0b3BfZ2xvYmFsJ107DQogICAgJHR6WzRdID0gJHpicC0+bGFuZ1snbXNnJ11bJ3RvcF9jYXRlZ29yeSddOw0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZklzVG9wJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGRlZmF1bHQsICR0eik7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR0eiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcyAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRrZXkgLiAnIiAnIC4gKCRkZWZhdWx0ID09ICRrZXkgPyAnc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgLiAnID4nIC4gJHZhbHVlIC4gJzwvb3B0aW9uPic7DQogICAgfQ0KDQogICAgcmV0dXJuICRzOw0KfQ0KDQovKioNCiAqIOeUn+aIkOaWh+eroOWPkeW4g+eKtuaAgXNlbGVjdOihqOWNlS4NCiAqDQogKiBAcGFyYW0gJGRlZmF1bHQNCiAqDQogKiBAcmV0dXJuIG51bGx8c3RyaW5nDQogKi8NCmZ1bmN0aW9uIE91dHB1dE9wdGlvbkl0ZW1zT2ZQb3N0U3RhdHVzKCRkZWZhdWx0KQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHMgPSAnJzsNCiAgICAkdHogPSBhcnJheSgpOw0KICAgIGlmICghJHpicC0+Q2hlY2tSaWdodHMoJ0FydGljbGVQdWInKSAmJiAkZGVmYXVsdCA9PSAyKSB7DQogICAgICAgICR0elsyXSA9ICR6YnAtPmxhbmdbJ3Bvc3Rfc3RhdHVzX25hbWUnXVsnMiddOw0KICAgIH0gZWxzZWlmICghJHpicC0+Q2hlY2tSaWdodHMoJ0FydGljbGVBbGwnKSAmJiAkZGVmYXVsdCA9PSAyKSB7DQogICAgICAgICR0elsyXSA9ICR6YnAtPmxhbmdbJ3Bvc3Rfc3RhdHVzX25hbWUnXVsnMiddOw0KICAgIH0gZWxzZSB7DQogICAgICAgICR0elswXSA9ICR6YnAtPmxhbmdbJ3Bvc3Rfc3RhdHVzX25hbWUnXVsnMCddOw0KICAgICAgICAkdHpbMV0gPSAkemJwLT5sYW5nWydwb3N0X3N0YXR1c19uYW1lJ11bJzEnXTsNCiAgICAgICAgaWYgKCR6YnAtPkNoZWNrUmlnaHRzKCdBcnRpY2xlQWxsJykpIHsNCiAgICAgICAgICAgICR0elsyXSA9ICR6YnAtPmxhbmdbJ3Bvc3Rfc3RhdHVzX25hbWUnXVsnMiddOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZlBvc3RTdGF0dXMnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkZGVmYXVsdCwgJHR6KTsNCiAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQogICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJHR6IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICRzIC49ICc8b3B0aW9uIHZhbHVlPSInIC4gJGtleSAuICciICcgLiAoJGRlZmF1bHQgPT0gJGtleSA/ICdzZWxlY3RlZD0ic2VsZWN0ZWQiJyA6ICcnKSAuICcgPicgLiAkdmFsdWUgLiAnPC9vcHRpb24+JzsNCiAgICB9DQoNCiAgICByZXR1cm4gJHM7DQp9DQoNCi8qKg0KICog5Yib5bu6RGl25qih5Z2XLg0KICoNCiAqIEBwYXJhbSAkbQ0KICogQHBhcmFtIGJvb2wgJGJ1dHRvbg0KICovDQpmdW5jdGlvbiBDcmVhdGVNb2R1bGVEaXYoJG0sICRidXR0b24gPSB0cnVlKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgZWNobyAnPGRpdiBjbGFzcz0id2lkZ2V0IHdpZGdldF9zb3VyY2VfJyAuICRtLT5Tb3VyY2VUeXBlIC4gJyB3aWRnZXRfaWRfJyAuICRtLT5GaWxlTmFtZSAuICciPic7DQogICAgZWNobyAnPGRpdiBjbGFzcz0id2lkZ2V0LXRpdGxlIj48aSBjbGFzcz0iaWNvbi1sYXlvdXQtd3RmIG1vZHVsZS1pY29uIj48L2k+JyAuICgoJG0tPlNvdXJjZVR5cGUgIT0gJ3RoZW1laW5jbHVkZScpID8gJG0tPk5hbWUgOiAkbS0+RmlsZU5hbWUpIC4gJyc7DQoNCiAgICBpZiAoJGJ1dHRvbikgew0KICAgICAgICBlY2hvICc8c3BhbiBjbGFzcz0id2lkZ2V0LWFjdGlvbiI+PGEgaHJlZj0iLi4vY21kLnBocD9hY3Q9TW9kdWxlRWR0JmFtcDtpZD0nIC4gJG0tPklEIC4gJyI+PGkgY2xhc3M9Imljb24tcGVuY2lsLXNxdWFyZSI+PC9pPjwvYT4nOw0KDQogICAgICAgIGlmICgkbS0+U291cmNlVHlwZSA9PSAndXNlcicgfHwgJG0tPlNvdXJjZVR5cGUgPT0gJ3RoZW1laW5jbHVkZScpIHsNCiAgICAgICAgICAgIGVjaG8gJyZuYnNwOzxhIG9uY2xpY2s9InJldHVybiB3aW5kb3cuY29uZmlybShcJycgLiBzdHJfcmVwbGFjZShhcnJheSgnIicsJ1wnJyksICcnLCAkemJwLT5sYW5nWydtc2cnXVsnY29uZmlybV9vcGVyYXRpbmcnXSkgLiAnXCcpOyIgaHJlZj0iJyAuIEJ1aWxkU2FmZUNtZFVSTCgnYWN0PU1vZHVsZURlbCZhbXA7aWQ9JyAuICRtLT5JRCkgLiAnIj48aSBjbGFzcz0iaWNvbi10cmFzaCI+PC9pPjwvYT4nOw0KICAgICAgICB9DQogICAgICAgIGVjaG8gJzwvc3Bhbj4nOw0KICAgIH0NCg0KICAgIGVjaG8gJzwvZGl2Pic7DQogICAgZWNobyAnPGRpdiBjbGFzcz0iZnVuaWQiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPicgLiAkbS0+RmlsZU5hbWUgLiAnPC9kaXY+JzsNCiAgICBlY2hvICc8L2Rpdj4nOw0KfQ0KDQovKioNCiAqIOeUn+aIkFRZUEVzZWxlY3TooajljZUuDQogKg0KICogQHBhcmFtICRkZWZhdWx0DQogKg0KICogQHJldHVybiBudWxsfHN0cmluZw0KICovDQpmdW5jdGlvbiBPdXRwdXRPcHRpb25JdGVtc09mUG9zdFR5cGUoJGRlZmF1bHQpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgJHMgPSBudWxsOw0KICAgICR0eiA9IGFycmF5KCk7DQoNCiAgICBmb3JlYWNoICgkemJwLT5wb3N0dHlwZSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkdHpbJGtleV0gPSAkdmFsdWVbMF07DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZkNvbW1vbiddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRkZWZhdWx0LCAkdHosICdQb3N0VHlwZScpOw0KICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCiAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkdHogYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgJHMgLj0gJzxvcHRpb24gdmFsdWU9IicgLiAka2V5IC4gJyIgJyAuICgkZGVmYXVsdCA9PSAka2V5ID8gJ3NlbGVjdGVkPSJzZWxlY3RlZCInIDogJycpIC4gJyA+JyAuICR2YWx1ZSAuICc8L29wdGlvbj4nOw0KICAgIH0NCiAgICByZXR1cm4gJHM7DQp9DQoNCi8qKg0KICog55Sf5oiQ5pe25Yy6c2VsZWN06KGo5Y2VLg0KICoNCiAqIEBwYXJhbSAkZGVmYXVsdA0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIENyZWF0ZU9wdGlvbnNPZlRpbWVab25lKCRkZWZhdWx0KQ0Kew0KICAgICRzID0gJyc7DQogICAgJHR6ID0gYXJyYXkoDQogICAgICAgICdFdGMvR01UKzEyJyAgICAgICAgICAgICAgICAgICAgID0+ICctMTI6MDAnLA0KICAgICAgICAnUGFjaWZpYy9NaWR3YXknICAgICAgICAgICAgICAgICA9PiAnLTExOjAwJywNCiAgICAgICAgJ1BhY2lmaWMvSG9ub2x1bHUnICAgICAgICAgICAgICAgPT4gJy0xMDowMCcsDQogICAgICAgICdBbWVyaWNhL0FuY2hvcmFnZScgICAgICAgICAgICAgID0+ICctMDk6MDAnLA0KICAgICAgICAnQW1lcmljYS9Mb3NfQW5nZWxlcycgICAgICAgICAgICA9PiAnLTA4OjAwJywNCiAgICAgICAgJ0FtZXJpY2EvRGVudmVyJyAgICAgICAgICAgICAgICAgPT4gJy0wNzowMCcsDQogICAgICAgICdBbWVyaWNhL1RlZ3VjaWdhbHBhJyAgICAgICAgICAgID0+ICctMDY6MDAnLA0KICAgICAgICAnQW1lcmljYS9OZXdfWW9yaycgICAgICAgICAgICAgICA9PiAnLTA1OjAwJywNCiAgICAgICAgJ0FtZXJpY2EvSGFsaWZheCcgICAgICAgICAgICAgICAgPT4gJy0wNDowMCcsDQogICAgICAgICdBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXMnID0+ICctMDM6MDAnLA0KICAgICAgICAnQXRsYW50aWMvU291dGhfR2VvcmdpYScgICAgICAgICA9PiAnLTAyOjAwJywNCiAgICAgICAgJ0F0bGFudGljL0F6b3JlcycgICAgICAgICAgICAgICAgPT4gJy0wMTowMCcsDQogICAgICAgICdVVEMnICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICcwMDowMCcsDQogICAgICAgICdFdXJvcGUvQmVybGluJyAgICAgICAgICAgICAgICAgID0+ICcrMDE6MDAnLA0KICAgICAgICAnRXVyb3BlL1NvZmlhJyAgICAgICAgICAgICAgICAgICA9PiAnKzAyOjAwJywNCiAgICAgICAgJ0FmcmljYS9OYWlyb2JpJyAgICAgICAgICAgICAgICAgPT4gJyswMzowMCcsDQogICAgICAgICdFdXJvcGUvTW9zY293JyAgICAgICAgICAgICAgICAgID0+ICcrMDQ6MDAnLA0KICAgICAgICAnQXNpYS9LYXJhY2hpJyAgICAgICAgICAgICAgICAgICA9PiAnKzA1OjAwJywNCiAgICAgICAgJ0FzaWEvRGhha2EnICAgICAgICAgICAgICAgICAgICAgPT4gJyswNjowMCcsDQogICAgICAgICdBc2lhL0Jhbmdrb2snICAgICAgICAgICAgICAgICAgID0+ICcrMDc6MDAnLA0KICAgICAgICAnQXNpYS9TaGFuZ2hhaScgICAgICAgICAgICAgICAgICA9PiAnKzA4OjAwJywNCiAgICAgICAgJ0FzaWEvVG9reW8nICAgICAgICAgICAgICAgICAgICAgPT4gJyswOTowMCcsDQogICAgICAgICdQYWNpZmljL0d1YW0nICAgICAgICAgICAgICAgICAgID0+ICcrMTA6MDAnLA0KICAgICAgICAnQXVzdHJhbGlhL1N5ZG5leScgICAgICAgICAgICAgICA9PiAnKzExOjAwJywNCiAgICAgICAgJ1BhY2lmaWMvRmlqaScgICAgICAgICAgICAgICAgICAgPT4gJysxMjowMCcsDQogICAgICAgICdQYWNpZmljL1RvbmdhdGFwdScgICAgICAgICAgICAgID0+ICcrMTM6MDAnLA0KICAgICk7DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9PdXRwdXRPcHRpb25JdGVtc09mQ29tbW9uJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGRlZmF1bHQsICR0eiwgJ1RpbWVab25lJyk7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR0eiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcyAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRrZXkgLiAnIiAnIC4gKCRkZWZhdWx0ID09ICRrZXkgPyAnc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgLiAnID4nIC4gJGtleSAuICcgJyAuICR2YWx1ZSAuICc8L29wdGlvbj4nOw0KICAgIH0NCg0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDnlJ/miJDor63oqIBzZWxlY3TooajljZUuDQogKg0KICogQHBhcmFtICRkZWZhdWx0DQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gQ3JlYXRlT3B0aW9uc09mTGFuZygkZGVmYXVsdCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICAkcyA9ICcnOw0KICAgICRkaXIgPSAkemJwLT51c2Vyc2RpciAuICdsYW5ndWFnZS8nOw0KICAgICRmaWxlcyA9IEdldEZpbGVzSW5EaXIoJGRpciwgJ3BocCcpOw0KICAgICR0eiA9IGFycmF5KCk7DQogICAgZm9yZWFjaCAoJGZpbGVzIGFzICRmKSB7DQogICAgICAgIGlmIChzdWJzdHIoJGYsIDAsIDEpICE9PSAnLicgJiYgc3Vic3RyKCRmLCAwLCAxKSAhPT0gJ18nKSB7DQogICAgICAgICAgICAkbiA9IGJhc2VuYW1lKCRmLCAnLnBocCcpOw0KICAgICAgICAgICAgLy9maXggMS4zIHRvIDEuNCB3YXJuaW5nDQogICAgICAgICAgICBpZiAoJ1NpbXBDaGluZXNlJyA9PSAkbikgew0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoJ1RyYWRDaGluZXNlJyA9PSAkbikgew0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkdCA9IGluY2x1ZGUgJGY7DQogICAgICAgICAgICAkdHpbJG5dID0gJHRbJ2xhbmdfbmFtZSddIC4gJyAoJyAuICRuIC4gJyknOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZkNvbW1vbiddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRkZWZhdWx0LCAkdHosICdMYW5nJyk7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR0eiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcyAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRrZXkgLiAnIiAnIC4gKCRkZWZhdWx0ID09ICRrZXkgPyAnc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgLiAnID4nIC4gJGtleSAuICcgJyAuICR2YWx1ZSAuICc8L29wdGlvbj4nOw0KICAgIH0NCiAgICByZXR1cm4gJHM7DQp9DQoNCi8qKg0KICog55Sf5oiQR3Vlc3RUeXBl6KGo5Y2VLg0KICoNCiAqIEBwYXJhbSAkZGVmYXVsdA0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIENyZWF0ZU9wdGlvbnNPZkd1ZXN0SVBUeXBlKCRkZWZhdWx0KQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRzID0gJyc7DQogICAgJHR6ID0gYXJyYXkoDQogICAgICAgICdSRU1PVEVfQUREUicgICAgICAgICAgICAgICAgICAgID0+ICdSRU1PVEVfQUREUiAoJyAuICR6YnAtPmxhbmdbJ21zZyddWydkZWZhdWx0J10gLiAnKSAnIC4gR2V0VmFycygnUkVNT1RFX0FERFInLCAnU0VSVkVSJyksDQogICAgICAgICdIVFRQX1hfRk9SV0FSREVEX0ZPUicgICAgICAgICAgID0+ICdIVFRQX1hfRk9SV0FSREVEX0ZPUiAo6IW+6K6v5LqRLOmYv+mHjOS6kSzkuIPniZspICcgLiBHZXRWYXJzKCdIVFRQX1hfRk9SV0FSREVEX0ZPUicsICdTRVJWRVInKSwNCiAgICAgICAgJ0hUVFBfWF9SRUFMX0lQJyAgICAgICAgICAgICAgICAgPT4gJ0hUVFBfWF9SRUFMX0lQICjlj4jmi43kupEs55m+5bqmQ0ROKScgLiBHZXRWYXJzKCdIVFRQX1hfUkVBTF9JUCcsICdTRVJWRVInKSwNCiAgICAgICAgJ0hUVFBfQ0ZfQ09OTkVDVElOR19JUCcgICAgICAgICAgPT4gJ0hUVFBfQ0ZfQ09OTkVDVElOR19JUCAoQ2xvdWRGbGFyZSkgJyAuIEdldFZhcnMoJ0hUVFBfQ0ZfQ09OTkVDVElOR19JUCcsICdTRVJWRVInKSwNCiAgICAgICAgJ0hUVFBfQ0xJRU5UX0lQJyAgICAgICAgICAgICAgICAgPT4gJ0hUVFBfQ0xJRU5UX0lQICcgLiBHZXRWYXJzKCdIVFRQX0NMSUVOVF9JUCcsICdTRVJWRVInKSwNCiAgICApOw0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fT3V0cHV0T3B0aW9uSXRlbXNPZkNvbW1vbiddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRkZWZhdWx0LCAkdHosICdHdWVzdElQVHlwZScpOw0KICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCiAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkdHogYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgJHMgLj0gJzxvcHRpb24gdmFsdWU9IicgLiAka2V5IC4gJyIgJyAuICgkZGVmYXVsdCA9PSAka2V5ID8gJ3NlbGVjdGVkPSJzZWxlY3RlZCInIDogJycpIC4gJyA+JyAuICR2YWx1ZSAuICc8L29wdGlvbj4nOw0KICAgIH0NCiAgICByZXR1cm4gJHM7DQp9DQoNCi8qKg0KICog55Sf5oiQ5o6S5bqP5oyJ6ZKuDQogKi8NCmZ1bmN0aW9uIE1ha2VPcmRlckJ1dHRvbigkaWQsICR1cmxydWxlLCAkb3JkZXJfZ2V0LCAkZGVmYXVsdCA9ICdhc2MnKQ0Kew0KICAgICRidXR0b25fb3JkZXJfaWRfY2xhc3MgPSAnJzsNCiAgICBpZiAoJG9yZGVyX2dldCA9PSAkaWQgLiAnX2FzYycgfHwgJG9yZGVyX2dldCA9PSAkaWQgLiAnX2Rlc2MnKSB7DQogICAgICAgICRidXR0b25fb3JkZXJfaWRfY2xhc3MgPSAnZWxlbWVudC12aXNpYmlsaXR5LXZpc2libGUtYWx3YXlzICc7DQogICAgfQ0KICAgIGlmICgkb3JkZXJfZ2V0ID09ICRpZCAuICdfYXNjJykgew0KICAgICAgICAkYnV0dG9uX29yZGVyX2lkX29yZGVyID0gJGlkIC4gJ19kZXNjJzsNCiAgICAgICAgJGJ1dHRvbl9vcmRlcl9pZF9pY29uID0gJ2ljb24tYXJyb3ctdXAtc2hvcnQnOw0KICAgICAgICAkYnV0dG9uX29yZGVyX2lkX2NsYXNzIC49ICdlbGVtZW50LXZpc2liaWxpdHktaGlkZGVuICc7DQogICAgfSBlbHNlaWYgKCRvcmRlcl9nZXQgPT0gJGlkIC4gJ19kZXNjJykgew0KICAgICAgICAkYnV0dG9uX29yZGVyX2lkX29yZGVyID0gJGlkIC4gJ19hc2MnOw0KICAgICAgICAkYnV0dG9uX29yZGVyX2lkX2ljb24gPSAnaWNvbi1hcnJvdy1kb3duLXNob3J0JzsNCiAgICAgICAgJGJ1dHRvbl9vcmRlcl9pZF9jbGFzcyAuPSAnZWxlbWVudC12aXNpYmlsaXR5LWhpZGRlbiAnOw0KICAgIH0gZWxzZSB7DQogICAgICAgIGlmICgkZGVmYXVsdCA9PSAnYXNjJykgew0KICAgICAgICAgICAgJGJ1dHRvbl9vcmRlcl9pZF9vcmRlciA9ICRpZCAuICdfYXNjJzsNCiAgICAgICAgICAgICRidXR0b25fb3JkZXJfaWRfaWNvbiA9ICdpY29uLWFycm93LWRvd24tc2hvcnQnOw0KICAgICAgICAgICAgJGJ1dHRvbl9vcmRlcl9pZF9jbGFzcyAuPSAnZWxlbWVudC12aXNpYmlsaXR5LWhpZGRlbiAnOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJGJ1dHRvbl9vcmRlcl9pZF9vcmRlciA9ICRpZCAuICdfZGVzYyc7DQogICAgICAgICAgICAkYnV0dG9uX29yZGVyX2lkX2ljb24gPSAnaWNvbi1hcnJvdy11cC1zaG9ydCc7DQogICAgICAgICAgICAkYnV0dG9uX29yZGVyX2lkX2NsYXNzIC49ICdlbGVtZW50LXZpc2liaWxpdHktaGlkZGVuICc7DQogICAgICAgIH0NCiAgICB9DQogICAgJHVybHJ1bGUtPlJ1bGVzWyd7JW9yZGVyJX0nXSA9ICRidXR0b25fb3JkZXJfaWRfb3JkZXI7DQogICAgJGJ1dHRvbl9vcmRlcl9pZCA9ICcgPGEgY2xhc3M9Im9yZGVyX2J1dHRvbiAnIC4gJGJ1dHRvbl9vcmRlcl9pZF9jbGFzcyAuICciIGhyZWY9IicgLiAkdXJscnVsZS0+TWFrZSgpIC4gJyI+PGkgc3R5bGU9ImZvbnQtc2l6ZTowLjc1ZW07IiBjbGFzcz0iJyAuICRidXR0b25fb3JkZXJfaWRfaWNvbiAuICciPjwvaT48L2E+JzsNCg0KICAgIHJldHVybiBhcnJheSgkYnV0dG9uX29yZGVyX2lkKTsNCn0NCg==</file>
	<file name='zb_system\function\c_system_function.php' crc32='3A18A67F'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_route.php' crc32='75A5818B'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_version.php' crc32='29CE7A44'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNycpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzAnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMjkyNScpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ1RlbmV0Jyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT04nLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQgLiAnLicgLiBaQ19WRVJTSU9OX0NPTU1JVCk7DQppZiAoc3RyY2FzZWNtcChaQ19WRVJTSU9OX0NPREVOQU1FLCAnQmV0YScpID09IDAgfHwgc3RyY2FzZWNtcChaQ19WRVJTSU9OX0NPREVOQU1FLCAnQWxwaGEnKSA9PSAwKSB7DQogICAgZGVmaW5lKCdaQ19WRVJTSU9OX0RJU1BMQVknLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQgLiAnICcgLiBaQ19WRVJTSU9OX0NPREVOQU1FKTsNCn0gZWxzZSB7DQogICAgZGVmaW5lKCdaQ19WRVJTSU9OX0RJU1BMQVknLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQpOw0KfQ0KZGVmaW5lKCdaQ19WRVJTSU9OX0ZVTEwnLCBaQ19WRVJTSU9OIC4gJyAoJyAuIFpDX1ZFUlNJT05fQ09ERU5BTUUgLiAnKScpOw0KZGVmaW5lKCdaQ19CTE9HX0NPTU1JVCcsIFpDX1ZFUlNJT05fQ09NTUlUKTsgLy8g5Li65YaZ5YWl57O757uf6YWN572u57uf5LiA6aOO5qC8DQokR0xPQkFMU1snYmxvZ3ZlcnNpb24nXSA9IFpDX1ZFUlNJT05fTUFKT1IgLiBaQ19WRVJTSU9OX01JTk9SIC4gWkNfVkVSU0lPTl9DT01NSVQ7DQpkZWZpbmUoJ1pDX0JMT0dfVkVSU0lPTicsIFpDX1ZFUlNJT05fRElTUExBWSAuICcgQnVpbGQgJyAuICRHTE9CQUxTWydibG9ndmVyc2lvbiddKTsNCmRlZmluZSgnWkNfTEFTVF9WRVJTSU9OJywgJzE3MjgwMCcpOyAvL+aVsOaNruW6k+mHjOWGmeWFpeeahOacgOaWsOeahOaVsOaNruW6k+eJiOacrOWPt++8iOmdnuezu+e7n+eJiOacrOWPt++8jOWPquacieabtOaUueaVsOaNruW6k+e7k+aehOaJjeS8muWPmOWKqO+8iQ0K</file>
	<file name='zb_system\function\lib\config.php' crc32='74B8E7BD'  dt:dt='bin.base64'></file>
</files>