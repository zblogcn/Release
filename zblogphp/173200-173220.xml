<files codepage='65001'>
	<file name='zb_system\api.php' crc32='AE076A8C'>PD9waHANCg0KLyoqDQogKiBaLUJsb2cgd2l0aCBQSFAuDQogKg0KICogQGF1dGhvciAgWi1CbG9nUEhQIFRlYW0NCiAqIEB2ZXJzaW9uIDEuMCAyMDIwLTA3LTAxDQogKi8NCg0KLy8g5qCH6K6w5Li6IEFQSSDov5DooYzmqKHlvI8NCmRlZmluZSgnWkJQX0lOX0FQSScsIHRydWUpOw0KDQpyZXF1aXJlICdmdW5jdGlvbi9jX3N5c3RlbV9iYXNlLnBocCc7DQoNCiR6YnAtPkxvYWQoKTsNCg0KQXBpQ2hlY2tFbmFibGUoKTsNCg0KSG9va0ZpbHRlclBsdWdpbignRmlsdGVyX1BsdWdpbl9BUElfQmVnaW4nKTsNCg0KQXBpQ2hlY2tBdXRoKGZhbHNlLCAnYXBpJyk7DQoNCkFwaUNoZWNrTGltaXQoKTsNCg0KJG1vZHMgPSAmJEdMT0JBTFNbJ2FwaV9wdWJsaWNfbW9kcyddOw0KJG1vZHNfYWxsb3cgPSAmJEdMT0JBTFNbJ2FwaV9hbGxvd19tb2RzX3J1bGUnXTsgLy/moLzlvI/kuLogYXJyYXkoIGFycmF5KCfmqKHlnZflkI0nPT4n5pa55rOV5ZCNJykgKQ0KJG1vZHNfZGlzYWxsb3cgPSAmJEdMT0JBTFNbJ2FwaV9kaXNhbGxvd19tb2RzX3J1bGUnXTsgLy/lpoLmnpzmmK8gYXJyYXkoIGFycmF5KCfmqKHlnZflkI0nPT4nJykgKeaWueazleWQjeS4uuepuuWwhuWMuemFjeaVtOS4quaooeWdlw0KJG1vZCA9IHN0cnRvbG93ZXIoR2V0VmFycygnbW9kJywgJ0dFVCcpKTsNCiRhY3QgPSBzdHJ0b2xvd2VyKEdldFZhcnMoJ2FjdCcsICdHRVQnKSk7DQoNCi8vIOi9veWFpeezu+e7n+WSjOW6lOeUqOeahCBtb2QNCkFwaUxvYWRNb2RzKCk7DQoNCi8v6L+b6KGMQXBp55m95ZCN5Y2V5ZKM6buR5ZCN5Y2V55qE6K6+572u5bm25qOA5p+lJG1vZOWSjCRhY3QNCkFwaUNoZWNrTW9kcygpOw0KDQpBcGlMb2FkUG9zdERhdGEoKTsNCg0KQXBpVmVyaWZ5Q1NSRigpOw0KDQovLyDmtL7lj5EgQVBJDQpBcGlEaXNwYXRjaCgkbW9kcywgJG1vZCwgJGFjdCk7DQo=</file>
	<file name='zb_system\function\c_system_api.php' crc32='515169F'></file>
	<file name='zb_system\function\c_system_base.php' crc32='CE200BB4'></file>
	<file name='zb_system\function\c_system_plugin.php' crc32='AE97F4C7'></file>
	<file name='zb_system\function\c_system_version.php' crc32='6DD99E67'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKg0KICog5a6a5LmJ54mI5pys5Y+3DQoNCui/meaYrzEuNeWPlua2iOeahOaVsOe7hO+8jOiiq+WuieaOkuWIsOW6lOeUqOS4reW/g+WuouaIt+err+eahGluY2x1ZGUucGhw5paH5Lu26YeM44CCDQoj5a6a5LmJ54mI5pys5Y+35YiXDQokemJwdmVycz1hcnJheSgpOw0KJHpicHZlcnNbJzEzMDcwNyddPScxLjAgQmV0YSBCdWlsZCAxMzA3MDcnOw0KJHpicHZlcnNbJzEzMTExMSddPScxLjAgQmV0YTIgQnVpbGQgMTMxMTExJzsNCiR6YnB2ZXJzWycxMzEyMjEnXT0nMS4xIFRhaWNoaSBCdWlsZCAxMzEyMjEnOw0KJHpicHZlcnNbJzE0MDIyMCddPScxLjIgSGlwcG8gQnVpbGQgMTQwMjIwJzsNCiR6YnB2ZXJzWycxNDA2MTQnXT0nMS4zIFdvbmNlIEJ1aWxkIDE0MDYxNCc7DQokemJwdmVyc1snMTUwMTAxJ109JzEuNCBEZWVwbHVlIEJ1aWxkIDE1MDEwMSc7DQokemJwdmVyc1snMTUxNjI2J109JzEuNSBaZXJvIEJ1aWxkIDE1MTYyNic7DQoNCiAqLw0KZGVmaW5lKCdaQ19WRVJTSU9OX01BSk9SJywgJzEnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9NSU5PUicsICc3Jyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fQlVJTEQnLCAnMycpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPTU1JVCcsICczMjIwJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fQ09ERU5BTUUnLCAnQmV0YScpOy8vRmluY2gNCmRlZmluZSgnWkNfVkVSU0lPTicsIFpDX1ZFUlNJT05fTUFKT1IgLiAnLicgLiBaQ19WRVJTSU9OX01JTk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9CVUlMRCAuICcuJyAuIFpDX1ZFUlNJT05fQ09NTUlUKTsNCmlmIChzdHJjYXNlY21wKFpDX1ZFUlNJT05fQ09ERU5BTUUsICdCZXRhJykgPT0gMCB8fCBzdHJjYXNlY21wKFpDX1ZFUlNJT05fQ09ERU5BTUUsICdBbHBoYScpID09IDApIHsNCiAgICBkZWZpbmUoJ1pDX1ZFUlNJT05fRElTUExBWScsIFpDX1ZFUlNJT05fTUFKT1IgLiAnLicgLiBaQ19WRVJTSU9OX01JTk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9CVUlMRCAuICcuJyAuIFpDX1ZFUlNJT05fQ09NTUlUIC4gJyAnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSk7DQp9IGVsc2Ugew0KICAgIGRlZmluZSgnWkNfVkVSU0lPTl9ESVNQTEFZJywgWkNfVkVSU0lPTl9NQUpPUiAuICcuJyAuIFpDX1ZFUlNJT05fTUlOT1IgLiAnLicgLiBaQ19WRVJTSU9OX0JVSUxEKTsNCn0NCmRlZmluZSgnWkNfVkVSU0lPTl9GVUxMJywgWkNfVkVSU0lPTiAuICcgKCcgLiBaQ19WRVJTSU9OX0NPREVOQU1FIC4gJyknKTsNCmRlZmluZSgnWkNfQkxPR19DT01NSVQnLCBaQ19WRVJTSU9OX0NPTU1JVCk7IC8vIOS4uuWGmeWFpeezu+e7n+mFjee9rue7n+S4gOmjjuagvA0KJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10gPSBaQ19WRVJTSU9OX01BSk9SIC4gWkNfVkVSU0lPTl9NSU5PUiAuIFpDX1ZFUlNJT05fQ09NTUlUOw0KZGVmaW5lKCdaQ19OT1dfVkVSU0lPTicsICRHTE9CQUxTWydibG9ndmVyc2lvbiddKTsNCmRlZmluZSgnWkNfQkxPR19WRVJTSU9OJywgWkNfVkVSU0lPTl9ESVNQTEFZIC4gJyBCdWlsZCAnIC4gJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0KZGVmaW5lKCdaQ19MQVNUX1ZFUlNJT04nLCAnMTczMDAwJyk7IC8v5pWw5o2u5bqT6YeM5YaZ5YWl55qE5pyA5paw55qE5pWw5o2u5bqT54mI5pys5Y+377yI6Z2e57O757uf54mI5pys5Y+377yM5Y+q5pyJ5pu05pS55pWw5o2u5bqT57uT5p6E5omN5Lya5Y+Y5Yqo77yJDQo=</file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='AA7BD7C2'></file>
	<file name='zb_system\function\lib\base\category.php' crc32='B53A0A1B'></file>
	<file name='zb_system\function\lib\base\member.php' crc32='379F7654'></file>
	<file name='zb_system\function\lib\base\post.php' crc32='585233AA'></file>
	<file name='zb_system\function\lib\base\tag.php' crc32='DC20119B'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFRhZ+exuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIFRlbXBsYXRlDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgSUQNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgQWxpYXMNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgVXJsDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBDb3VudCDmlofnq6DmlbDph48NCiAqLw0KYWJzdHJhY3QgY2xhc3MgQmFzZV9fVGFnIGV4dGVuZHMgQmFzZQ0Kew0KDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCR6YnAtPnRhYmxlWydUYWcnXSwgJHpicC0+ZGF0YWluZm9bJ1RhZyddLCBfX0NMQVNTX18pOw0KDQogICAgICAgICR0aGlzLT5DcmVhdGVUaW1lID0gdGltZSgpOw0KICAgICAgICAkdGhpcy0+VXBkYXRlVGltZSA9ICR0aGlzLT5DcmVhdGVUaW1lOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbWV0aG9kDQogICAgICogQHBhcmFtICRhcmdzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY2FsbCgkbWV0aG9kLCAkYXJncykNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19DYWxsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbWV0aG9kLCAkYXJncyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHBhcmFtICR2YWx1ZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmIChpbl9hcnJheSgkbmFtZSwgYXJyYXkoJ1VybCcsICdBbGlhc0ZpcnN0JykpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdUZW1wbGF0ZScpIHsNCiAgICAgICAgICAgIGlmICgkdmFsdWUgPT0gJHpicC0+b3B0aW9uWydaQ19JTkRFWF9ERUZBVUxUX1RFTVBMQVRFJ10pIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSAnJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5kYXRhWyRuYW1lXSA9ICR2YWx1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19TZXQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMsICRuYW1lLCAkdmFsdWUpOw0KICAgICAgICB9DQogICAgICAgIHBhcmVudDo6X19zZXQoJG5hbWUsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkfHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2dldCgkbmFtZSkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1VybCcpIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19VcmwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGJhY2tBdHRyID0gJHpicC0+b3B0aW9uWydaQ19BTElBU19CQUNLX0FUVFInXTsNCiAgICAgICAgICAgICRyb3V0ZXMgPSAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ3JvdXRlcycpOw0KICAgICAgICAgICAgJHJvdXRlbmFtZSA9ICdwb3N0XycgLiAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ25hbWUnKSAuICdfbGlzdF90YWcnOw0KICAgICAgICAgICAgaWYgKGlzc2V0KCRyb3V0ZXNbJHJvdXRlbmFtZV0pICYmICFpc19udWxsKCR6YnAtPkdldFJvdXRlKCRyb3V0ZXNbJHJvdXRlbmFtZV0pKSkgew0KICAgICAgICAgICAgICAgICR1ID0gbmV3IFVybFJ1bGUoJHpicC0+R2V0Um91dGUoJHJvdXRlc1skcm91dGVuYW1lXSkpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkdSA9IG5ldyBVcmxSdWxlKCR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAnbGlzdF90YWdfdXJscnVsZScpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR1LT5SdWxlc09iamVjdCA9ICYkdGhpczsNCiAgICAgICAgICAgICR1LT5SdWxlc1sneyVpZCV9J10gPSAkdGhpcy0+SUQ7DQogICAgICAgICAgICAkdS0+UnVsZXNbJ3slYWxpYXMlfSddID0gcmF3dXJsZW5jb2RlX3dpdGhvdXRfYmFja3NsYXNoKCR0aGlzLT5BbGlhcyA9PSAnJyA/ICR0aGlzLT4kYmFja0F0dHIgOiAkdGhpcy0+QWxpYXMpOw0KDQogICAgICAgICAgICByZXR1cm4gJHUtPk1ha2UoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1RlbXBsYXRlJykgew0KICAgICAgICAgICAgJHZhbHVlID0gJHRoaXMtPmRhdGFbJG5hbWVdOw0KICAgICAgICAgICAgaWYgKCR2YWx1ZSA9PSAnJykgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAndGFnX3RlbXBsYXRlJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAkdmFsdWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdBbGlhc0ZpcnN0Jykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5BbGlhcykgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+QWxpYXM7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+TmFtZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9UYWdfR2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbmFtZSk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6X19nZXQoJG5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTYXZlKCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJHRoaXMtPlRlbXBsYXRlID09ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAndGFnX3RlbXBsYXRlJykpIHsNCiAgICAgICAgICAgICR0aGlzLT5kYXRhWydUZW1wbGF0ZSddID0gJyc7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9UYWdfU2F2ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWwoKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fVGFnX0RlbCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6RGVsKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIHN0cmluZyAkcw0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbHxzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVGltZSgkcyA9ICdZLW0tZCcsICR0eXBlID0gJ1Bvc3RUaW1lJykNCiAgICB7DQogICAgICAgIGlmICgkcyA9PT0gJ1Bvc3QnKSB7DQogICAgICAgICAgICAkcyA9ICdQb3N0VGltZSc7DQogICAgICAgIH0gZWxzZWlmICgkcyA9PT0gJ0NyZWF0ZScpIHsNCiAgICAgICAgICAgICRzID0gJ0NyZWF0ZVRpbWUnOw0KICAgICAgICB9IGVsc2VpZiAoJHMgPT09ICdVcGRhdGUnKSB7DQogICAgICAgICAgICAkcyA9ICdVcGRhdGVUaW1lJzsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZnVuY19udW1fYXJncygpID09IDIpIHsNCiAgICAgICAgICAgIGlmICgkdHlwZSA9PT0gJ1Bvc3QnKSB7DQogICAgICAgICAgICAgICAgJHR5cGUgPSAnUG9zdFRpbWUnOw0KICAgICAgICAgICAgfSBlbHNlaWYgKCR0eXBlID09PSAnQ3JlYXRlJykgew0KICAgICAgICAgICAgICAgICR0eXBlID0gJ0NyZWF0ZVRpbWUnOw0KICAgICAgICAgICAgfSBlbHNlaWYgKCR0eXBlID09PSAnVXBkYXRlJykgew0KICAgICAgICAgICAgICAgICR0eXBlID0gJ1VwZGF0ZVRpbWUnOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChmdW5jX251bV9hcmdzKCkgPT0gMiAmJiAhYXJyYXlfa2V5X2V4aXN0cygkdHlwZSwgJHRoaXMtPmRhdGEpICYmIGFycmF5X2tleV9leGlzdHMoJHMsICR0aGlzLT5kYXRhKSkgew0KICAgICAgICAgICAgbGlzdCgkdHlwZSwgJHMpID0gYXJyYXkoJHMsICR0eXBlKTsNCiAgICAgICAgfSBlbHNlaWYgKGZ1bmNfbnVtX2FyZ3MoKSA9PSAxICYmIGFycmF5X2tleV9leGlzdHMoJHMsICR0aGlzLT5kYXRhKSl7DQogICAgICAgICAgICBsaXN0KCR0eXBlLCAkcykgPSBhcnJheSgkcywgJ1ktbS1kJyk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoJHR5cGUsICR0aGlzLT5kYXRhKSkgew0KICAgICAgICAgICAgcmV0dXJuIGRhdGUoJHMsIChpbnQpICR0aGlzLT4kdHlwZSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZGF0ZSgkcywgKGludCkgJHRoaXMtPlBvc3RUaW1lKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\database\mysql.php' crc32='D90D3E97'></file>
	<file name='zb_system\function\lib\database\mysqli.php' crc32='BCDC7175'></file>
	<file name='zb_system\function\lib\database\pdo_mysql.php' crc32='12ED7E33'></file>
	<file name='zb_system\function\lib\database\pdo_postgresql.php' crc32='60A0FE4F'></file>
	<file name='zb_system\function\lib\database\pdo_sqlite.php' crc32='AE8E75B5'></file>
	<file name='zb_system\function\lib\database\postgresql.php' crc32='D2079352'></file>
	<file name='zb_system\function\lib\database\sqlite.php' crc32='1ACED0A8'></file>
	<file name='zb_system\function\lib\database\sqlite3.php' crc32='B3DFB787'></file>
</files>
