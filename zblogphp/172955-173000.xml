<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\api.php' crc32='F1335236'  dt:dt='bin.base64'>PD9waHANCg0KLyoqDQogKiBaLUJsb2cgd2l0aCBQSFAuDQogKg0KICogQGF1dGhvciAgWi1CbG9nUEhQIFRlYW0NCiAqIEB2ZXJzaW9uIDEuMCAyMDIwLTA3LTAxDQogKi8NCg0KLy8g5qCH6K6w5Li6IEFQSSDov5DooYzmqKHlvI8NCmRlZmluZSgnWkJQX0lOX0FQSScsIHRydWUpOw0KDQpyZXF1aXJlICdmdW5jdGlvbi9jX3N5c3RlbV9iYXNlLnBocCc7DQoNCiR6YnAtPkxvYWQoKTsNCg0KQXBpQ2hlY2tFbmFibGUoKTsNCg0KZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQVBJX0JlZ2luJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgJGZwbmFtZSgpOw0KfQ0KDQpBcGlDaGVja0F1dGgoZmFsc2UsICdhcGknKTsNCg0KQXBpQ2hlY2tMaW1pdCgpOw0KDQokbW9kcyA9IGFycmF5KCk7DQokbW9kc19hbGxvdyA9IGFycmF5KCk7IC8v5qC85byP5Li6IGFycmF5KCBhcnJheSgn5qih5Z2X5ZCNJz0+J+aWueazleWQjScpICkNCiRtb2RzX2Rpc2FsbG93ID0gYXJyYXkoKTsgLy/lpoLmnpzmmK8gYXJyYXkoIGFycmF5KCfmqKHlnZflkI0nPT4nJykgKeaWueazleWQjeS4uuepuuWwhuWMuemFjeaVtOS4quaooeWdlw0KJG1vZCA9IHN0cnRvbG93ZXIoR2V0VmFycygnbW9kJywgJ0dFVCcpKTsNCiRhY3QgPSBzdHJ0b2xvd2VyKEdldFZhcnMoJ2FjdCcsICdHRVQnKSk7DQoNCi8vIOi9veWFpeezu+e7n+WSjOW6lOeUqOeahCBtb2QNCkFwaUxvYWRNb2RzKCRtb2RzKTsNCg0KLy/ov5vooYxBcGnnmb3lkI3ljZXlkozpu5HlkI3ljZXnmoTmo4Dmn6UNCkFwaUNoZWNrTW9kcygkbW9kc19hbGxvdywgJG1vZHNfZGlzYWxsb3cpOw0KDQpBcGlMb2FkUG9zdERhdGEoKTsNCg0KQXBpVmVyaWZ5Q1NSRigpOw0KDQovLyDmtL7lj5EgQVBJDQpBcGlEaXNwYXRjaCgkbW9kcywgJG1vZCwgJGFjdCk7DQo=</file>
	<file name='zb_system\cmd.php' crc32='6BF7EA27'  dt:dt='bin.base64'>PD9waHANCg0KLyoqDQogKiBaLUJsb2cgd2l0aCBQSFAuDQogKg0KICogQGF1dGhvciBaLUJsb2dQSFAgVGVhbQ0KICovDQoNCi8vIOagh+iusOS4uiBDTUQg6L+Q6KGM5qih5byPDQpkZWZpbmUoJ1pCUF9JTl9DTUQnLCB0cnVlKTsNCg0KaWYgKChpc3NldCgkX1JFUVVFU1RbJ2FjdCddKSAmJiAkX1JFUVVFU1RbJ2FjdCddID09ICdhamF4JykgfHwgKGlzc2V0KCRfU0VSVkVSWydIVFRQX1hfUkVRVUVTVEVEX1dJVEgnXSkgJiYgc3RyY2FzZWNtcCgkX1NFUlZFUlsnSFRUUF9YX1JFUVVFU1RFRF9XSVRIJ10sICdYTUxIdHRwUmVxdWVzdCcpID09IDApKSB7DQogICAgZGVmaW5lKCdaQlBfSU5fQUpBWCcsIHRydWUpOw0KfQ0KDQpyZXF1aXJlICdmdW5jdGlvbi9jX3N5c3RlbV9iYXNlLnBocCc7DQoNCiRhY3Rpb24gPSBHZXRWYXJzKCdhY3QnLCAnR0VUJyk7DQoNCiR6YnAtPkxvYWQoKTsNCg0KaWYgKCEkemJwLT5DaGVja1JpZ2h0cygkemJwLT5hY3Rpb24pKSB7DQogICAgJHpicC0+U2hvd0Vycm9yKDYsIF9fRklMRV9fLCBfX0xJTkVfXyk7DQogICAgZGllKCk7DQp9DQoNCmZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0NtZF9CZWdpbiddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICRmcG5hbWUoKTsNCn0NCg0Kc3dpdGNoICgkemJwLT5hY3Rpb24pIHsNCiAgICBjYXNlICdsb2dpbic6DQogICAgICAgIFJlZGlyZWN0X2NtZF9mcm9tX2FyZ3Nfd2l0aF9sb2dnZWRpbihHZXRWYXJzKCdyZWRpcmVjdCcsICdHRVQnKSk7DQogICAgICAgIGlmICgkemJwLT5DaGVja1JpZ2h0cygnYWRtaW4nKSkgew0KICAgICAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnYWRtaW4vaW5kZXgucGhwP2FjdD1hZG1pbicpOw0KICAgICAgICB9DQogICAgICAgIGlmIChlbXB0eSgkemJwLT51c2VyLT5JRCkgJiYgR2V0VmFycygncmVkaXJlY3QnLCAnR0VUJykpIHsNCiAgICAgICAgICAgIHNldGNvb2tpZSgicmVkaXJlY3QiLCBHZXRWYXJzKCdyZWRpcmVjdCcsICdHRVQnKSwgMCwgJHpicC0+Y29va2llc3BhdGgpOw0KICAgICAgICB9DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2xvZ2luLnBocCcpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdsb2dvdXQnOg0KICAgICAgICBDaGVja0lzUmVmZXJlclZhbGlkKCk7DQogICAgICAgIExvZ291dCgpOw0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCcuLi8nKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnYWRtaW4nOg0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdhZG1pbi9pbmRleC5waHA/YWN0PWFkbWluJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ3ZlcmlmeSc6DQogICAgICAgIC8vIOiAg+iZkeWFvOWuueWOn+WboO+8jOatpOWkhOS4jeWKoENTUkbpqozor4HjgIJsb2dvdXTliqDnmoTljp/lm6DmmK/kuLvpopjnmoTpgIDlh7rml6DlpKfnoo3jgIINCiAgICAgICAgaWYgKFZlcmlmeUxvZ2luKCkpIHsNCiAgICAgICAgICAgIFJlZGlyZWN0X2NtZF9mcm9tX2FyZ3Nfd2l0aF9sb2dnZWRpbihHZXRWYXJzKCdyZWRpcmVjdCcsICdDT09LSUUnKSk7DQogICAgICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdhZG1pbi9pbmRleC5waHA/YWN0PWFkbWluJyk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCcuLi8nKTsNCiAgICAgICAgfQ0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdzZWFyY2gnOg0KICAgICAgICBSZWRpcmVjdF9jbWRfdG9fc2VhcmNoKCk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ2NtdCc6DQogICAgICAgICRkaWUgPSBmYWxzZTsNCiAgICAgICAgaWYgKEdldFZhcnMoJ2lzYWpheCcsICdQT1NUJykpIHsNCiAgICAgICAgICAgIC8vIOWFvOWuueiAgeeJiOacrOeahOivhOiuuuWJjeerrw0KICAgICAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fWmJwX1Nob3dFcnJvcicsICdSZXNwb25kRXJyb3InLCBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pOw0KICAgICAgICAgICAgJGRpZSA9IHRydWU7DQogICAgICAgIH0gZWxzZWlmIChHZXRWYXJzKCdmb3JtYXQnLCAnUE9TVCcpID09ICJqc29uIikgew0KICAgICAgICAgICAgLy8gMS415LmL5ZCO55qE6K+E6K665LulanNvbuW9ouW8j+WKoOi9vee7meWJjeerrw0KICAgICAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fWmJwX1Nob3dFcnJvcicsICdKc29uRXJyb3I0U2hvd0Vycm9ySG9vaycsIFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTik7DQogICAgICAgICAgICAkZGllID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBQb3N0Q29tbWVudCgpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCg0KICAgICAgICBpZiAoJGRpZSkgew0KICAgICAgICAgICAgZXhpdDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoR2V0VmFycygnSFRUUF9SRUZFUkVSJywgJ1NFUlZFUicpKTsNCiAgICAgICAgfQ0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdnZXRjbXQnOg0KICAgICAgICBWaWV3Q29tbWVudHMoKGludCkgR2V0VmFycygncG9zdGlkJywgJ0dFVCcpLCAoaW50KSBHZXRWYXJzKCdwYWdlJywgJ0dFVCcpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnQXJ0aWNsZUVkdCc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2VkaXQucGhwPycgLiBHZXRWYXJzKCdRVUVSWV9TVFJJTkcnLCAnU0VSVkVSJykpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdBcnRpY2xlRGVsJzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBEZWxBcnRpY2xlKCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2NtZC5waHA/YWN0PUFydGljbGVNbmcnKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnQXJ0aWNsZU1uZyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnQXJ0aWNsZVBzdCc6DQogICAgICAgICR6YnAtPmNzcmZFeHBpcmF0aW9uID0gNDg7DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgUG9zdEFydGljbGUoKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgZWNobyAnPHNjcmlwdD5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgiemJsb2dwaHBfYXJ0aWNsZV8iICsgZGVjb2RlVVJJQ29tcG9uZW50KCcgLiB1cmxlbmNvZGUoR2V0VmFycygnSUQnLCAnUE9TVCcpKSAuICcpKTs8L3NjcmlwdD4nOw0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kX2J5X3NjcmlwdCgnY21kLnBocD9hY3Q9QXJ0aWNsZU1uZycpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdQYWdlRWR0JzoNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnYWRtaW4vZWRpdC5waHA/JyAuIEdldFZhcnMoJ1FVRVJZX1NUUklORycsICdTRVJWRVInKSk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ1BhZ2VEZWwnOg0KICAgICAgICBDaGVja0lzUmVmZXJlclZhbGlkKCk7DQogICAgICAgIERlbFBhZ2UoKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9UGFnZU1uZycpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdQYWdlTW5nJzoNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnYWRtaW4vaW5kZXgucGhwPycgLiBHZXRWYXJzKCdRVUVSWV9TVFJJTkcnLCAnU0VSVkVSJykpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdQYWdlUHN0JzoNCiAgICAgICAgJHpicC0+Y3NyZkV4cGlyYXRpb24gPSA0ODsNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBQb3N0UGFnZSgpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgJHpicC0+U2V0SGludCgnZ29vZCcpOw0KICAgICAgICBlY2hvICc8c2NyaXB0PmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCJ6YmxvZ3BocF9hcnRpY2xlXyIgKyBkZWNvZGVVUklDb21wb25lbnQoJyAuIHVybGVuY29kZShHZXRWYXJzKCdJRCcsICdQT1NUJykpIC4gJykpOzwvc2NyaXB0Pic7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmRfYnlfc2NyaXB0KCdjbWQucGhwP2FjdD1QYWdlTW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ0NhdGVnb3J5TW5nJzoNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnYWRtaW4vaW5kZXgucGhwPycgLiBHZXRWYXJzKCdRVUVSWV9TVFJJTkcnLCAnU0VSVkVSJykpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdDYXRlZ29yeUVkdCc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2NhdGVnb3J5X2VkaXQucGhwPycgLiBHZXRWYXJzKCdRVUVSWV9TVFJJTkcnLCAnU0VSVkVSJykpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdDYXRlZ29yeVBzdCc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgUG9zdENhdGVnb3J5KCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2NtZC5waHA/YWN0PUNhdGVnb3J5TW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ0NhdGVnb3J5RGVsJzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBEZWxDYXRlZ29yeSgpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgJHpicC0+U2V0SGludCgnZ29vZCcpOw0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdjbWQucGhwP2FjdD1DYXRlZ29yeU1uZycpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdDb21tZW50RGVsJzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBEZWxDb21tZW50KCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJF9TRVJWRVJbIkhUVFBfUkVGRVJFUiJdKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnQ29tbWVudENoayc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgQ2hlY2tDb21tZW50KCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJF9TRVJWRVJbIkhUVFBfUkVGRVJFUiJdKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnQ29tbWVudEJhdCc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgQmF0Y2hDb21tZW50KCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJF9TRVJWRVJbIkhUVFBfUkVGRVJFUiJdKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnQ29tbWVudE1uZyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnTWVtYmVyTW5nJzoNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnYWRtaW4vaW5kZXgucGhwPycgLiBHZXRWYXJzKCdRVUVSWV9TVFJJTkcnLCAnU0VSVkVSJykpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdNZW1iZXJFZHQnOg0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdhZG1pbi9tZW1iZXJfZWRpdC5waHA/JyAuIEdldFZhcnMoJ1FVRVJZX1NUUklORycsICdTRVJWRVInKSk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ01lbWJlck5ldyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL21lbWJlcl9lZGl0LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnTWVtYmVyUHN0JzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICAkbWVtID0gUG9zdE1lbWJlcigpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgLy/liKTmlq3lj4rmj5DliY3ot7PovawNCiAgICAgICAgaWYgKGlzc2V0KCRfUE9TVFsnUGFzc3dvcmQnXSkNCiAgICAgICAgICAgICYmICRtZW0tPklEID09ICR6YnAtPnVzZXItPklEDQogICAgICAgICAgICAmJiAhZGVmaW5lZCgnWkJQX0lOX0FKQVgnKQ0KICAgICAgICAgICAgJiYgIWRlZmluZWQoJ1pCUF9JTl9BUEknKQ0KICAgICAgICApIHsNCiAgICAgICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJHpicC0+aG9zdCAuICd6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9bG9naW4nKTsNCiAgICAgICAgfQ0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2NtZC5waHA/YWN0PU1lbWJlck1uZycpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdNZW1iZXJEZWwnOg0KICAgICAgICBDaGVja0lzUmVmZXJlclZhbGlkKCk7DQogICAgICAgIGlmIChEZWxNZW1iZXIoKSkgew0KICAgICAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAgICAgJHpicC0+U2V0SGludCgnZ29vZCcpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHpicC0+U2V0SGludCgnYmFkJyk7DQogICAgICAgIH0NCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9TWVtYmVyTW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ1VwbG9hZE1uZyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnVXBsb2FkUHN0JzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBQb3N0VXBsb2FkKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9VXBsb2FkTW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ1VwbG9hZERlbCc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgRGVsVXBsb2FkKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9VXBsb2FkTW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ1RhZ01uZyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnVGFnRWR0JzoNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnYWRtaW4vdGFnX2VkaXQucGhwPycgLiBHZXRWYXJzKCdRVUVSWV9TVFJJTkcnLCAnU0VSVkVSJykpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdUYWdQc3QnOg0KICAgICAgICBDaGVja0lzUmVmZXJlclZhbGlkKCk7DQogICAgICAgIFBvc3RUYWcoKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9VGFnTW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ1RhZ0RlbCc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgRGVsVGFnKCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2NtZC5waHA/YWN0PVRhZ01uZycpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdQbHVnaW5NbmcnOg0KICAgICAgICBpZiAoR2V0VmFycygnaW5zdGFsbCcsICdHRVQnKSkgew0KICAgICAgICAgICAgSW5zdGFsbFBsdWdpbihHZXRWYXJzKCdpbnN0YWxsJywgJ0dFVCcpKTsNCiAgICAgICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgfQ0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdhZG1pbi9pbmRleC5waHA/JyAuIEdldFZhcnMoJ1FVRVJZX1NUUklORycsICdTRVJWRVInKSk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ1BsdWdpbkRpcyc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgJGRpc2FibGVSZXN1bHQgPSBEaXNhYmxlUGx1Z2luKEdldFZhcnMoJ25hbWUnLCAnR0VUJykpOw0KICAgICAgICBpZiAoJGRpc2FibGVSZXN1bHQgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICR6YnAtPlNldEhpbnQoJ2JhZCcpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICAgICAgJHpicC0+U2V0SGludCgnZ29vZCcpOw0KICAgICAgICB9DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2NtZC5waHA/YWN0PVBsdWdpbk1uZycpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdQbHVnaW5FbmInOg0KICAgICAgICBDaGVja0lzUmVmZXJlclZhbGlkKCk7DQogICAgICAgICRpbnN0YWxsID0gJyZpbnN0YWxsPSc7DQogICAgICAgICRpbnN0YWxsIC49IEVuYWJsZVBsdWdpbihHZXRWYXJzKCduYW1lJywgJ0dFVCcpKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9UGx1Z2luTW5nJyAuICRpbnN0YWxsKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnVGhlbWVNbmcnOg0KICAgICAgICBpZiAoR2V0VmFycygnaW5zdGFsbCcsICdHRVQnKSkgew0KICAgICAgICAgICAgSW5zdGFsbFBsdWdpbihHZXRWYXJzKCdpbnN0YWxsJywgJ0dFVCcpKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoR2V0VmFycygnaW5zdGFsbCcsICdHRVQnKSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgJHpicC0+QnVpbGRUZW1wbGF0ZSgpOw0KICAgICAgICB9DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnVGhlbWVTZXQnOg0KICAgICAgICBDaGVja0lzUmVmZXJlclZhbGlkKCk7DQogICAgICAgICRpbnN0YWxsID0gJyZpbnN0YWxsPSc7DQogICAgICAgICRpbnN0YWxsIC49IFNldFRoZW1lKEdldFZhcnMoJ3RoZW1lJywgJ1BPU1QnKSwgR2V0VmFycygnc3R5bGUnLCAnUE9TVCcpKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9VGhlbWVNbmcnIC4gJGluc3RhbGwpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdTaWRlYmFyU2V0JzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBTZXRTaWRlYmFyKCk7DQogICAgICAgICR6YnAtPkJ1aWxkTW9kdWxlKCk7DQogICAgICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdNb2R1bGVFZHQnOg0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdhZG1pbi9tb2R1bGVfZWRpdC5waHA/JyAuIEdldFZhcnMoJ1FVRVJZX1NUUklORycsICdTRVJWRVInKSk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ01vZHVsZVBzdCc6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgUG9zdE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgJHpicC0+U2V0SGludCgnZ29vZCcpOw0KICAgICAgICBSZWRpcmVjdF9jbWRfZW5kKCdjbWQucGhwP2FjdD1Nb2R1bGVNbmcnKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnTW9kdWxlRGVsJzoNCiAgICAgICAgQ2hlY2tJc1JlZmVyZXJWYWxpZCgpOw0KICAgICAgICBEZWxNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgnY21kLnBocD9hY3Q9TW9kdWxlTW5nJyk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ01vZHVsZU1uZyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnU2V0dGluZ01uZyc6DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2FkbWluL2luZGV4LnBocD8nIC4gR2V0VmFycygnUVVFUllfU1RSSU5HJywgJ1NFUlZFUicpKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnU2V0dGluZ1Nhdic6DQogICAgICAgIENoZWNrSXNSZWZlcmVyVmFsaWQoKTsNCiAgICAgICAgJG9sZEhvc3QgPSAkemJwLT5vcHRpb25bJ1pDX0JMT0dfSE9TVCddOw0KICAgICAgICBTYXZlU2V0dGluZygpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgLy/liKTmlq3lj4rmj5DliY3ot7PovawNCiAgICAgICAgaWYgKCR6YnAtPm9wdGlvblsnWkNfUEVSTUFORU5UX0RPTUFJTl9FTkFCTEUnXSA9PSB0cnVlKSB7DQogICAgICAgICAgICBpZiAoJG9sZEhvc3QgIT0gJHpicC0+b3B0aW9uWydaQ19CTE9HX0hPU1QnXSkgew0KICAgICAgICAgICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJHpicC0+b3B0aW9uWydaQ19CTE9HX0hPU1QnXSAuICd6Yl9zeXN0ZW0vY21kLnBocD9hY3Q9bG9naW4nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkemJwLT5TZXRIaW50KCdnb29kJyk7DQogICAgICAgIFJlZGlyZWN0X2NtZF9lbmQoJ2NtZC5waHA/YWN0PVNldHRpbmdNbmcnKTsNCiAgICAgICAgYnJlYWs7DQogICAgY2FzZSAnUG9zdEJhdCc6DQogICAgICAgIEJhdGNoUG9zdChHZXRWYXJzKCd0eXBlJywgJ0dFVCcpKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQogICAgICAgICR6YnAtPlNldEhpbnQoJ2dvb2QnKTsNCiAgICAgICAgUmVkaXJlY3RfY21kX2VuZCgkX1NFUlZFUlsiSFRUUF9SRUZFUkVSIl0pOw0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdtaXNjJzoNCiAgICAgICAgaW5jbHVkZSAnLi9mdW5jdGlvbi9jX3N5c3RlbV9taXNjLnBocCc7DQogICAgICAgIG9iX2NsZWFuKCk7DQoNCiAgICAgICAgJG1pc2NUeXBlID0gR2V0VmFycygndHlwZScsICdHRVQnKTsNCiAgICAgICAgJG1pc2NUeXBlID0gKCRtaXNjVHlwZSA9PT0gJ3BocCcgLiAnaW5mbycpID8gJ3BocF96YnBfaW5mbycgOiAkbWlzY1R5cGU7DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fTWlzY19CZWdpbiddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwbmFtZSgkbWlzY1R5cGUpOw0KICAgICAgICB9DQoNCiAgICAgICAgJGZ1bmN0aW9uID0gJ21pc2NfJyAuICRtaXNjVHlwZTsNCiAgICAgICAgJGZ1bmN0aW9uKCk7DQogICAgICAgIGJyZWFrOw0KICAgIGNhc2UgJ2FqYXgnOg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9DbWRfQWpheCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwbmFtZShHZXRWYXJzKCdzcmMnLCAnR0VUJykpOw0KICAgICAgICB9DQoNCiAgICAgICAgYnJlYWs7DQogICAgZGVmYXVsdDoNCiAgICAgICAgLy8gY29kZS4uLg0KICAgICAgICBicmVhazsNCn0NCg0KZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ21kX0VuZCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICRmcG5hbWUoKTsNCn0NCg==</file>
	<file name='zb_system\login.php' crc32='12089766'  dt:dt='bin.base64'>PD9waHANCg0KLyoqDQogKiBaLUJsb2cgd2l0aCBQSFAuDQogKg0KICogQGF1dGhvciBaLUJsb2dQSFAgVGVhbQ0KICovDQoNCnJlcXVpcmUgJ2Z1bmN0aW9uL2Nfc3lzdGVtX2Jhc2UucGhwJzsNCg0KJHpicC0+TG9hZCgpOw0KaWYgKCR6YnAtPkNoZWNrUmlnaHRzKCdhZG1pbicpKSB7DQogICAgUmVkaXJlY3QzMDIoJ2NtZC5waHA/YWN0PWFkbWluJyk7DQp9DQo/PjwhRE9DVFlQRSBIVE1MPg0KPGh0bWw+DQo8aGVhZD4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9ImllPWVkZ2UsY2hyb21lPTEiIC8+DQogICAgPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJub25lIiAvPg0KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLjAsbWluaW11bS1zY2FsZT0xLjAsbWF4aW11bS1zY2FsZT0xLjAiLz4NCiAgICA8bWV0YSBuYW1lPSJnZW5lcmF0b3IiIGNvbnRlbnQ9Ijw/cGhwIGVjaG8gJG9wdGlvblsnWkNfQkxPR19QUk9EVUNUX0ZVTEwnXTsgPz4iIC8+DQogICAgPG1ldGEgbmFtZT0icmVuZGVyZXIiIGNvbnRlbnQ9IndlYmtpdCIgLz4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9hZG1pbi5jc3M/PD9waHAgZWNobyAkYmxvZ3ZlcnNpb247ID8+IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiIgLz4NCiAgICA8c2NyaXB0IHNyYz0ic2NyaXB0L2pxdWVyeS0yLjIuNC5taW4uanM/PD9waHAgZWNobyAkYmxvZ3ZlcnNpb247ID8+Ij48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ic2NyaXB0L3pibG9ncGhwLmpzPzw/cGhwIGVjaG8gJGJsb2d2ZXJzaW9uOyA/PiI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9InNjcmlwdC9tZDUuanM/PD9waHAgZWNobyAkYmxvZ3ZlcnNpb247ID8+Ij48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ic2NyaXB0L2NfYWRtaW5fanNfYWRkLnBocD9oYXNoPTw/cGhwIGVjaG8gJHpicC0+aHRtbF9qc19oYXNoOyA/PiY8P3BocCBlY2hvICRibG9ndmVyc2lvbjsgPz4iPjwvc2NyaXB0Pg0KICAgIDx0aXRsZT48P3BocCBlY2hvICRibG9nbmFtZSAuICctJyAuICRsYW5nWydtc2cnXVsnbG9naW4nXTsgPz48L3RpdGxlPg0KPD9waHANCmZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0xvZ2luX0hlYWRlciddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICRmcG5hbWUoKTsNCn0NCg0KPz4NCjwvaGVhZD4NCjxib2R5IGNsYXNzPSJsb2dpbiI+DQo8ZGl2IGNsYXNzPSJiZyI+DQo8ZGl2IGlkPSJ3cmFwcGVyIj4NCiAgPGRpdiBjbGFzcz0ibG9nbyI+PGltZyBzcmM9ImltYWdlL2FkbWluL25vbmUuZ2lmIiB0aXRsZT0iPD9waHAgZWNobyBodG1sc3BlY2lhbGNoYXJzKCRibG9nbmFtZSk7ID8+IiBhbHQ9Ijw/cGhwIGVjaG8gaHRtbHNwZWNpYWxjaGFycygkYmxvZ25hbWUpOyA/PiIvPjwvZGl2Pg0KICA8ZGl2IGNsYXNzPSJsb2dpbiI+DQogICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249IiMiPg0KICAgIDxkbD4NCiAgICAgIDxkdD48L2R0Pg0KICAgICAgPGRkIGNsYXNzPSJ1c2VybmFtZSI+PGxhYmVsIGZvcj0iZWR0VXNlck5hbWUiPjw/cGhwIGVjaG8gJGxhbmdbJ21zZyddWyd1c2VybmFtZSddOyA/PjwvbGFiZWw+PGlucHV0IHR5cGU9InRleHQiIGlkPSJlZHRVc2VyTmFtZSIgbmFtZT0iZWR0VXNlck5hbWUiIHNpemU9IjIwIiB2YWx1ZT0iPD9waHAgZWNobyBHZXRWYXJzKCd1c2VybmFtZScsICdDT09LSUUnKTsgPz4iIHRhYmluZGV4PSIxIiAvPjwvZGQ+DQogICAgICA8ZGQgY2xhc3M9InBhc3N3b3JkIj48bGFiZWwgZm9yPSJlZHRQYXNzV29yZCI+PD9waHAgZWNobyAkbGFuZ1snbXNnJ11bJ3Bhc3N3b3JkJ107ID8+PC9sYWJlbD48aW5wdXQgdHlwZT0icGFzc3dvcmQiIGlkPSJlZHRQYXNzV29yZCIgbmFtZT0iZWR0UGFzc1dvcmQiIHNpemU9IjIwIiB0YWJpbmRleD0iMiIgLz48L2RkPg0KICAgIDwvZGw+DQogICAgPGRsPg0KICAgICAgPGR0PjwvZHQ+DQogICAgICA8ZGQgY2xhc3M9ImNoZWNrYm94Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImNoa1JlbWVtYmVyIiBpZD0iY2hrUmVtZW1iZXIiICB0YWJpbmRleD0iOTgiIC8+PGxhYmVsIGZvcj0iY2hrUmVtZW1iZXIiPjw/cGhwIGVjaG8gJGxhbmdbJ21zZyddWydzdGF5X3NpZ25lZF9pbiddOyA/PjwvbGFiZWw+PC9kZD4NCiAgICAgIDxkZCBjbGFzcz0ic3VibWl0Ij48aW5wdXQgaWQ9ImJ0blBvc3QiIG5hbWU9ImJ0blBvc3QiIHR5cGU9InN1Ym1pdCIgdmFsdWU9Ijw/cGhwIGVjaG8gJGxhbmdbJ21zZyddWydsb2dpbiddOyA/PiIgY2xhc3M9ImJ1dHRvbiIgdGFiaW5kZXg9Ijk5Ii8+PC9kZD4NCiAgICA8L2RsPg0KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InVzZXJuYW1lIiBpZD0idXNlcm5hbWUiIHZhbHVlPSIiIC8+DQogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icGFzc3dvcmQiIGlkPSJwYXNzd29yZCIgdmFsdWU9IiIgLz4NCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYXZlZGF0ZSIgaWQ9InNhdmVkYXRlIiB2YWx1ZT0iMSIgLz4NCiAgICA8L2Zvcm0+DQogIDwvZGl2Pg0KPC9kaXY+DQo8L2Rpdj4NCjxzY3JpcHQ+DQokKCIjYnRuUG9zdCIpLmNsaWNrKGZ1bmN0aW9uKCl7DQoNCiAgICB2YXIgc3RyVXNlck5hbWU9JCgiI2VkdFVzZXJOYW1lIikudmFsKCk7DQogICAgdmFyIHN0clBhc3NXb3JkPSQoIiNlZHRQYXNzV29yZCIpLnZhbCgpOw0KICAgIHZhciBzdHJTYXZlRGF0ZT0kKCIjc2F2ZWRhdGUiKS52YWwoKQ0KDQogICAgaWYgKHN0clVzZXJOYW1lPT09ICIiIHx8IHN0clBhc3NXb3JkID09PSAiIil7DQogICAgICAgIGFsZXJ0KCI8P3BocCBlY2hvICRsYW5nWydlcnJvciddWyc2NiddOyA/PiIpOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLy8kKCIjZWR0VXNlck5hbWUiKS5yZW1vdmUoKTsNCiAgICAvLyQoIiNlZHRQYXNzV29yZCIpLnJlbW92ZSgpOw0KICAgIC8vJCgiI2Noa1JlbWVtYmVyIikucmVtb3ZlKCk7DQoNCiAgICAkKCJmb3JtIikuYXR0cigiYWN0aW9uIiwiY21kLnBocD9hY3Q9dmVyaWZ5Iik7DQogICAgJCgiI3VzZXJuYW1lIikudmFsKHN0clVzZXJOYW1lKTsNCiAgICAkKCIjcGFzc3dvcmQiKS52YWwoTUQ1KHN0clBhc3NXb3JkKSk7DQogICAgJCgiI3NhdmVkYXRlIikudmFsKHN0clNhdmVEYXRlKTsNCn0pDQoNCiQoIiNjaGtSZW1lbWJlciIpLmNsaWNrKGZ1bmN0aW9uKCl7DQogICAgJCgiI3NhdmVkYXRlIikuYXR0cigidmFsdWUiLCAkKCIjY2hrUmVtZW1iZXIiKS5wcm9wKCJjaGVja2VkIikgPT0gdHJ1ZSA/IDMwIDogMSk7DQp9KQ0KDQo8L3NjcmlwdD4NCjwvYm9keT4NCjwvaHRtbD4NCjw/cGhwDQpSdW5UaW1lKCk7DQoNCg==</file>
	<file name='zb_system\admin\admin_header.php' crc32='B083EBB1'  dt:dt='bin.base64'>PD9waHAgaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KaWYgKCR6YnAtPm9wdGlvblsnWkNfQURESVRJT05BTF9TRUNVUklUWSddKSB7DQogICAgaGVhZGVyKCdYLUZyYW1lLU9wdGlvbnM6IERFTlknKTsNCiAgICBoZWFkZXIoJ1gtWFNTLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2snKTsNCiAgICBoZWFkZXIoJ0NvbnRlbnQtU2VjdXJpdHktUG9saWN5OiAnIC4gR2V0QmFja2VuZENTUEhlYWRlcigpKTsNCiAgICBpZiAoJHpicC0+aXNIdHRwcykgew0KICAgICAgICBoZWFkZXIoJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDEnKTsNCiAgICB9DQp9DQo/PjwhZG9jdHlwZSBodG1sPg0KPGh0bWwgbGFuZz0iPD9waHAgZWNobyAkbGFuZ1snbGFuZ19iY3A0NyddOyA/PiI+DQo8aGVhZD4NCjxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPg0KPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJpZT1lZGdlIiAvPg0KPG1ldGEgbmFtZT0iZ2VuZXJhdG9yIiBjb250ZW50PSJaLUJsb2dQSFAgPD9waHAgZWNobyBaQ19WRVJTSU9OX0RJU1BMQVk7ID8+IiAvPg0KPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJub25lIiAvPg0KPG1ldGEgbmFtZT0icmVuZGVyZXIiIGNvbnRlbnQ9IndlYmtpdCIgLz4NCjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsdmlld3BvcnQtZml0PWNvdmVyIiAvPg0KPG1ldGEgbmFtZT0iY3NyZlRva2VuIiBjb250ZW50PSI8P3BocCBlY2hvICR6YnAtPkdldENTUkZUb2tlbigpOyA/PiIgLz4NCjxtZXRhIG5hbWU9ImNzcmZFeHBpcmF0aW9uIiBjb250ZW50PSI8P3BocCBlY2hvICR6YnAtPmNzcmZFeHBpcmF0aW9uOyA/PiIgLz4NCjx0aXRsZT48P3BocCBlY2hvICRibG9nbmFtZSAuICcgLSAnIC4gJGJsb2d0aXRsZTsgPz48L3RpdGxlPg0KPGxpbmsgaHJlZj0iPD9waHAgZWNobyAkYmxvZ2hvc3Q7ID8+emJfc3lzdGVtL2Nzcy9hZG1pbjIuY3NzPzw/cGhwIGVjaG8gJGJsb2d2ZXJzaW9uOyA/PiIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgLz4NCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ijw/cGhwIGVjaG8gJGJsb2dob3N0OyA/PnpiX3N5c3RlbS9jc3MvanF1ZXJ5LXVpLmN1c3RvbS5jc3M/dj08P3BocCBlY2hvICRibG9ndmVyc2lvbjsgPz4iLz4NCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ijw/cGhwIGVjaG8gJGJsb2dob3N0OyA/PnpiX3N5c3RlbS9pbWFnZS9pY29uL2ljb24uY3NzP3Y9PD9waHAgZWNobyAkYmxvZ3ZlcnNpb247ID8+Ii8+DQo8c2NyaXB0IHNyYz0iPD9waHAgZWNobyAkYmxvZ2hvc3Q7ID8+emJfc3lzdGVtL3NjcmlwdC9qcXVlcnktMi4yLjQubWluLmpzP3Y9PD9waHAgZWNobyAkYmxvZ3ZlcnNpb247ID8+Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSI8P3BocCBlY2hvICRibG9naG9zdDsgPz56Yl9zeXN0ZW0vc2NyaXB0L3pibG9ncGhwLmpzP3Y9PD9waHAgZWNobyAkYmxvZ3ZlcnNpb247ID8+Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSI8P3BocCBlY2hvICRibG9naG9zdDsgPz56Yl9zeXN0ZW0vc2NyaXB0L2NfYWRtaW5fanNfYWRkLnBocD9oYXNoPTw/cGhwIGVjaG8gJHpicC0+YWRtaW5fanNfaGFzaDsgPz4mdj08P3BocCBlY2hvICRibG9ndmVyc2lvbjsgPz4iPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ijw/cGhwIGVjaG8gJGJsb2dob3N0OyA/PnpiX3N5c3RlbS9zY3JpcHQvanF1ZXJ5LXVpLmN1c3RvbS5taW4uanM/dj08P3BocCBlY2hvICRibG9ndmVyc2lvbjsgPz4iPjwvc2NyaXB0Pg0KPHNjcmlwdD5pZiAoIXdpbmRvdy5ibG9naG9zdCAmJiB3aW5kb3cuY29uZmlybSgiPD9waHAgZWNobyAkbGFuZ1snbXNnJ11bJ2Vycm9yX2xvYWRfanMnXTsgPz4iKSkgd2luZG93Lm9wZW4oJzw/cGhwIGVjaG8gc3RyX3JlcGxhY2UoJ3slbWVzc2FnZSV9JywgJycsIHN0cl9yZXBsYWNlKCd7JWlkJX0nLCA4OSwgJGxhbmdbJ29mZmljYWxfdXJscyddWydtb3JlX2hlbHAnXSkpOyA/PicpOzwvc2NyaXB0Pg0KPD9waHANCmZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0FkbWluX0hlYWRlciddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICRmcG5hbWUoKTsNCn0NCg==</file>
	<file name='zb_system\admin\admin_top.php' crc32='D66561DC'  dt:dt='bin.base64'>PD9waHAgaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfSA/Pg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9ImFkbWluIGFkbWluLTw/cGhwIGVjaG8gJGFjdGlvbjsgPz4iPg0KPGhlYWRlciBjbGFzcz0iaGVhZGVyIj4NCiAgICA8ZGl2IGNsYXNzPSJsb2dvIj48P3BocCBpZihDaGVja0lzTW9iaWxlKCkpIHsgPz48YSBocmVmPSI8P3BocCBlY2hvICR6YnAtPmNtZHVybCAuICc/YWN0PWFkbWluJzsgPz4iIHRpdGxlPSI8P3BocCA/PiI+PD9waHAgfSBlbHNlIHs/PjxhIGhyZWY9Ijw/cGhwIGVjaG8gJGJsb2dob3N0OyA/PiIgdGl0bGU9Ijw/cGhwIGVjaG8gaHRtbHNwZWNpYWxjaGFycygkYmxvZ25hbWUpOyA/PiIgdGFyZ2V0PSJfYmxhbmsiPjw/cGhwIH0/PjxpbWcgc3JjPSI8P3BocCBlY2hvICRibG9naG9zdDsgPz56Yl9zeXN0ZW0vaW1hZ2UvYWRtaW4vbm9uZS5naWYiIGFsdD0iWi1CbG9nIi8+PC9hPjwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9InVzZXIiPiA8YSBocmVmPSI8P3BocCBlY2hvICRibG9naG9zdDsgPz56Yl9zeXN0ZW0vY21kLnBocD9hY3Q9TWVtYmVyRWR0JmFtcDtpZD08P3BocCBlY2hvICR6YnAtPnVzZXItPklEOyA/PiIgdGl0bGU9Ijw/cGhwIGVjaG8gJGxhbmdbJ21zZyddWydlZGl0J107ID8+Ij48aW1nIHNyYz0iPD9waHAgZWNobyAkemJwLT51c2VyLT5BdmF0YXI7ID8+IiB3aWR0aD0iNDAiIGhlaWdodD0iNDAiIGlkPSJhdmF0YXIiIGFsdD0iQXZhdGFyIiAvPjwvYT4NCiAgICAgIDxkaXYgY2xhc3M9InVzZXJuYW1lIj48c3Bhbj48P3BocCBlY2hvICR6YnAtPnVzZXItPkxldmVsTmFtZTsgPz7vvJo8P3BocCBlY2hvICR6YnAtPnVzZXItPlN0YXRpY05hbWU7ID8+PC9zcGFuPjwvZGl2Pg0KICAgICAgPGRpdiBjbGFzcz0idXNlcmJ0biI+PGEgY2xhc3M9InByb2ZpbGUiIGhyZWY9Ijw/cGhwIGVjaG8gJGJsb2dob3N0OyA/PiIgdGl0bGU9IiIgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJpY29uLWdsb2JlMiI+PC9pPiA8c3Bhbj48P3BocCBlY2hvICRsYW5nWydtc2cnXVsncmV0dXJuX3RvX3NpdGUnXTsgPz48L3NwYW4+PC9hPiZuYnNwOyZuYnNwOzxhIGNsYXNzPSJsb2dvdXQiIGhyZWY9Ijw/cGhwIGVjaG8gQnVpbGRTYWZlQ21kVVJMKCdhY3Q9bG9nb3V0Jyk7ID8+IiB0aXRsZT0iIj48aSBjbGFzcz0iaWNvbi1wb3dlciI+PC9pPiA8c3Bhbj48P3BocCBlY2hvICRsYW5nWydtc2cnXVsnbG9nb3V0J107ID8+PC9zcGFuPjwvYT48L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtZW51Ij4NCiAgICAgIDx1bCBpZD0idG9wbWVudSI+PD9waHAgUmVzcG9uc2VBZG1pbl9Ub3BNZW51KCk7ID8+DQogICAgICA8L3VsPg0KICAgIDwvZGl2Pg0KPC9oZWFkZXI+DQo8P3BocCByZXF1aXJlIFpCUF9QQVRIIC4gJ3piX3N5c3RlbS9hZG1pbi9hZG1pbl9sZWZ0LnBocCc7ID8+DQo8c2VjdGlvbiBjbGFzcz0ibWFpbiI+DQo8P3BocA0KJHpicC0+R2V0SGludCgpOw0KDQpmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9BZG1pbl9IaW50J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgJGZwbmFtZSgpOw0KfQ0K</file>
	<file name='zb_system\admin\edit.php' crc32='FC7FD146'  dt:dt='bin.base64'></file>
	<file name='zb_system\admin\updatedb.php' crc32='E550B4C'  dt:dt='bin.base64'>PD9waHANCg0KLyoqDQogKiBaLUJsb2cgd2l0aCBQSFAuDQogKg0KICogQGF1dGhvciAgWi1CbG9nUEhQIFRlYW0NCiAqIEB2ZXJzaW9uIDEuMCAyMDIwLTAzLTI2DQogKi8NCnJlcXVpcmUgJy4uL2Z1bmN0aW9uL2Nfc3lzdGVtX2Jhc2UucGhwJzsNCg0KJHpicC0+TG9hZCgpOw0KDQpBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9aYnBfU2hvd0Vycm9yJywgJ0pzb25FcnJvcjRTaG93RXJyb3JIb29rJywgUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKTsNCg0KaWYgKCEkemJwLT5DaGVja1JpZ2h0cygncm9vdCcpKSB7DQogICAgJHpicC0+U2hvd0Vycm9yKDYpOw0KICAgIGRpZSgpOw0KfQ0KDQpmdW5jdGlvbiB1cGRhdGVkYl9jaGVja2V4aXN0KCR0YWJsZSwgJGZpZWxkKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgcmV0dXJuICR6YnAtPmRiLT5FeGlzdENvbHVtbigkdGFibGUsICRmaWVsZCk7DQp9DQoNCmZ1bmN0aW9uIHVwZGF0ZWRiKCkNCnsNCiAgICBnbG9iYWwgJHpicCwgJHRhYmxlLCAkZGF0YWluZm87DQogICAgJHQgPSAmJHRhYmxlOw0KICAgICRkID0gJiRkYXRhaW5mbzsNCiAgICAkZGIgPSAmJHpicC0+ZGI7DQoNCiAgICAvLzE2MjA5MA0KICAgICRvbGQgPSB1cGRhdGVkYl9jaGVja2V4aXN0KCR0WydUYWcnXSwgJGRbJ1RhZyddWydUeXBlJ11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0YWJsZVsnVGFnJ119IEFERCAgeyRkWydUYWcnXVsnVHlwZSddWzBdfSBpbnRlZ2VyIE5PVCBOVUxMIERFRkFVTFQgMDsiKTsNCiAgICB9DQogICAgJG9sZCA9IHVwZGF0ZWRiX2NoZWNrZXhpc3QoJHRbJ0NhdGVnb3J5J10sICRkWydDYXRlZ29yeSddWydUeXBlJ11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0YWJsZVsnQ2F0ZWdvcnknXX0gQUREICB7JGRbJ0NhdGVnb3J5J11bJ1R5cGUnXVswXX0gaW50ZWdlciBOT1QgTlVMTCBERUZBVUxUIDA7Iik7DQogICAgfQ0KDQogICAgLy8xNzIzMDANCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnQ29uZmlnJ10sICRkWydDb25maWcnXVsnS2V5J11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0YWJsZVsnQ29uZmlnJ119IEFERCB7JGRbJ0NvbmZpZyddWydLZXknXVswXX0gVkFSQ0hBUigyNTApIE5PVCBOVUxMIERFRkFVTFQgJyc7Iik7DQogICAgfQ0KICAgICRvbGQgPSB1cGRhdGVkYl9jaGVja2V4aXN0KCR0WydQb3N0J10sICRkWydQb3N0J11bJ0NyZWF0ZVRpbWUnXVswXSk7DQogICAgaWYgKCRvbGQgPT09IGZhbHNlKSB7DQogICAgICAgIEAkZGItPlF1ZXJ5KCJBTFRFUiBUQUJMRSB7JHRbJ1Bvc3QnXX0gQUREIHskZFsnUG9zdCddWydDcmVhdGVUaW1lJ11bMF19IGludGVnZXIgTk9UIE5VTEwgREVGQVVMVCAwOyIpOw0KICAgIH0NCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnUG9zdCddLCAkZFsnUG9zdCddWydVcGRhdGVUaW1lJ11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0WydQb3N0J119IEFERCB7JGRbJ1Bvc3QnXVsnVXBkYXRlVGltZSddWzBdfSBpbnRlZ2VyIE5PVCBOVUxMIERFRkFVTFQgMDsiKTsNCiAgICB9DQoNCiAgICBpZiAoJHpicC0+b3B0aW9uWydaQ19MQVNUX1ZFUlNJT04nXSA8IDE2MjMxNSAmJiAkZGItPnR5cGUgPT0gJ215c3FsJykgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0WydQb3N0J119IE1PRElGWSAgYHskZFsnUG9zdCddWydUeXBlJ11bMF19YCBJTlQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnOyIpOw0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0WydUYWcnXX0gTU9ESUZZICBgeyRkWydUYWcnXVsnVHlwZSddWzBdfWAgSU5UKDExKSBOT1QgTlVMTCBERUZBVUxUICcwJzsiKTsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdFsnQ2F0ZWdvcnknXX0gTU9ESUZZICBgeyRkWydDYXRlZ29yeSddWydUeXBlJ11bMF19YCBJTlQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnOyIpOw0KICAgIH0NCg0KICAgIC8vMTcyMzE1DQogICAgJG9sZCA9IHVwZGF0ZWRiX2NoZWNrZXhpc3QoJHRbJ1RhZyddLCAkZFsnVGFnJ11bJ0dyb3VwJ11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0YWJsZVsnVGFnJ119IEFERCAgeyRkWydUYWcnXVsnR3JvdXAnXVswXX0gVkFSQ0hBUigyNTApIE5PVCBOVUxMIERFRkFVTFQgJyc7Iik7DQogICAgfQ0KICAgICRvbGQgPSB1cGRhdGVkYl9jaGVja2V4aXN0KCR0WydDYXRlZ29yeSddLCAkZFsnQ2F0ZWdvcnknXVsnR3JvdXAnXVswXSk7DQogICAgaWYgKCRvbGQgPT09IGZhbHNlKSB7DQogICAgICAgIEAkZGItPlF1ZXJ5KCJBTFRFUiBUQUJMRSB7JHRhYmxlWydDYXRlZ29yeSddfSBBREQgIHskZFsnQ2F0ZWdvcnknXVsnR3JvdXAnXVswXX0gVkFSQ0hBUigyNTApIE5PVCBOVUxMIERFRkFVTFQgJyc7Iik7DQogICAgfQ0KDQogICAgLy8xNzIzMzANCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnTWVtYmVyJ10sICRkWydNZW1iZXInXVsnQ3JlYXRlVGltZSddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdFsnTWVtYmVyJ119IEFERCB7JGRbJ01lbWJlciddWydDcmVhdGVUaW1lJ11bMF19IGludGVnZXIgTk9UIE5VTEwgREVGQVVMVCAwOyIpOw0KICAgIH0NCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnTWVtYmVyJ10sICRkWydNZW1iZXInXVsnVXBkYXRlVGltZSddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdFsnTWVtYmVyJ119IEFERCB7JGRbJ01lbWJlciddWydVcGRhdGVUaW1lJ11bMF19IGludGVnZXIgTk9UIE5VTEwgREVGQVVMVCAwOyIpOw0KICAgIH0NCg0KICAgIC8vMTcyODAwDQogICAgQCRkYi0+UXVlcnkoIlVQREFURSB7JHRbJ1Bvc3QnXX0gU0VUIHskZFsnUG9zdCddWydVcGRhdGVUaW1lJ11bMF19ID0geyRkWydQb3N0J11bJ1Bvc3RUaW1lJ11bMF19IFdIRVJFIHskZFsnUG9zdCddWydVcGRhdGVUaW1lJ11bMF19ID0gMDsiKTsNCg0KICAgICR6YnAtPm9wdGlvblsnWkNfTEFTVF9WRVJTSU9OJ10gPSBaQ19MQVNUX1ZFUlNJT047DQogICAgJHpicC0+U2F2ZU9wdGlvbigpOw0KfQ0KDQppZiAoJHpicC0+dmVyc2lvbiA+PSBaQ19MQVNUX1ZFUlNJT04gJiYgKGludCkgJHpicC0+b3B0aW9uWydaQ19MQVNUX1ZFUlNJT04nXSA8IFpDX0xBU1RfVkVSU0lPTikgew0KICAgIHVwZGF0ZWRiKCk7DQogICAgaWYgKGlzc2V0KCRfR0VUWyd1cGRhdGVkYiddKSkgew0KICAgICAgICBlY2hvICR6YnAtPmxhbmdzLT5tc2ctPm9wZXJhdGlvbl9zdWNjZWVkOw0KICAgIH0gZWxzZSB7DQogICAgICAgIEpzb25SZXR1cm4oJHpicC0+bGFuZ3MtPm1zZy0+b3BlcmF0aW9uX3N1Y2NlZWQpOw0KICAgIH0NCn0NCmRpZTsNCg==</file>
	<file name='zb_system\api\category.php' crc32='23B271C4'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFotQmxvZyB3aXRoIFBIUC4NCiAqDQogKiBAYXV0aG9yICBaLUJsb2dQSFAgVGVhbQ0KICogQHZlcnNpb24gMS4wIDIwMjAtMDgtMTANCiAqLw0KDQovKioNCiAqIOiOt+WPluWIhuexu+S/oeaBr+aOpeWPoy4NCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIGFwaV9jYXRlZ29yeV9nZXQoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgQXBpQ2hlY2tBdXRoKGZhbHNlLCAndmlldycpOw0KDQogICAgJGNhdGVnb3J5ID0gbnVsbDsNCiAgICAkY2F0ZUlkID0gKGludCkgR2V0VmFycygnaWQnKTsNCiAgICAkY2F0ZUFsaWFzID0gR2V0VmFycygnYWxpYXMnKTsNCiAgICAkY2F0ZU5hbWUgPSBHZXRWYXJzKCduYW1lJyk7DQoNCiAgICBpZiAoJGNhdGVJZCA+IDApIHsNCiAgICAgICAgJGNhdGVnb3J5ID0gJHpicC0+R2V0Q2F0ZWdvcnlCeUlEKCRjYXRlSWQpOw0KICAgIH0gZWxzZWlmICgkY2F0ZUFsaWFzICE9PSBudWxsKSB7DQogICAgICAgICRjYXRlZ29yeSA9ICR6YnAtPkdldENhdGVnb3J5QnlBbGlhcygkY2F0ZUFsaWFzKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkY2F0ZWdvcnkgPSAkemJwLT5HZXRDYXRlZ29yeUJ5TmFtZSgkY2F0ZU5hbWUpOw0KICAgIH0NCg0KICAgIEFwaUNoZWNrQXV0aChmYWxzZSwgJHpicC0+R2V0UG9zdFR5cGVfU3ViKCRjYXRlZ29yeS0+VHlwZSwgJ2FjdGlvbnMnLCAndmlldycpKTsNCg0KICAgICRhcnJheSA9IEFwaUdldE9iamVjdEFycmF5KCRjYXRlZ29yeSwgYXJyYXkoJ1VybCcsICdTeW1ib2wnLCAnTGV2ZWwnLCAnU3ltYm9sTmFtZScsICdBbGxDb3VudCcpKTsNCg0KICAgIGlmICgkY2F0ZWdvcnkgJiYgJGNhdGVnb3J5LT5JRCAhPSBudWxsKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgnY2F0ZWdvcnknID0+ICRhcnJheSksDQogICAgICAgICk7DQogICAgfQ0KDQogICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAnY29kZScgPT4gNDA0LA0KICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnZXJyb3InXVsnOTcnXSwNCiAgICApOw0KfQ0KDQovKioNCiAqIOaWsOWini/kv67mlLnliIbnsbvmjqXlj6MuDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBhcGlfY2F0ZWdvcnlfcG9zdCgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICBBcGlDaGVja0F1dGgodHJ1ZSwgJ0NhdGVnb3J5UHN0Jyk7DQoNCiAgICB0cnkgew0KICAgICAgICAkY2F0ZWdvcnkgPSBQb3N0Q2F0ZWdvcnkoKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQoNCiAgICAgICAgJGFycmF5ID0gQXBpR2V0T2JqZWN0QXJyYXkoJGNhdGVnb3J5LCBhcnJheSgnVXJsJywgJ1N5bWJvbCcsICdMZXZlbCcsICdTeW1ib2xOYW1lJywgJ0FsbENvdW50JykpOw0KDQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX3N1Y2NlZWQnXSwNCiAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgnY2F0ZWdvcnknID0+ICRhcnJheSksDQogICAgICAgICk7DQogICAgfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA1MDAsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXSAuICcgJyAuICRlLT5nZXRNZXNzYWdlKCksDQogICAgICAgICk7DQogICAgfQ0KDQogICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9zdWNjZWVkJ10sDQogICAgKTsNCn0NCg0KLyoqDQogKiDliKDpmaTliIbnsbvmjqXlj6MuDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBhcGlfY2F0ZWdvcnlfZGVsZXRlKCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaVZlcmlmeUNTUkYodHJ1ZSk7DQogICAgQXBpQ2hlY2tBdXRoKHRydWUsICdDYXRlZ29yeURlbCcpOw0KDQogICAgdHJ5IHsNCiAgICAgICAgaWYgKCR6YnAtPkdldENhdGVnb3J5QnlJRCgoaW50KSBHZXRWYXJzKCdpZCcpKS0+SUQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAgICAgICAgICdjb2RlJyA9PiA0MDQsDQogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ2Vycm9yJ11bJzk3J10sDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgICAgIGlmICghRGVsQ2F0ZWdvcnkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX2ZhaWxlZCddLA0KICAgICAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2lkJyA9PiBHZXRWYXJzKCdpZCcpLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA1MDAsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXSAuICcgJyAuICRlLT5nZXRNZXNzYWdlKCksDQogICAgICAgICk7DQogICAgfQ0KDQogICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCg0KICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydvcGVyYXRpb25fc3VjY2VlZCddLA0KICAgICk7DQp9DQoNCi8qKg0KICog5YiX5Ye65YiG57G75o6l5Y+jLg0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqLw0KZnVuY3Rpb24gYXBpX2NhdGVnb3J5X2xpc3QoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHR5cGUgPSAoaW50KSBHZXRWYXJzKCd0eXBlJyk7DQogICAgJG1uZyA9IChpbnQpIHN0cnRvbG93ZXIoKHN0cmluZykgR2V0VmFycygnbWFuYWdlJykpOyAvLyZtYW5hZ2U9MQ0KICAgICRyb290aWQgPSBHZXRWYXJzKCdyb290aWQnKTsNCiAgICBpZiAoIWlzX251bGwoJHJvb3RpZCkpIHsNCiAgICAgICAgJHJvb3RpZCA9IChpbnQpICRyb290aWQ7DQogICAgfQ0KICAgICRwYXJlbnRpZCA9IEdldFZhcnMoJ3BhcmVudGlkJyk7DQogICAgaWYgKCFpc19udWxsKCRwYXJlbnRpZCkpIHsNCiAgICAgICAgJHBhcmVudGlkID0gKGludCkgJHBhcmVudGlkOw0KICAgIH0NCg0KICAgICRsaW1pdENvdW50ID0gJHpicC0+b3B0aW9uWydaQ19NQU5BR0VfQ09VTlQnXTsNCg0KICAgIC8vIOadg+mZkOmqjOivgQ0KICAgIC8v5qOA5p+l566h55CG5qih5byP5p2D6ZmQDQogICAgaWYgKCRtbmcgIT0gMCkgew0KICAgICAgICAvL+ajgOafpeeuoeeQhuaooeW8j+adg+mZkA0KICAgICAgICBBcGlDaGVja0F1dGgodHJ1ZSwgJ0NhdGVnb3J5TW5nJyk7DQogICAgICAgIC8vQXBpQ2hlY2tBdXRoKHRydWUsICdDYXRlZ29yeUFsbCcpOw0KDQogICAgICAgICRsaW1pdENvdW50ID0gJHpicC0+b3B0aW9uWydaQ19NQU5BR0VfQ09VTlQnXTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAvLyDpu5jorqTpnZ7nrqHnkIbmqKHlvI8NCiAgICAgICAgQXBpQ2hlY2tBdXRoKGZhbHNlLCAndmlldycpOw0KICAgICAgICAkbGltaXRDb3VudCA9ICR6YnAtPm9wdGlvblsnWkNfTUFOQUdFX0NPVU5UJ107DQogICAgfQ0KDQogICAgJGZpbHRlciA9IEFwaUdldFJlcXVlc3RGaWx0ZXIoDQogICAgICAgICRsaW1pdENvdW50LA0KICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICdJRCcgPT4gJ2NhdGVfSUQnLA0KICAgICAgICAgICAgJ09yZGVyJyA9PiAnY2F0ZV9PcmRlcicsDQogICAgICAgICAgICAnQ291bnQnID0+ICdjYXRlX0NvdW50JywNCiAgICAgICAgICAgICdHcm91cCcgPT4gJ2NhdGVfR3JvdXAnLA0KICAgICAgICApDQogICAgKTsNCg0KICAgICR3aGVyZVtdID0gYXJyYXkoJz0nLCAnY2F0ZV9UeXBlJywgJHR5cGUpOw0KICAgIGlmICghaXNfbnVsbCgkcm9vdGlkKSkgew0KICAgICAgICAkd2hlcmVbXSA9IGFycmF5KCc9JywgJ2NhdGVfUm9vdElEJywgJHJvb3RpZCk7DQogICAgfQ0KICAgIGlmICghaXNfbnVsbCgkcGFyZW50aWQpKSB7DQogICAgICAgICR3aGVyZVtdID0gYXJyYXkoJz0nLCAnY2F0ZV9QYXJlbnRJRCcsICRwYXJlbnRpZCk7DQogICAgfQ0KICAgICRvcmRlciA9ICRmaWx0ZXJbJ29yZGVyJ107DQogICAgJGxpbWl0ID0gJGZpbHRlclsnbGltaXQnXTsNCiAgICAkb3B0aW9uID0gJGZpbHRlclsnb3B0aW9uJ107DQoNCiAgICAkbGlzdEFyciA9IEFwaUdldE9iamVjdEFycmF5TGlzdCgNCiAgICAgICAgJHpicC0+R2V0Q2F0ZWdvcnlMaXN0KCcqJywgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbiksDQogICAgICAgIGFycmF5KCdVcmwnLCAnU3ltYm9sJywgJ0xldmVsJywgJ1N5bWJvbE5hbWUnLCAnQWxsQ291bnQnKQ0KICAgICk7DQoNCiAgICAkcGFnaW5hdGlvbkFyciA9IEFwaUdldFBhZ2ViYXJJbmZvKCRvcHRpb24pOw0KDQogICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAnZGF0YScgPT4gYXJyYXkoDQogICAgICAgICAgICAnbGlzdCcgPT4gJGxpc3RBcnIsDQogICAgICAgICAgICAncGFnZWJhcicgPT4gJHBhZ2luYXRpb25BcnIsDQogICAgICAgICksDQogICAgKTsNCn0NCg==</file>
	<file name='zb_system\api\comment.php' crc32='87B8ED16'  dt:dt='bin.base64'></file>
	<file name='zb_system\api\member.php' crc32='4672F350'  dt:dt='bin.base64'></file>
	<file name='zb_system\api\post.php' crc32='3A8914FE'  dt:dt='bin.base64'></file>
	<file name='zb_system\api\system.php' crc32='A99553C9'  dt:dt='bin.base64'></file>
	<file name='zb_system\api\tag.php' crc32='D0E335C0'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFotQmxvZyB3aXRoIFBIUC4NCiAqDQogKiBAYXV0aG9yICBaLUJsb2dQSFAgVGVhbQ0KICogQHZlcnNpb24gMS4wIDIwMjAtMDctMDMNCiAqLw0KDQovKioNCiAqIOiOt+WPluagh+etvuS/oeaBr+aOpeWPoy4NCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIGFwaV90YWdfZ2V0KCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaUNoZWNrQXV0aChmYWxzZSwgJ3ZpZXcnKTsNCg0KICAgICR0YWcgPSBudWxsOw0KICAgICR0YWdJZCA9IChpbnQpIEdldFZhcnMoJ2lkJyk7DQogICAgJHRhZ0FsaWFzID0gR2V0VmFycygnYWxpYXMnKTsNCiAgICAkdGFnTmFtZSA9IEdldFZhcnMoJ25hbWUnKTsNCg0KICAgIGlmICgkdGFnSWQgPiAwKSB7DQogICAgICAgICR0YWcgPSAkemJwLT5HZXRUYWdCeUlEKCR0YWdJZCk7DQogICAgfSBlbHNlaWYgKCR0YWdBbGlhcyAhPT0gbnVsbCkgew0KICAgICAgICAkdGFnID0gJHpicC0+R2V0VGFnQnlBbGlhcygkdGFnQWxpYXMpOw0KICAgIH0gZWxzZSB7DQogICAgICAgICR0YWcgPSAkemJwLT5HZXRUYWdCeU5hbWUoJHRhZ05hbWUpOw0KICAgIH0NCg0KICAgICRhcnJheSA9IEFwaUdldE9iamVjdEFycmF5KCR0YWcsIGFycmF5KCdVcmwnLCAnVGVtcGxhdGUnKSk7DQoNCiAgICBpZiAoJHRhZyAmJiAkdGFnLT5JRCAhPSBudWxsKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgndGFnJyA9PiAkYXJyYXkpLA0KICAgICAgICApOw0KICAgIH0NCg0KICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgJ2NvZGUnID0+IDQwNCwNCiAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ2Vycm9yJ11bJzk3J10sDQogICAgKTsNCn0NCg0KLyoqDQogKiDmlrDlop4v5L+u5pS55qCH562+5o6l5Y+jLg0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqLw0KZnVuY3Rpb24gYXBpX3RhZ19wb3N0KCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVGFnUHN0Jyk7DQoNCiAgICB0cnkgew0KICAgICAgICAkdGFnID0gUG9zdFRhZygpOw0KICAgICAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCg0KICAgICAgICAkYXJyYXkgPSBBcGlHZXRPYmplY3RBcnJheSgkdGFnLCBhcnJheSgnVXJsJykpOw0KDQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX3N1Y2NlZWQnXSwNCiAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgndGFnJyA9PiAkYXJyYXkpLA0KICAgICAgICApOw0KICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgew0KICAgICAgICByZXR1cm4gYXJyYXkoDQogICAgICAgICAgICAnY29kZScgPT4gNTAwLA0KICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydvcGVyYXRpb25fZmFpbGVkJ10gLiAnICcgLiAkZS0+Z2V0TWVzc2FnZSgpLA0KICAgICAgICApOw0KICAgIH0NCg0KICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydvcGVyYXRpb25fc3VjY2VlZCddLA0KICAgICk7DQp9DQoNCi8qKg0KICog5Yig6Zmk5qCH562+5o6l5Y+jLg0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqLw0KZnVuY3Rpb24gYXBpX3RhZ19kZWxldGUoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgQXBpVmVyaWZ5Q1NSRih0cnVlKTsNCiAgICBBcGlDaGVja0F1dGgodHJ1ZSwgJ1RhZ0RlbCcpOw0KDQogICAgaWYgKCR6YnAtPkdldFRhZ0J5SUQoKGludCkgR2V0VmFycygnaWQnLCAnR0VUJykpLT5JRCA9PSAwKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA0MDQsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnZXJyb3InXVsnOTcnXSwNCiAgICAgICAgKTsNCiAgICB9DQogICAgaWYgKCFEZWxUYWcoKSkgew0KICAgICAgICByZXR1cm4gYXJyYXkoDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXSwNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICAkemJwLT5CdWlsZE1vZHVsZSgpOw0KICAgICR6YnAtPlNhdmVDYWNoZSgpOw0KDQogICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9zdWNjZWVkJ10sDQogICAgKTsNCn0NCg0KLyoqDQogKiDliJflh7rmoIfnrb7mjqXlj6MuDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBhcGlfdGFnX2xpc3QoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHR5cGUgPSAoaW50KSBHZXRWYXJzKCd0eXBlJyk7DQogICAgJG1uZyA9IChpbnQpIHN0cnRvbG93ZXIoKHN0cmluZykgR2V0VmFycygnbWFuYWdlJykpOyAvLyZtYW5hZ2U9MQ0KDQogICAgJHdoZXJlID0gYXJyYXkoKTsNCiAgICAkd2hlcmVbXSA9IGFycmF5KCc9JywgJ3RhZ19UeXBlJywgJHR5cGUpOw0KDQogICAgLy8g5p2D6ZmQ6aqM6K+BDQogICAgLy/mo4Dmn6XnrqHnkIbmqKHlvI/mnYPpmZANCiAgICBpZiAoJG1uZyAhPSAwKSB7DQogICAgICAgIC8v5qOA5p+l566h55CG5qih5byP5p2D6ZmQDQogICAgICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVGFnTW5nJyk7DQogICAgICAgIC8vQXBpQ2hlY2tBdXRoKHRydWUsICdUYWdBbGwnKTsNCg0KICAgICAgICAkbGltaXRDb3VudCA9ICR6YnAtPm9wdGlvblsnWkNfTUFOQUdFX0NPVU5UJ107DQogICAgfSBlbHNlIHsNCiAgICAgICAgLy8g6buY6K6k6Z2e566h55CG5qih5byPDQogICAgICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAndmlldycpOw0KICAgICAgICAkbGltaXRDb3VudCA9ICR6YnAtPm9wdGlvblsnWkNfTUFOQUdFX0NPVU5UJ107DQogICAgfQ0KDQogICAgJGZpbHRlciA9IEFwaUdldFJlcXVlc3RGaWx0ZXIoDQogICAgICAgICRsaW1pdENvdW50LA0KICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICdJRCcgPT4gJ3RhZ19JRCcsDQogICAgICAgICAgICAnT3JkZXInID0+ICd0YWdfT3JkZXInLA0KICAgICAgICAgICAgJ0NvdW50JyA9PiAndGFnX0NvdW50JywNCiAgICAgICAgKQ0KICAgICk7DQogICAgJG9yZGVyID0gJGZpbHRlclsnb3JkZXInXTsNCiAgICAkbGltaXQgPSAkZmlsdGVyWydsaW1pdCddOw0KICAgICRvcHRpb24gPSAkZmlsdGVyWydvcHRpb24nXTsNCg0KICAgICRsaXN0QXJyID0gQXBpR2V0T2JqZWN0QXJyYXlMaXN0KA0KICAgICAgICAkemJwLT5HZXRUYWdMaXN0KCcqJywgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbiksDQogICAgICAgIGFycmF5KCdVcmwnLCAnVGVtcGxhdGUnKQ0KICAgICk7DQogICAgJHBhZ2luYXRpb25BcnIgPSBBcGlHZXRQYWdlYmFySW5mbygkb3B0aW9uKTsNCg0KICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgJ2RhdGEnID0+IGFycmF5KA0KICAgICAgICAgICAgJ2xpc3QnID0+ICRsaXN0QXJyLA0KICAgICAgICAgICAgJ3BhZ2ViYXInID0+ICRwYWdpbmF0aW9uQXJyLA0KICAgICAgICApLA0KICAgICk7DQp9DQo=</file>
	<file name='zb_system\api\upload.php' crc32='C6E358'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFotQmxvZyB3aXRoIFBIUC4NCiAqDQogKiBAYXV0aG9yICBaLUJsb2dQSFAgVGVhbQ0KICogQHZlcnNpb24gMS4wIDIwMjAtMDctMDMNCiAqLw0KDQovKioNCiAqIOiOt+WPlumZhOS7tuS/oeaBr+aOpeWPoy4NCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIGFwaV91cGxvYWRfZ2V0KCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVXBsb2FkTW5nJyk7DQoNCiAgICAkdXBsb2FkSWQgPSAoaW50KSBHZXRWYXJzKCdpZCcpOw0KDQogICAgaWYgKCR1cGxvYWRJZCA+IDApIHsNCiAgICAgICAgJHVwbG9hZCA9ICR6YnAtPkdldFVwbG9hZEJ5SUQoJHVwbG9hZElkKTsNCg0KICAgICAgICBpZiAoJHVwbG9hZC0+QXV0aG9ySUQgIT0gJHpicC0+dXNlci0+SUQpIHsNCiAgICAgICAgICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVXBsb2FkQWxsJyk7DQogICAgICAgIH0NCg0KICAgICAgICAkdXBsb2FkRGF0YSA9IEFwaUdldE9iamVjdEFycmF5KA0KICAgICAgICAgICAgJHVwbG9hZCwNCiAgICAgICAgICAgIGFycmF5KCdVcmwnKSwNCiAgICAgICAgICAgIGFycmF5KCksDQogICAgICAgICAgICBBcGlHZXRBbmRGaWx0ZXJSZWxhdGlvblF1ZXJ5KA0KICAgICAgICAgICAgICAgIGFycmF5KA0KICAgICAgICAgICAgICAgICAgICAnQXV0aG9yJyA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcl9wcm9wcycgPT4gYXJyYXkoJ1VybCcsICdUZW1wbGF0ZScsICdBdmF0YXInLCAnU3RhdGljTmFtZScpLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZV9wcm9wcycgPT4gYXJyYXkoJ0d1aWQnLCAnUGFzc3dvcmQnLCAnSVAnKQ0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICkNCiAgICAgICAgKTsNCg0KICAgICAgICBpZiAoJHVwbG9hZCAmJiAkdXBsb2FkLT5JRCAhPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgndXBsb2FkJyA9PiAkdXBsb2FkRGF0YSwpLA0KICAgICAgICAgICAgKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgJ2NvZGUnID0+IDQwNCwNCiAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ2Vycm9yJ11bJzk3J10sDQogICAgKTsNCn0NCg0KLyoqDQogKiDmlrDlop7pmYTku7bmjqXlj6MuDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBhcGlfdXBsb2FkX3Bvc3QoKQ0Kew0KICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVXBsb2FkUHN0Jyk7DQoNCiAgICB0cnkgew0KICAgICAgICAkdXBsb2FkID0gUG9zdFVwbG9hZCgpOw0KDQogICAgICAgICRhcnJheSA9IEFwaUdldE9iamVjdEFycmF5KCR1cGxvYWQsIGFycmF5KCdVcmwnKSk7DQoNCiAgICAgICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydvcGVyYXRpb25fc3VjY2VlZCddLA0KICAgICAgICAgICAgJ2RhdGEnID0+IGFycmF5KCd1cGxvYWQnID0+ICRhcnJheSksDQogICAgICAgICk7DQogICAgfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA1MDAsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXSAuICcgJyAuICRlLT5nZXRNZXNzYWdlKCksDQogICAgICAgICk7DQogICAgfQ0KfQ0KDQovKioNCiAqIOWIoOmZpOmZhOS7tuaOpeWPoy4NCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIGFwaV91cGxvYWRfZGVsZXRlKCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVXBsb2FkRGVsJyk7DQoNCiAgICBBcGlWZXJpZnlDU1JGKHRydWUpOw0KDQogICAgaWYgKCR6YnAtPkdldFVwbG9hZEJ5SUQoKGludCkgR2V0VmFycygnaWQnLCAnR0VUJykpLT5JRCA9PSAwKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA0MDQsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnZXJyb3InXVsnOTcnXSwNCiAgICAgICAgKTsNCiAgICB9DQogICAgaWYgKERlbFVwbG9hZCgpKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX3N1Y2NlZWQnXSwNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICByZXR1cm4gYXJyYXkoDQogICAgICAgICdjb2RlJyA9PiA1MDAsDQogICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX2ZhaWxlZCddLA0KICAgICk7DQp9DQoNCi8qKg0KICog5YiX5Ye66ZmE5Lu25o6l5Y+jLg0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqLw0KZnVuY3Rpb24gYXBpX3VwbG9hZF9saXN0KCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnVXBsb2FkTW5nJyk7DQoNCiAgICAkYXV0aElkID0gKGludCkgR2V0VmFycygnYXV0aG9yX2lkJyk7DQogICAgJHBvc3RJZCA9IChpbnQpIEdldFZhcnMoJ3Bvc3RfaWQnKTsNCg0KICAgIC8vIOe7hOe7h+afpeivouadoeS7tg0KICAgICR3aGVyZSA9IGFycmF5KCk7DQoNCiAgICBpZiAoISR6YnAtPkNoZWNrUmlnaHRzKCdVcGxvYWRBbGwnKSkgew0KICAgICAgICBpZiAoJGF1dGhJZCA9PSAkemJwLT51c2VyLT5JRCkgew0KICAgICAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnPScsICd1bF9BdXRob3JJRCcsICRhdXRoSWQpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnPScsICd1bF9BdXRob3JJRCcsICR6YnAtPnVzZXItPklEKTsNCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIGlmICgkYXV0aElkID4gMCkgew0KICAgICAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnPScsICd1bF9BdXRob3JJRCcsICRhdXRoSWQpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKCEkemJwLT5DaGVja1JpZ2h0cygnVXBsb2FkQWxsJykpIHsNCiAgICAgICAgJHBvc3QgPSAkemJwLT5HZXRQb3N0QnlJRCgkcG9zdElkKTsNCiAgICAgICAgaWYgKCRwb3N0LT5BdXRob3JJRCA9PSAkemJwLT51c2VyLT5JRCkgew0KICAgICAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnPScsICd1bF9Mb2dJRCcsICRwb3N0LT5BdXRob3JJRCk7DQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBpZiAoJHBvc3RJZCA+IDApIHsNCiAgICAgICAgICAgICR3aGVyZVtdID0gYXJyYXkoJz0nLCAndWxfTG9nSUQnLCAkcG9zdElkKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgICRmaWx0ZXIgPSBBcGlHZXRSZXF1ZXN0RmlsdGVyKA0KICAgICAgICAkemJwLT5vcHRpb25bJ1pDX01BTkFHRV9DT1VOVCddLA0KICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICdJRCcgPT4gJ3VsX0lEJywNCiAgICAgICAgICAgICdQb3N0VGltZScgPT4gJ3VsX1Bvc3RUaW1lJywNCiAgICAgICAgICAgICdEb3duTnVtcycgPT4gJ3VsX0Rvd25OdW1zJw0KICAgICAgICApDQogICAgKTsNCiAgICAkb3JkZXIgPSAkZmlsdGVyWydvcmRlciddOw0KICAgICRsaW1pdCA9ICRmaWx0ZXJbJ2xpbWl0J107DQogICAgJG9wdGlvbiA9ICRmaWx0ZXJbJ29wdGlvbiddOw0KDQogICAgJGRhdGEgPSBhcnJheSgNCiAgICAgICAgYXJyYXkoDQogICAgICAgICAgICAnbGlzdCcgPT4gQXBpR2V0T2JqZWN0QXJyYXlMaXN0KA0KICAgICAgICAgICAgICAgICR6YnAtPkdldFVwbG9hZExpc3QoJyonLCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKSwNCiAgICAgICAgICAgICAgICBhcnJheSgnVXJsJyksDQogICAgICAgICAgICAgICAgYXJyYXkoKSwNCiAgICAgICAgICAgICAgICBBcGlHZXRBbmRGaWx0ZXJSZWxhdGlvblF1ZXJ5KA0KICAgICAgICAgICAgICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3InID0+IGFycmF5KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcl9wcm9wcycgPT4gYXJyYXkoJ1VybCcsICdUZW1wbGF0ZScsICdBdmF0YXInLCAnU3RhdGljTmFtZScpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZW1vdmVfcHJvcHMnID0+IGFycmF5KCdHdWlkJywgJ1Bhc3N3b3JkJywgJ0lQJykNCiAgICAgICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICApLA0KICAgICAgICAgICAgJ3BhZ2luYXRpb24nID0+IEFwaUdldFBhZ2ViYXJJbmZvKCRvcHRpb24pLA0KICAgICAgICApDQogICAgKTsNCg0KICAgIHJldHVybiBjb21wYWN0KCdkYXRhJyk7DQp9DQo=</file>
	<file name='zb_system\css\admin.css' crc32='3D9A8C17'  dt:dt='bin.base64'>77u/QGNoYXJzZXQgInV0Zi04IjsNCg0KLyoNCuS9nOiAhe+8muaWsOmynOS6ug0K5Zyw5Z2A77yaaHR0cDovL3d3dy5odG1saXQuY29tLmNuDQrpgq7nrrHvvJp1MmxlaUB5YWhvby5jb20uY24NCiAgICAgeGlueHJAbXNuLmNvbQ0KKi8NCiogeyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH0NCmJvZHkgeyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IGZvbnQtZmFtaWx5OiAiTWljcm9zb2Z0IFlhSGVpIiwgU1RIZWl0aSwgIkhpcmFnaW5vIFNhbnMgR0IiLCAiV2VuUXVhbllpIE1pY3JvIEhlaSIsICJIZWl0aSBTQyIsIE5TaW1TdW4sIFNpbVN1biwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsgYmFja2dyb3VuZDogI2ZmZmZmZjsgY29sb3I6ICM0NDQ0NDQ7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDEuNSB9DQpkaXYsDQpoMSwNCmgyLA0KaDMsDQpoNCwNCnAsDQpmb3JtLA0KdWwsDQpsYWJlbCwNCmlucHV0LA0KdGV4dGFyZWEsDQppbWcsDQpzcGFuIHsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwOyB9DQp0YWJsZSB7IGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7IH0NCmEgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGNvbG9yOiAjMDAzMzk5OyB9DQphOmhvdmVyIHsgY29sb3I6ICM5OTAwMDA7IH0NCnVsIHsgcGFkZGluZzogMDsgbWFyZ2luOiAwOyB9DQpsaSB7IGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsgfQ0KLmNsZWFyIHsgY2xlYXI6IGJvdGg7IH0NCmltZyB7IGJvcmRlcjogbm9uZTsgfQ0KDQovKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLw0KLmJnIHsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IHotaW5kZXg6IC0xMDAwOyBoZWlnaHQ6IDI2MHB4OyB3aWR0aDogMTAwJTsgYmFja2dyb3VuZDogIzNhNmVhNTsgfQ0KI3dyYXBwZXIgeyB3aWR0aDogMTAwJTsgcGFkZGluZzogMDsgbWFyZ2luOiAwIGF1dG87IH0NCi5sb2dvIHsgd2lkdGg6IDIwMHB4OyBoZWlnaHQ6IDcwcHg7IG1hcmdpbjogMTcwcHggYXV0byA2MHB4IGF1dG87IH0NCi5sb2dvIGltZyB7IHdpZHRoOiAyMDBweDsgaGVpZ2h0OiA3MHB4OyBiYWNrZ3JvdW5kOiB1cmwoIi4uL2ltYWdlL2FkbWluL2xvZ29fd2hpdGUuc3ZnIik7IH0NCmlucHV0IHsgZmxvYXQ6IGxlZnQ7IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH0NCmlucHV0W3R5cGU9InRleHQiXSxpbnB1dFt0eXBlPSJwYXNzd29yZCJdIHsgYm9yZGVyOiAxcHggc29saWQgIzNhNmVhNTsgfQ0KaW5wdXRbdHlwZT0iY2hlY2tib3giXSB7IG1hcmdpbjogOHB4IDAgMCAwOyBwYWRkaW5nOiAwOyB9DQpsYWJlbCB7IGxpbmUtaGVpZ2h0OiAzMHB4OyBmbG9hdDogbGVmdDsgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tOyBwYWRkaW5nOiAwIDVweCAwIDVweDsgfQ0KDQoubG9naW4geyB3aWR0aDogNjAwcHg7IG1pbi1oZWlnaHQ6IDEwMHB4OyBtYXJnaW46IDAgYXV0bzsgcGFkZGluZy1sZWZ0OiAwcHg7IH0NCi5sb2dpbiBkbCB7IGhlaWdodDogNTBweDtjbGVhcjpib3RoOyB9DQoubG9naW4gZGQgeyB3aWR0aDogMzAwcHg7IGZsb2F0OiBsZWZ0OyBtYXJnaW4tYm90dG9tOjIwcHg7fQ0KLmxvZ2luIGRkLmZsb2F0cmlnaHQge2Zsb2F0OiByaWdodDt9DQoubG9naW4gZGQuY2hlY2tib3ggeyBtYXJnaW4tbGVmdDogMTAwcHg7IHdpZHRoOiAyMDBweDsgdGV4dC1hbGlnbjogbGVmdDsgfQ0KLmxvZ2luIGRkLnN1Ym1pdCAsLmxvZ2luIGRkLnBhc3N3b3JkICwubG9naW4gZGQudXNlcm5hbWUgeyBvdmVyZmxvdzogaGlkZGVuOyB3aWR0aDogMzAwcHg7IH0NCi5sb2dpbiBsYWJlbCB7IHdpZHRoOiAxMDBweDsgdGV4dC1hbGlnbjogcmlnaHQ7b3ZlcmZsb3cgOmhpZGRlbjt0ZXh0LW92ZXJmbG93IDogY2xpcDt3aGl0ZS1zcGFjZTpub3dyYXA7IH0NCi5sb2dpbiBpbnB1dFt0eXBlPSJjaGVja2JveCJdK2xhYmVsIHt3aWR0aDphdXRvO30NCi5sb2dpbiBpbnB1dFt0eXBlPSJ0ZXh0Il0sLmxvZ2luIGlucHV0W3R5cGU9InBhc3N3b3JkIl17IGZsb2F0OiBsZWZ0OyB3aWR0aDogMjAwcHg7IGhlaWdodDogMi40ZW07IHBhZGRpbmc6IDAuMWVtIDVweDsgbGluZS1oZWlnaHQ6IDIuNGVtOyB9DQoNCi5idXR0b24geyBmbG9hdDogcmlnaHQ7IGNvbG9yOiAjZmZmZmZmOyBmb250LXNpemU6IDFlbTsgd2lkdGg6IDcwcHg7IGhlaWdodDogMzJweDsgYmFja2dyb3VuZDogIzNhNmVhNTsgYm9yZGVyOiAxcHggc29saWQgIzMzOTlDQzsgY3Vyc29yOiBwb2ludGVyOyB9DQouYnV0dG9uOmhvdmVyIHsgY29sb3I6ICNmZmZmZmY7IGJhY2tncm91bmQ6ICMzMzk5Y2M7IGN1cnNvcjogcG9pbnRlcjsgfQ0KLmRpdkhlYWRlciB7IGhlaWdodDogYXV0bzsgZm9udC13ZWlnaHQ6IGJsb2Q7IGxpbmUtaGVpZ2h0OiAxLjVlbTsgZm9udC1zaXplOiAxLjVlbTsgcGFkZGluZzogMCAwIDEwcHggMDsgYmFja2dyb3VuZDogI0ZGRjsgdGV4dC1hbGlnbjogY2VudGVyOyB9DQoNCmJvZHkuZXJyb3Ige21pbi13aWR0aDogNjQwcHg7IH0NCmJvZHkuZXJyb3IgLmNvbnRlbnQ+ZGl2IHtvdmVyZmxvdzpoaWRkZW47IH0NCmJvZHkuc2hvcnQgLmJnIHsgaGVpZ2h0OiAxNjBweDsgfQ0KYm9keS5zaG9ydCAubG9nbyB7IGhlaWdodDogNzBweDsgd2lkdGg6MjAwcHg7IG1hcmdpbjogNjBweCBhdXRvIDYwcHggYXV0bzsgfQ0KLmxvZ2ludyB7IHdpZHRoOiA3MDBweDsgbWFyZ2luLWJvdHRvbTogMTIwcHg7IH0NCi5sb2dpbncgLmNvbnRlbnQ+ZGl2PnAgeyBmb250LXdlaWdodDogYm9sZDsgZm9udC1zaXplOiAxLjJlbTsgcGFkZGluZzogMTBweDsgYmFja2dyb3VuZDogI2VlZTsgbWFyZ2luLWJvdHRvbTogMTBweDsgfQ0KLmxvZ2ludyAuY29udGVudD5kaXYgeyBwYWRkaW5nLWJvdHRvbTogMjBweDsgfQ0KLmxvZ2ludyBkaXYuZ29iYWNrIHsgcGFkZGluZzogMTBweCAxMHB4IDUwcHggMTBweDsgfQ0KLmxvZ2ludyBkaXYuZ29iYWNrIGEgeyBmb250LXNpemU6IDEuMWVtOyB9DQoubG9naW53IC5jb250ZW50PmRpdj5kaXYgeyBwYWRkaW5nOiAwIDEwcHg7IH0NCg0KQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjgwMHB4KSB7DQogICAgLmJnIHsgaGVpZ2h0OiAxNjBweDsgfQ0KICAgIC5sb2dvIHsgbWFyZ2luLXRvcDogNjBweCB9DQogICAgLmxvZ2luIHsgd2lkdGg6IDMxMHB4OyB9DQogICAgLmxvZ2luIGRkIHsgd2lkdGg6IDMwMHB4OyBmbG9hdDogcmlnaHQ7IHBhZGRpbmc6IDBweCAxMHB4IDBweCAwOyBtYXJnaW4tYm90dG9tOjEwcHg7fQ0KDQogICAgLmxvZ2luIGRkLmNoZWNrYm94IHsgbWFyZ2luLWxlZnQ6IDEwcHg7IHdpZHRoOiAzMDBweDsgZmxvYXQ6IGxlZnQ7IHBhZGRpbmc6IDVweCAwOyB9DQogICAgLmxvZ2luIGRkLnN1Ym1pdCB7IHdpZHRoOiAzMDBweDsgZmxvYXQ6IHJpZ2h0OyBwYWRkaW5nOiA1cHggMDsgbWFyZ2luLXJpZ2h0OiAxMHB4OyB9DQogICAgLmxvZ2luIGRkLnVzZXJuYW1lIGxhYmVsLC5sb2dpbiBkZC5wYXNzd29yZCBsYWJlbCB7IHdpZHRoOiAzMDBweDtjbGVhcjpmbG9hdDt0ZXh0LWFsaWduOiBsZWZ0O30NCiAgICAubG9naW4gaW5wdXRbdHlwZT0idGV4dCJdLC5sb2dpbiBpbnB1dFt0eXBlPSJwYXNzd29yZCJdeyBmbG9hdDogcmlnaHQ7IHdpZHRoOiAyODVweDsgfQ0KICAgIGlucHV0W3R5cGU9ImNoZWNrYm94Il0geyBtYXJnaW46IDhweCAwIDAgNXB4OyB9DQogICAgLmxvZ2ludyB7IHdpZHRoOiA5MCU7IH0NCiAgICAuY29udGVudD5kaXYge292ZXJmbG93OmhpZGRlbjsgfQ0KfQ0KDQp0YWJsZS50YWJsZV9ob3ZlciA+IHRib2R5ID4gdHIgPiB0ZDpob3ZlciwNCnRhYmxlLnRhYmxlX2hvdmVyID4gdGJvZHkgPiB0ciA+IHRoOmhvdmVyLA0KdGFibGUudGFibGVfaG92ZXIgPiB0Ym9keSA+IHRyOmhvdmVyID4gdGQsDQp0YWJsZS50YWJsZV9ob3ZlciA+IHRib2R5ID4gdHI6aG92ZXIgPiB0aCB7YmFja2dyb3VuZC1jb2xvcjogI2ZmZmZkZDt9DQp0YWJsZS50YWJsZV9zdHJpcGVkID4gdGJvZHkgPiB0cjpudGgtb2YtdHlwZShvZGQpIHtiYWNrZ3JvdW5kLWNvbG9yOiAjRjRGNEY0O30NCg0KLmJsb2Rjb2xvcntjb2xvcjojMWQ0YzdkfS5ub3JtYWxjb2xvcntjb2xvcjojM2E2ZWE1fS5saWdodGNvbG9ye2NvbG9yOiNiMGNkZWV9LmhpZ2hjb2xvcntjb2xvcjojMzM5OWNjfS5hbnRpY29sb3J7Y29sb3I6I2Q2MDAwMH0NCi5iZy1ibG9kY29sb3J7YmFja2dyb3VuZC1jb2xvcjojMWQ0YzdkfS5iZy1ub3JtYWxjb2xvcntiYWNrZ3JvdW5kLWNvbG9yOiMzYTZlYTV9LmJnLWxpZ2h0Y29sb3J7YmFja2dyb3VuZC1jb2xvcjojYjBjZGVlfS5iZy1oaWdoY29sb3J7YmFja2dyb3VuZC1jb2xvcjojMzM5OWNjfS5iZy1hbnRpY29sb3J7YmFja2dyb3VuZC1jb2xvcjojZDYwMDAwfQ0K</file>
	<file name='zb_system\css\admin2.css' crc32='8580E973'  dt:dt='bin.base64'></file>
	<file name='zb_system\css\admin3.css' crc32='5ED20DA7'  dt:dt='bin.base64'>QGNoYXJzZXQgInV0Zi04IjsNCg0KLyoNCuWuieijhemhtSBjc3MNCiovDQoqIHsgcGFkZGluZzogMDsgbWFyZ2luOiAwOyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9DQpib2R5IHsgcGFkZGluZzogMDsgbWFyZ2luOiAwOyBmb250LWZhbWlseTogIk1pY3Jvc29mdCBZYUhlaSIsIFNUSGVpdGksICJIaXJhZ2lubyBTYW5zIEdCIiwgIldlblF1YW5ZaSBNaWNybyBIZWkiLCAiSGVpdGkgU0MiLCBOU2ltU3VuLCBTaW1TdW4sIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7IGJhY2tncm91bmQ6ICNGRkZGRkY7IGNvbG9yOiAjNDQ0NDQ0OyBmb250LXNpemU6IDE0cHg7IGxpbmUtaGVpZ2h0OiAxLjUgfQ0KLnNldHVwIHsgd2lkdGg6IDEwMDBweDsgaGVpZ2h0OiA0MDBweDsgcGFkZGluZzogNjBweCAwIDAgMDsgbWFyZ2luOiAwIGF1dG87IH0NCmZvbnRbY29sb3I9JyMzRDY5QUEnXSB7IGJhY2tncm91bmQ6ICMzRDY5QUE7IH0NCiNkZGxlZnQgeyBmbG9hdDogbGVmdDsgd2lkdGg6IDM0MHB4OyBoZWlnaHQ6IDQwMHB4OyBmb250LXNpemU6IDFlbTsgbWFyZ2luLXJpZ2h0OiAyMHB4OyB9DQojZGRyaWdodCB7IGZsb2F0OiBsZWZ0OyB3aWR0aDogNjAwcHg7IGhlaWdodDogNDAwcHg7IH0NCmlucHV0LHNlbGVjdHtib3JkZXI6MXB4IHNvbGlkICM5OTk7bGluZS1oZWlnaHQ6IDEuNWVtO2JvcmRlci1yYWRpdXM6MnB4O30NCmlucHV0W3R5cGU9InRleHQiXSwNCmlucHV0W3R5cGU9InBhc3N3b3JkIl0geyBwYWRkaW5nOiAzcHggNXB4OyB9DQppbnB1dFtyZWFkb25seV0geyBiYWNrZ3JvdW5kOiAjZWVlOyBib3JkZXI6IDFweCBzb2xpZCAjY2NjOyB9DQppbnB1dFt0eXBlPSJzdWJtaXQiXSxidXR0b24sDQppbnB1dFt0eXBlPSJidXR0b24iXSB7IGNvbG9yOiAjRkZGRkZGOyBmb250LXNpemU6IDEuMWVtOyBoZWlnaHQ6IDEuOGVtOyBwYWRkaW5nOiAwLjE1ZW0gMmVtIDAuMjBlbSAyZW07bWFyZ2luOiAwLjJlbSAwLjVlbTsgYmFja2dyb3VuZDogIzNhNmVhNTsgYm9yZGVyOiAxcHggc29saWQgIzNhNmVhNTsgY3Vyc29yOiBwb2ludGVyOyB9DQppbnB1dFt0eXBlPSJzdWJtaXQiXTpob3ZlcixpbnB1dFt0eXBlPSJidXR0b24iXTpob3ZlcixidXR0b246aG92ZXJ7YmFja2dyb3VuZDogIzMzOTljYztib3JkZXI6IDFweCBzb2xpZCAjMzM5OWNjO30NCmlucHV0W2Rpc2FibGVkXSwgaW5wdXRbZGlzYWJsZWRdOmhvdmVyeyBiYWNrZ3JvdW5kOiAjZWVlOyBjb2xvcjogIzk5OTsgYm9yZGVyOiAxcHggc29saWQgI2RkZDsgfQ0KI3RpdGxlIHsgY29sb3I6ICMzZDY5YWE7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjM2Q2OWFhOyBmb250LXNpemU6IDEuNWVtOyBmb250LXdlaWdodDogYm9sZGVyOyBwYWRkaW5nLWJvdHRvbTogNXB4OyBtYXJnaW4tYm90dG9tOiA1cHg7IH0NCi50aXRsZSB7IGNvbG9yOiAjM2Q2OWFhOyBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZmZjsgZm9udC1zaXplOiAxLjJlbTsgZm9udC13ZWlnaHQ6IGJvbGRlcjsgcGFkZGluZy10b3A6IDEwcHg7IH0NCiNjb250ZW50IHsgcGFkZGluZzogMTVweCAwIH0NCiNib3R0b20geyB0ZXh0LWFsaWduOiByaWdodDsgcGFkZGluZzogNXB4IDAgMjBweCAwOyB9DQp0ZXh0YXJlYSB7IGhlaWdodDogMzYwcHg7IHdpZHRoOiA2MDBweDsgYm9yZGVyOiBub25lOyB9DQojZGRsZWZ0IGRpdiB7IH0NCiNkZGxlZnQgZGl2IGltZyB7IHdpZHRoOiAxNzVweDsgaGVpZ2h0OiAxMDBweDsgfQ0KI2RkbGVmdCBkaXYgc3Ryb25nIHsgd2lkdGg6IDExNXB4OyB2ZXJ0aWNhbC1hbGlnbjogdG9wOyBsaW5lLWhlaWdodDogMTIwcHg7IGhlaWdodDogMTIwcHg7IGZvbnQtc2l6ZTogMS41ZW07IGNvbG9yOiAjNjY2OyB9DQojZGRsZWZ0ICNoZWFkZXJpbWcgeyB3aWR0aDogMTAwJTsgbWFyZ2luLXRvcDogODBweDsgfQ0KI2RkbGVmdCBiIHsgY29sb3I6ICMzZDY5YWE7IH0NCiNkZGxlZnQgc3BhbiB7IGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7IHBhZGRpbmctYm90dG9tOiAxcHhcOTsgfQ0KcCB7IGxpbmUtaGVpZ2h0OiAyLjVlbTsgY2xlYXI6IGJvdGg7IH0NCiNjb250ZW50IGIgeyBmb250LXdlaWdodDogYmxvZDsgd2lkdGg6IDEyMHB4OyBmbG9hdDogbGVmdDsgfQ0KI2NvbnRlbnQgc21hbGwgeyBmb250LXNpemU6IDAuOWVtOyB9DQpsYWJlbCB7IGN1cnNvcjogcG9pbnRlcjsgfQ0KdGV4dGFyZWF7cGFkZGluZzowLjVlbTtib3gtc2hhZG93OjAgMCAwLjVlbSByZ2JhKDAsMCwwLDAuMik7fQ0KLyrooaggICDmoLwqLw0KdGFibGUgeyBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyBiYWNrZ3JvdW5kOiAjZmZmZmZmOyBsaW5lLWhlaWdodDogMTIwJTtib3gtc2hhZG93OjAgMCAwLjVlbSByZ2JhKDAsMCwwLDAuMik7IH0NCnRkLA0KdGggeyBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZWZlZmVmOyBtYXJnaW46IDA7IHBhZGRpbmc6IDVweCA1cHg7IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH0NCnRkOmxhc3QtY2hpbGR7Ym9yZGVyLXJpZ2h0Om5vbmU7fQ0KdGg6bGFzdC1jaGlsZHtib3JkZXItcmlnaHQ6bm9uZTt9DQoudGFibGVfaG92ZXIgPiB0Ym9keSA+IHRyID4gdGQ6aG92ZXIsDQoudGFibGVfaG92ZXIgPiB0Ym9keSA+IHRyID4gdGg6aG92ZXIsDQoudGFibGVfaG92ZXIgPiB0Ym9keSA+IHRyOmhvdmVyID4gdGQsDQoudGFibGVfaG92ZXIgPiB0Ym9keSA+IHRyOmhvdmVyID4gdGggew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmRkOw0KfQ0KLnRhYmxlX3N0cmlwZWQgPiB0Ym9keSA+IHRyOm50aC1vZi10eXBlKG9kZCkgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjRGNEY0Ow0KfQ0KLnRhYmxlX3N0cmlwZWQgPiB0aGVhZCA+IHRyIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2VkZWRlZDsNCn0NCi5iaW5nbywNCi5lcnJvciB7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgd2lkdGg6IDE2cHg7IGhlaWdodDogMTZweDsgfQ0KLmJpbmdvOmJlZm9yZSB7IGNvbG9yOiBncmVlbjsgY29udGVudDogIlxlYTYyIjtmb250LWZhbWlseTogJ3pibG9nJyFpbXBvcnRhbnQ7IH0NCi5lcnJvcjpiZWZvcmUgeyBjb2xvcjogcmVkOyBjb250ZW50OiAiXGVkNzkiO2ZvbnQtZmFtaWx5OiAnemJsb2cnIWltcG9ydGFudDsgfQ0KDQovKui/myDluqYg5p2hKi8NCi5sZWZ0IHsgZmxvYXQ6IGxlZnQ7IG1hcmdpbjogMTJweCAwOyB9DQoudWktcHJvZ3Jlc3NiYXIgeyB3aWR0aDogMjU2cHg7IGhlaWdodDogMThweDsgfQ0KLnVpLXdpZGdldC1oZWFkZXIgeyBiYWNrZ3JvdW5kOiAjM2Q2OWFhOyB9DQoNCnRhYmxlLnRhYmxlX2hvdmVyID4gdGJvZHkgPiB0ciA+IHRkOmhvdmVyLA0KdGFibGUudGFibGVfaG92ZXIgPiB0Ym9keSA+IHRyID4gdGg6aG92ZXIsDQp0YWJsZS50YWJsZV9ob3ZlciA+IHRib2R5ID4gdHI6aG92ZXIgPiB0ZCwNCnRhYmxlLnRhYmxlX2hvdmVyID4gdGJvZHkgPiB0cjpob3ZlciA+IHRoIHtiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmRkO30NCnRhYmxlLnRhYmxlX3N0cmlwZWQgPiB0Ym9keSA+IHRyOm50aC1vZi10eXBlKG9kZCkge2JhY2tncm91bmQtY29sb3I6ICNGNEY0RjQ7fQ0KDQouYmxvZGNvbG9ye2NvbG9yOiMxZDRjN2R9Lm5vcm1hbGNvbG9ye2NvbG9yOiMzYTZlYTV9LmxpZ2h0Y29sb3J7Y29sb3I6I2IwY2RlZX0uaGlnaGNvbG9ye2NvbG9yOiMzMzk5Y2N9LmFudGljb2xvcntjb2xvcjojZDYwMDAwfQ0KLmJnLWJsb2Rjb2xvcntiYWNrZ3JvdW5kLWNvbG9yOiMxZDRjN2R9LmJnLW5vcm1hbGNvbG9ye2JhY2tncm91bmQtY29sb3I6IzNhNmVhNX0uYmctbGlnaHRjb2xvcntiYWNrZ3JvdW5kLWNvbG9yOiNiMGNkZWV9LmJnLWhpZ2hjb2xvcntiYWNrZ3JvdW5kLWNvbG9yOiMzMzk5Y2N9LmJnLWFudGljb2xvcntiYWNrZ3JvdW5kLWNvbG9yOiNkNjAwMDB9DQo=</file>
	<file name='zb_system\defend\en.php' crc32='6C18FF38'  dt:dt='bin.base64'></file>
	<file name='zb_system\defend\error.php' crc32='B350982F'  dt:dt='bin.base64'></file>
	<file name='zb_system\defend\option.php' crc32='ECDFDC57'  dt:dt='bin.base64'></file>
	<file name='zb_system\defend\posttype_article.php' crc32='CD7FDE4A'  dt:dt='bin.base64'>PD9waHANCg0KcmV0dXJuIGFycmF5ICgNCiAgICAnaWQnID0+IDAsDQogICAgJ25hbWUnID0+ICdhcnRpY2xlJywNCiAgICAnY2xhc3NuYW1lJyA9PiAnUG9zdCcsDQogICAgLy8gIOiHquW3seeahOaooeadvyDliJfooajnmoTmqKHmnb8g5a+55bqU5YiG57G755qE5qih5p2/IOWvueW6lFRhZ+eahOaooeadvyDlr7nlupTkvZzogIXnmoTmqKHmnb8g5pel5pyf5YiX6KGo55qE5qih5p2/IOaQnOe0oumhteeahOaooeadvw0KICAgICd0ZW1wbGF0ZScgPT4gJ3NpbmdsZScsDQogICAgJ2xpc3RfdGVtcGxhdGUnID0+ICdpbmRleCcsDQogICAgJ2NhdGVnb3J5X3RlbXBsYXRlJyA9PiAnaW5kZXgnLA0KICAgICd0YWdfdGVtcGxhdGUnID0+ICdpbmRleCcsDQogICAgJ2F1dGhvcl90ZW1wbGF0ZScgPT4gJ2luZGV4JywNCiAgICAnZGF0ZV90ZW1wbGF0ZScgPT4gJ2luZGV4JywNCiAgICAnc2VhcmNoX3RlbXBsYXRlJyA9PiAnc2VhcmNoJywNCiAgICAvLyAg6Ieq6Lqr6KeE5YiZIOWIl+ihqOinhOWImSDliIbnsbvliJfooajop4TliJkg5L2c6ICF5YiX6KGo6KeE5YiZIOaXpeacn+WIl+ihqOinhOWImSBUYWfliJfooajop4TliJkg5pCc57Si5YiX6KGo6KeE5YiZDQogICAgJ3NpbmdsZV91cmxydWxlJyA9PiAkR0xPQkFMU1snemJwJ10tPm9wdGlvblsnWkNfQVJUSUNMRV9SRUdFWCddLA0KICAgICdsaXN0X3VybHJ1bGUnID0+ICRHTE9CQUxTWyd6YnAnXS0+b3B0aW9uWydaQ19JTkRFWF9SRUdFWCddLA0KICAgICdsaXN0X2NhdGVnb3J5X3VybHJ1bGUnID0+ICRHTE9CQUxTWyd6YnAnXS0+b3B0aW9uWydaQ19DQVRFR09SWV9SRUdFWCddLA0KICAgICdsaXN0X2F1dGhvcl91cmxydWxlJyA9PiAkR0xPQkFMU1snemJwJ10tPm9wdGlvblsnWkNfQVVUSE9SX1JFR0VYJ10sDQogICAgJ2xpc3RfZGF0ZV91cmxydWxlJyA9PiAkR0xPQkFMU1snemJwJ10tPm9wdGlvblsnWkNfREFURV9SRUdFWCddLA0KICAgICdsaXN0X3RhZ191cmxydWxlJyA9PiAkR0xPQkFMU1snemJwJ10tPm9wdGlvblsnWkNfVEFHU19SRUdFWCddLA0KICAgICdzZWFyY2hfdXJscnVsZScgPT4gJEdMT0JBTFNbJ3picCddLT5vcHRpb25bJ1pDX1NFQVJDSF9SRUdFWCddLA0KICAgIC8vICDmnYPpmZDlkI3np7DliIbliKvmmK8g5paw5bu6IOe8lui+kSDliKDpmaQg5o+Q5LqkIOWFrOW8gOWPkeW4gyDnrqHnkIYg5YWo6YOo566h55CGIOafpeeciyDmkJzntKINCiAgICAnYWN0aW9ucycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgJ25ldycgPT4gJ0FydGljbGVOZXcnLA0KICAgICAgJ2VkaXQnID0+ICdBcnRpY2xlRWR0JywNCiAgICAgICdkZWwnID0+ICdBcnRpY2xlRGVsJywNCiAgICAgICdwb3N0JyA9PiAnQXJ0aWNsZVBzdCcsDQogICAgICAncHVibGlzaCcgPT4gJ0FydGljbGVQdWInLA0KICAgICAgJ21hbmFnZScgPT4gJ0FydGljbGVNbmcnLA0KICAgICAgJ2FsbCcgPT4gJ0FydGljbGVBbGwnLA0KICAgICAgJ3ZpZXcnID0+ICd2aWV3JywNCiAgICAgICdzZWFyY2gnID0+ICdzZWFyY2gnLA0KICAgICksDQogICAgJ3JvdXRlcycgPT4gDQogICAgYXJyYXkgKA0KICAgICksDQogICk7DQoNCg0K</file>
	<file name='zb_system\defend\posttype_page.php' crc32='7CA1DB7F'  dt:dt='bin.base64'>PD9waHANCg0KcmV0dXJuIGFycmF5ICgNCiAgICAnaWQnID0+IDEsDQogICAgJ25hbWUnID0+ICdwYWdlJywNCiAgICAnY2xhc3NuYW1lJyA9PiAnUG9zdCcsDQogICAgJ3RlbXBsYXRlJyA9PiAnc2luZ2xlJywNCiAgICAnbGlzdF90ZW1wbGF0ZScgPT4gJ2luZGV4JywNCiAgICAnY2F0ZWdvcnlfdGVtcGxhdGUnID0+ICdpbmRleCcsDQogICAgJ3RhZ190ZW1wbGF0ZScgPT4gJ2luZGV4JywNCiAgICAnYXV0aG9yX3RlbXBsYXRlJyA9PiAnaW5kZXgnLA0KICAgICdkYXRlX3RlbXBsYXRlJyA9PiAnaW5kZXgnLA0KICAgICdzZWFyY2hfdGVtcGxhdGUnID0+ICdzZWFyY2gnLA0KICAgICdzaW5nbGVfdXJscnVsZScgPT4gJEdMT0JBTFNbJ3picCddLT5vcHRpb25bJ1pDX1BBR0VfUkVHRVgnXSwNCiAgICAnbGlzdF91cmxydWxlJyA9PiAnJywNCiAgICAnbGlzdF9jYXRlZ29yeV91cmxydWxlJyA9PiAnJywNCiAgICAnbGlzdF9hdXRob3JfdXJscnVsZScgPT4gJycsDQogICAgJ2xpc3RfZGF0ZV91cmxydWxlJyA9PiAnJywNCiAgICAnbGlzdF90YWdfdXJscnVsZScgPT4gJycsDQogICAgJ3NlYXJjaF91cmxydWxlJyA9PiAnJywNCiAgICAnYWN0aW9ucycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgJ25ldycgPT4gJ1BhZ2VOZXcnLA0KICAgICAgJ2VkaXQnID0+ICdQYWdlRWR0JywNCiAgICAgICdkZWwnID0+ICdQYWdlRGVsJywNCiAgICAgICdwb3N0JyA9PiAnUGFnZVBzdCcsDQogICAgICAncHVibGlzaCcgPT4gJ1BhZ2VQdWInLA0KICAgICAgJ21hbmFnZScgPT4gJ1BhZ2VNbmcnLA0KICAgICAgJ2FsbCcgPT4gJ1BhZ2VBbGwnLA0KICAgICAgJ3ZpZXcnID0+ICd2aWV3JywNCiAgICAgICdzZWFyY2gnID0+ICdzZWFyY2gnLA0KICAgICksDQogICAgJ3JvdXRlcycgPT4gDQogICAgYXJyYXkgKA0KICAgICksDQogICk7DQo=</file>
	<file name='zb_system\defend\routes_post_article.php' crc32='3BFD94E5'  dt:dt='bin.base64'>PD9waHANCg0KcmV0dXJuIGFycmF5ICgNCi8vICDmt7vliqAg5paH56ug6aG15Y2V6aG1IOWKqOaAgei3r+eUsQ0KICAnYWN0aXZlX3Bvc3RfYXJ0aWNsZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3Bvc3R0eXBlJyA9PiAwLA0KICAgICd0eXBlJyA9PiAnYWN0aXZlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9zaW5nbGUnLA0KICAgICdjYWxsJyA9PiAnVmlld1Bvc3QnLA0KICAgICdnZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2lkJywNCiAgICAgIDEgPT4gJ2FsaWFzJywNCiAgICApLA0KICAgICdub3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdjYXRlJywNCiAgICAgIDEgPT4gJ2F1dGgnLA0KICAgICAgMiA9PiAndGFncycsDQogICAgICAzID0+ICdkYXRlJywNCiAgICApLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAndG9fcGVybWFsaW5rJyA9PiB0cnVlLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BjYXRl6aG15YiX6KGoKOW4puWPguaVsCkg5Yqo5oCB6Lev55SxDQogICdhY3RpdmVfcG9zdF9hcnRpY2xlX2xpc3RfY2F0ZWdvcnknID0+IA0KICBhcnJheSAoDQogICAgJ3Bvc3R0eXBlJyA9PiAwLA0KICAgICd0eXBlJyA9PiAnYWN0aXZlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X2NhdGVnb3J5JywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncGFnZScsDQogICAgKSwNCiAgICAnbXVzdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGUnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2lkJywNCiAgICAgIDEgPT4gJ2FsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BhdXRo6aG15YiX6KGoKOW4puWPguaVsCkg5Yqo5oCB6Lev55SxDQogICdhY3RpdmVfcG9zdF9hcnRpY2xlX2xpc3RfYXV0aG9yJyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9hdXRob3InLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdtdXN0X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnYXV0aCcsDQogICAgKSwNCiAgICAnbm90X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroGRhdGXpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF9kYXRlJyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9kYXRlJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncGFnZScsDQogICAgKSwNCiAgICAnbXVzdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2RhdGUnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2lkJywNCiAgICAgIDEgPT4gJ2FsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6B0YWdz6aG15YiX6KGoKOW4puWPguaVsCkg5Yqo5oCB6Lev55SxDQogICdhY3RpdmVfcG9zdF9hcnRpY2xlX2xpc3RfdGFnJyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF90YWcnLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdtdXN0X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAndGFncycsDQogICAgKSwNCiAgICAnbm90X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroOmhteWNlemhtSDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX3NpbmdsZScgPT4gDQogIGFycmF5ICgNCiAgICAncG9zdHR5cGUnID0+IDAsDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9zaW5nbGUnLA0KICAgICdjYWxsJyA9PiAnVmlld1Bvc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncG9zdEBpZCcsDQogICAgICAxID0+ICdwb3N0QGFsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BpbmRleOWIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3QnID0+IA0KICBhcnJheSAoDQogICAgJ3Bvc3R0eXBlJyA9PiAwLA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdCcsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdhcmdzJyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdhcmdzX3dpdGgnID0+IA0KICAgIGFycmF5ICgNCiAgICApLA0KICAgICdhYmJyX3VybCcgPT4gdHJ1ZSwNCiAgKSwNCi8vICDmt7vliqAg5paH56ugY2F0ZWdvcnnliJfooagg5Lyq6Z2Z6Lev55SxDQogICdyZXdyaXRlX3Bvc3RfYXJ0aWNsZV9saXN0X2NhdGVnb3J5JyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ3Jld3JpdGUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfY2F0ZWdvcnknLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnY2F0ZUBpZCcsDQogICAgICAxID0+ICdjYXRlQGFsaWFzJywNCiAgICAgIDIgPT4gJ3BhZ2UnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroGF1dGhvcuWIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3RfYXV0aG9yJyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ3Jld3JpdGUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfYXV0aG9yJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2F1dGhAaWQnLA0KICAgICAgMSA9PiAnYXV0aEBhbGlhcycsDQogICAgICAyID0+ICdwYWdlJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BkYXRl5YiX6KGoIOS8qumdmei3r+eUsQ0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfbGlzdF9kYXRlJyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ3Jld3JpdGUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfZGF0ZScsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdhcmdzJyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdkYXRlJywNCiAgICAgIDEgPT4gJ3BhZ2UnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroHRhZ+WIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3RfdGFnJyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ3Jld3JpdGUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfdGFnJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3RhZ3NAaWQnLA0KICAgICAgMSA9PiAndGFnc0BhbGlhcycsDQogICAgICAyID0+ICdwYWdlJywNCiAgICApLA0KICApLA0KLy8gIOi/meaYr+S4gOS4quS+i+WtkO+8miDmlofnq6DmkJzntKLnmoTkvKrpnZnot6/nlLHnmoTlrp7njrANCi8qDQogICdyZXdyaXRlX3Bvc3RfYXJ0aWNsZV9zZWFyY2gnID0+IA0KICBhcnJheSAoDQogICAgJ3Bvc3R0eXBlJyA9PiAwLA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfc2VhcmNoJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdTZWFyY2gnLA0KICAgICdwcmVmaXgnID0+ICdzZWFyY2gnLA0KICAgICd1cmxydWxlJyA9PiAneyVob3N0JX17JXElfV97JXBhZ2UlfS5odG1sJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgJ3EnID0+ICdbXlxcL19dKycsDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdhcmdzX3dpdGgnID0+IA0KICAgIGFycmF5ICgNCiAgICApLA0KICAgICdyZXF1ZXN0X21ldGhvZCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnR0VUJywNCiAgICAgIDEgPT4gJ1BPU1QnLA0KICAgICksDQogICAgJ29ubHlfbWF0Y2hfcGFnZScgPT4gZmFsc2UsDQogICksDQoqLw0KLy8gIOa3u+WKoCDpu5jorqTot6/nlLEg77yI5paH56ug6aG15YiX6KGo55qE6aaW6aG16Lev55Sx77yM5Y+q5Zyo5rKh5pyJ5byA5ZCv5Lyq6Z2Z5LiL5ZCv55So77yJDQogICdkZWZhdWx0X3Bvc3RfYXJ0aWNsZV9saXN0JyA9PiANCiAgYXJyYXkgKA0KICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICAndHlwZScgPT4gJ2RlZmF1bHQnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3QnLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdub3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdjYXRlJywNCiAgICAgIDEgPT4gJ3RhZ3MnLA0KICAgICAgMiA9PiAnYXV0aCcsDQogICAgICAzID0+ICdkYXRlJywNCiAgICAgIDQgPT4gJ2lkJywNCiAgICAgIDUgPT4gJ2FsaWFzJywNCiAgICApLA0KICAgICdhYmJyX3VybCcgPT4gdHJ1ZSwNCiAgICAnb25seV9hY3RpdmUnID0+IHRydWUsDQogICksDQopOw0K</file>
	<file name='zb_system\defend\routes_post_page.php' crc32='923C3694'  dt:dt='bin.base64'>PD9waHANCg0KcmV0dXJuIGFycmF5ICgNCi8vICDmt7vliqAg6aG16Z2i6aG15Y2V6aG1IOWKqOaAgei3r+eUsQ0KICAnYWN0aXZlX3Bvc3RfcGFnZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3Bvc3R0eXBlJyA9PiAxLA0KICAgICd0eXBlJyA9PiAnYWN0aXZlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfcGFnZV9zaW5nbGUnLA0KICAgICdjYWxsJyA9PiAnVmlld1Bvc3QnLA0KICAgICdnZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2lkJywNCiAgICAgIDEgPT4gJ2FsaWFzJywNCiAgICApLA0KICAgICdub3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdjYXRlJywNCiAgICAgIDEgPT4gJ2F1dGgnLA0KICAgICAgMiA9PiAndGFncycsDQogICAgICAzID0+ICdkYXRlJywNCiAgICApLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnYXJnc193aXRoJyA9PiANCiAgICBhcnJheSAoDQogICAgKSwNCiAgICAndG9fcGVybWFsaW5rJyA9PiB0cnVlLA0KICApLA0KLy8gIOa3u+WKoCDpobXpnaLpobXljZXpobUg5Lyq6Z2Z6Lev55SxDQogICdyZXdyaXRlX3Bvc3RfcGFnZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3Bvc3R0eXBlJyA9PiAxLA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X3BhZ2Vfc2luZ2xlJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdQb3N0JywNCiAgICAncHJlZml4JyA9PiAnJywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3Bvc3RAaWQnLA0KICAgICAgMSA9PiAncG9zdEBhbGlhcycsDQogICAgKSwNCiAgICAnYXJnc193aXRoJyA9PiANCiAgICBhcnJheSAoDQogICAgKSwNCiAgKSwNCik7DQo=</file>
	<file name='zb_system\defend\thanks.html' crc32='854313CF'  dt:dt='bin.base64'>PHRhYmxlIGJvcmRlcj0iMCIgY2xhc3M9InRhYmxlRnVsbCB0YWJsZUJvcmRlciB0YWJsZV9ob3ZlciB0YWJsZV9zdHJpcGVkIiBpZD0idGhhbmtzbGlzdCI+PHRoZWFkPjx0cj48dGggaGVpZ2h0PSIzMiIgY29sc3Bhbj0iMiI+PGkgY2xhc3M9Imljb24tZmxhZy1maWxsIj48L2k+Jm5ic3A7Wi1CbG9nUEhQ572R56uZ5ZKM56iL5bqP5byA5Y+RPC90aD48L3RyPjwvdGhlYWQ+PHRib2R5Pjx0cj48dGQgY2xhc3M9InRkMTUiPjxpIGNsYXNzPSJpY29uLWdlYXItd2lkZS1jb25uZWN0ZWQiPjwvaT4mbmJzcDsmbmJzcDvnqIvluo88L3RkPjx0ZD48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9iYnMuemJsb2djbi5jb20vdXNlci16eC5hc2QuaHRtbCIgdGl0bGU9IuWuh+WumemjnuWkqeelnueMqu+8ge+8ge+8gSIgcmVsPSJub3JlZmVycmVyIj56eC5hc2Q8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnpzeHNvZnQuY29tIiB0aXRsZT0i6Lev6L+H55qEIj56c3g8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vaW16aG91LmNvbSIgdGl0bGU9IuavgeS6uuS4jeWApu+8gSIgcmVsPSJub3JlZmVycmVyIj7mnKrlr5I8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8venpzLmltLyIgdGl0bGU9IiIgcmVsPSJub3JlZmVycmVyIj56aG91emlzaHU8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmljZXVpLm5ldCIgdGl0bGU9IiIgcmVsPSJub3JlZmVycmVyIj5pY2U8L2E+PC90ZD48L3RyPjx0cj48dGQgY2xhc3M9InRkMTUiPjxpIGNsYXNzPSJpY29uLXgtZGlhbW9uZC1maWxsIj48L2k+Jm5ic3A7Jm5ic3A75Y2P5L2cPC90ZD48dGQ+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lndkc3NtcS5jb20vIiB0aXRsZT0iIiByZWw9Im5vcmVmZXJyZXIiPuayieawtOa1ruWGsDwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuaW51bGwuY24iIHRpdGxlPSIiIHJlbD0ibm9yZWZlcnJlciI+5qmZ6Imy6Ziz5YWJPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL2tmdXUuY24iIHRpdGxlPSLlj6/po47nvZEiIHJlbD0ibm9yZWZlcnJlciI+6Iqx5pmo5pyI5aSVPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vd3d3Lnl0ZWNuLmNvbSIgcmVsPSJub3JlZmVycmVyIj7llJDmnJ08L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vYXBwLnpibG9nY24uY29tLz9hdXRoPTJmZmJmZjBhLTEyMDctNDM2Mi04OWZiLWQ5YTc4MDEyNWUwYSIgdGl0bGU9IiIgcmVsPSJub3JlZmVycmVyIj7lv4Pmiaw8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnNvbmdoYWlmZW5nLmNvbS8iIHJlbD0ibm9yZWZlcnJlciI+THVja3k8L2E+PC90ZD48L3RyPjx0cj48dGQgY2xhc3M9InRkMTUiPjxpIGNsYXNzPSJpY29uLWltYWdlLWZpbGwiPjwvaT4mbmJzcDsmbmJzcDvnlYzpnaI8L3RkPjx0ZD48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cudG95ZWFuLmNvbSIgdGl0bGU9IuaIkeS7rOeahOW+oeeUqOWwhOm4oeeLrl5fXiIgcmVsPSJub3JlZmVycmVyIj7mi5PmupA8L2E+IDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5qZ3B5LmNuIiB0aXRsZT0i5LuW5aSq6L275LqGLOWwseWDj+S4gOeJh+e+veavmyzpo47kuIDlkLnlsLHpo57kuoYu5Li65LqG6YG/5YWN5Lmx6aOeLOS7lueahOWGheW/g+Wwsea4kOa4kOe6oOe7k+i1t+adpeS6hi4iIHJlbD0ibm9yZWZlcnJlciI+5ZCJ5YWJ54mH5769PC9hPiA8c3BhbiB0aXRsZT0i576O5Li95Y+I5amJ57qm55qE5rmY5aa55a2QLOWPr+eIseeahOWkluihqOS4i+aOqeiXj+edgOWPpOWFuOe+jueahOawlOi0qCxaLUJsb2flrpjnvZHnmoTorr7orqHogIUs546w5Zyo5rex5Zyz5YGa552A5Zac5qyi55qE5bel5L2cIj7lqIflqIc8L3NwYW4+IDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vd3d3Lmh0bWxpdC5jb20uY24iIHRpdGxlPSLmlrDpspzkurrnmoTlt6XkvZzlsLHmmK/mr4/lpKnmjqXljZXmjqXljZXlho3mjqXljZUs5YW75a6257OK5Y+jLOWutumHjOeahOmhtuaigeafsSzmnInlhL/mnInlpbPnmoTnlLfkurrkuYvmpbfmqKEuIiByZWw9Im5vcmVmZXJyZXIiPuaWsOmynOS6ujwvYT48L3RkPjwvdHI+PHRyPjx0ZCBjbGFzcz0idGQxNSI+PGkgY2xhc3M9Imljb24tbGlnaHRuaW5nLWZpbGwiPjwvaT4mbmJzcDsmbmJzcDvmlK/mjIE8L3RkPjx0ZD48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cDovL3d3dy5lc2xveS5jb20iIHRpdGxlPSLlk4jlk4jlkIzlrablkIzmoLfmmK9aLUJsb2fnmoTkvKDlpYfkurrniaks5LuO5ZOI5ZOI5LiK5aSn5a2m5Yiw56CU56m255Sf5q+V5LiaLOS4gOebtOmDveWcqOS4ulotQmxvZ+S7mOWHuixaLUJsb2cgMS445pyJUFPlkoxUU+aPkuS7tuaJjeabtOeyvuW9qSzlnKjlj6/ku6XpooTop4HnmoTlsIbmnaUs5oiR5Lus5L6d54S25Lya5oul5pyJ5ZOI5ZOI5ZCM5a2m55qELOS4jeingeS4jeaVo+WTpi4iIHJlbD0ibm9yZWZlcnJlciI+SGFwaGljPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL2Jicy56YmxvZ2NuLmNvbS91c2VyLSVFNiU5QyU4OCVFNCVCOCU4QSVFNCVCOSU4QiVFNiU5QyVBOC5odG1sIiB0aXRsZT0iWi1CbG9n6YeM55qE6ICB6buE54mbLOecn+ato+eahOiAgem7hOeJmyzkuI3mhKfmmK/lsZ7niZvnmoQs5oC75piv5Zyo6buY6buY5peg6Ze755qE5aWJ54yu552A5LuW55qE5LiA5YiHLOWQg+eahOaYr+iNiSzmjKTlh7rmnaXnmoTmmK/otLTlrZDlkozku6PnoIEs6K6p5oiR5Lus5ZCR5LuW6Ie05pWsISIgcmVsPSJub3JlZmVycmVyIj7mnIjkuIrkuYvmnKg8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly93d3cud2FzaHVuLmNvbSIgdGl0bGU9IuiogOivreeKgOWIqeeahFdhc2h1buaYr+iuuuWdm+eahOeBtemtgizkuLrkuoZaLUJsb2fnmoTlj5HlsZXlkJDlsL3kuoblkITnp43mp70s57uI5LqO5ZCQ552A5ZCQ552A5ZCQ5LiN5Yqo5LqGLOS9huWlh+i/ueWPkeeUn+S6hizku5bku6XlkI7lho3kuZ/kuI3nlKjlkJDkuoYs5Y+v5Lul5pS55Li65Za35LqGLuelnVdhc2h1buWQjOWtpuiBquaYjuWPr+eIseeahOWls+WEv+WBpeW6t+aIkOmVvyEiIHJlbD0ibm9yZWZlcnJlciI+V2FzaHVuPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL2Jicy56YmxvZ2NuLmNvbS91c2VyLSVFNSVCMCU4RiVFOSVBMyU5RSVFOSVCRSU5OS5odG1sIiB0aXRsZT0i5Lyg57ufLOmhvuWutizniLHogIHlqYbmm7TniLHlhL/lrZDnmoTllYbliqHnsr7oi7Es5Yuk5aWL55qESmlt5ZCM5a2m5YOP54mb6Jm75LiA5qC355qE5Y+u552A6YKj5Y+q5oeS54yqLOe7iOS6juaIkOWKn+S6hiwyLjDooqvku5bmi7Hkuoblh7rmnaUs5LuW56uL5Yqf5LqGLOS7lueri+WKn+S6hizku5bkuLpaLUJsb2fnq4vkuobkuIDlpKflip8s5oGt5ZacSmlt5ZCM5a2mISIgcmVsPSJub3JlZmVycmVyIj7lsI/po57pvpk8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vYmJzLnpibG9nY24uY29tL3VzZXItJUU2JThCJUJFJUU1JThGJTgxLmh0bWwiIHRpdGxlPSLmi77lj4HlkIzlrabliJvnq4vkuoZaLUJsb2fnmoTorrrlnZss5LuW5oqKWi1CbG9n5bim5LiK5LqG5byA5pS+55qE6YGT6LevLOi/meWwseaYr1otQmxvZ+iuuuWdm3VpZD0x55qE5Lq654mpIeelneaLvuWPgeWQjOWtpueahOWutuW6ree+jua7oeW5uOemjyzkuovkuJrlhbTml7rlj5Hovr4hISEiIHJlbD0ibm9yZWZlcnJlciI+5ou+5Y+BPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vd3d3Lm5pY3dpbmQuY29tIiB0aXRsZT0iTUFP5Li75bit6K+06L+HQ1DmmK/kuKrlpb3lkIzlv5chIiByZWw9Im5vcmVmZXJyZXIiPkNhcHRpYW48L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnR4Y3N0eC5jbi8iIHJlbD0ibm9yZWZlcnJlciI+5aSp5YW0PC9hPjwvdGQ+PC90cj48dHI+PHRkIGNsYXNzPSJ0ZDE1Ij48aSBjbGFzcz0iaWNvbi1wZWFjZS1maWxsIj48L2k+Jm5ic3A7Jm5ic3A75oSf6LCiPC90ZD48dGQ+PHNwYW4gdGl0bGU9IuepuuWkp+W4iOS5g+aYr1BIUOmrmOaJiyxaQlDnmoTmjIflvJXogIUhIj7nqbrln448L3NwYW4+IDxzcGFuIHRpdGxlPSLngrrlpKnlnLDnq4vlv4PvvIzngrrnlJ/msJHnq4vlkb3vvIzngrrlvoDogZbnubzntZXlrbjvvIzngrrokKzkuJbplovlpKrlubPjgIIiPualiuaHv+i7kjwvc3Bhbj4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cDovL3d3dy53aWxsaWFtbG9uZy5pbmZvIiByZWw9Im5vcmVmZXJyZXIiPum+meWogeW7iTwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cDovL2x1c29uZ3NvbmcuY29tIiByZWw9Im5vcmVmZXJyZXIiPuWNouadvuadvjwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9iYnMuemJsb2djbi5jb20vdXNlci0lRTYlOTglOEUlRTYlOUMlODglRTYlOTglOUYlRTUlODUlODkuaHRtbCIgdGl0bGU9IuW5tOi9u+acieS4uueahOaKgOacr+i+vuS6uizmtKXpl6jlsI/lvLos6L2s5oiY56e75Yqo5byA5Y+R5LqGLiIgcmVsPSJub3JlZmVycmVyIj7mmI7mnIjmmJ/lhYk8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vYmJzLnpibG9nY24uY29tL3VzZXItc2lwby5odG1sIiByZWw9Im5vcmVmZXJyZXIiPlNpcG88L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vYmJzLnpibG9nY24uY29tL3VzZXIteXd0ZTIwMDAuaHRtbCIgcmVsPSJub3JlZmVycmVyIj7nkZzlu7c8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmh1aXNlbS5jb20iIHJlbD0ibm9yZWZlcnJlciI+5rWB5bm0PC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy55aXd1a3UuY29tLyIgcmVsPSJub3JlZmVycmVyIj7lsJTku4o8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmZlaW5pYW9teS5jb20vIiByZWw9Im5vcmVmZXJyZXIiPuWiqOWInTwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuZmVuZ3lhbi5jYy8iIHJlbD0ibm9yZWZlcnJlciI+54O954OfPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3llZWx6LmNvbS8iIHJlbD0ibm9yZWZlcnJlciI+6ICB5p2OPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5pZGRhaGUuY29tLyIgcmVsPSJub3JlZmVycmVyIj7lpKfmsrM8L2E+IOetieaci+WPi++8jOi/mOacieaCqC4uLjwvdGQ+PC90cj48dHI+PHRkIGNsYXNzPSJ0ZDE1Ij48aSBjbGFzcz0iaWNvbi1nZW8tYWx0LWZpbGwiPjwvaT4mbmJzcDsmbmJzcDvpk77mjqU8L3RkPjx0ZD48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3pibG9nY24vemJsb2dwaHAiIHRpdGxlPSJaLUJsb2dQSFAgb24gR2l0SHViIiByZWw9Im5vcmVmZXJyZXIiPkdpdEh1YjwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuemJsb2djbi5jb20vemJsb2dwaHAiIHJlbD0ibm9yZWZlcnJlciI+56iL5bqP5LiL6L29IDwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9hcHAuemJsb2djbi5jb20iIHJlbD0ibm9yZWZlcnJlciI+5bqU55So5Lit5b+DIDwvYT4mbmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9kb2NzLnpibG9nY24uY29tIiByZWw9Im5vcmVmZXJyZXIiPuaWh+aho0RvY3MgPC9hPiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL2Jicy56YmxvZ2NuLmNvbSIgcmVsPSJub3JlZmVycmVyIj5aQmxvZ2dlcuekvuWMuiA8L2E+Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vejVlbmNyeXB0LmNvbSIgcmVsPSJub3JlZmVycmVyIj5aNeWKoOWvhjwvYT48L3RkPjwvdHI+PC90Ym9keT48dGZvb3Q+PC90Zm9vdD48L3RhYmxlPg0K</file>
	<file name='zb_system\function\c_system_admin.php' crc32='AB767CF1'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_admin_function.php' crc32='F5679362'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_api.php' crc32='27A3A72C'  dt:dt='bin.base64'>PD9waHANCg0KLyoqDQogKiBBUEnnm7jlhbPlh73mlbAuDQogKi8NCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQovKioNCiAqIEFQSSBDaGVjayBFbmFibGUNCiAqLw0KZnVuY3Rpb24gQXBpQ2hlY2tFbmFibGUoKQ0Kew0KICAgIGlmICghJEdMT0JBTFNbJ29wdGlvbiddWydaQ19BUElfRU5BQkxFJ10pIHsNCiAgICAgICAgJEdMT0JBTFNbJ3picCddLT5TaG93RXJyb3IoJEdMT0JBTFNbJ2xhbmcnXVsnZXJyb3InXVsnOTUnXSwgbnVsbCwgbnVsbCwgbnVsbCwgNTAzKTsNCiAgICB9DQp9DQoNCi8qKg0KICogQVBJIFRva2VuVmVyaWZ5DQogKi8NCmZ1bmN0aW9uIEFwaVRva2VuVmVyaWZ5KCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIGlmICgkemJwLT5DaGVja0lzTG9nZ2VkaW4oKSA9PSBmYWxzZSkgew0KICAgICAgICAvLyDlnKggQVBJIOS4rQ0KICAgICAgICBpZiAoKCRhdXRoID0gR2V0VmFycygnSFRUUF9BVVRIT1JJWkFUSU9OJywgJ1NFUlZFUicpKSAmJiAoc3Vic3RyKCRhdXRoLCAwLCA3KSA9PT0gJ0JlYXJlciAnKSkgew0KICAgICAgICAgICAgLy8g6I635Y+WIEF1dGhvcml6YXRpb24g5aS0DQogICAgICAgICAgICAkYXBpX3Rva2VuID0gc3Vic3RyKCRhdXRoLCA3KTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIOiOt+WPlu+8iFBPU1Qg5oiWIEdFVCDkuK3nmoTvvInor7fmsYLlj4LmlbANCiAgICAgICAgICAgICRhcGlfdG9rZW4gPSBHZXRWYXJzKCd0b2tlbicpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHVzZXIgPSAkemJwLT5WZXJpZnlBUElUb2tlbigkYXBpX3Rva2VuKTsNCg0KICAgICAgICBpZiAoJHVzZXIgIT0gbnVsbCkgew0KICAgICAgICAgICAgZGVmaW5lKCdaQlBfSU5fQVBJX1ZFUklGWUJZVE9LRU4nLCB0cnVlKTsNCiAgICAgICAgICAgICR6YnAtPnVzZXIgPSAkdXNlcjsNCiAgICAgICAgICAgICR6YnAtPmlzbG9naW4gPSB0cnVlOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCi8qKg0KICogQVBJIOaYvuekuuaKpemUmeWHveaVsA0KICovDQpmdW5jdGlvbiBBcGlEZWJ1Z0Rpc3BsYXkoJGVycm9yKQ0Kew0KICAgIEFwaVJlc3BvbnNlKG51bGwsICRlcnJvcik7DQp9DQoNCi8qKg0KICogQVBJIFNob3dFcnJvcuWHveaVsA0KICovDQpmdW5jdGlvbiBBcGlTaG93RXJyb3IoJGVycm9yQ29kZSwgJGVycm9yVGV4dCwgJGZpbGUgPSBudWxsLCAkbGluZSA9IG51bGwsICRtb3JlaW5mbyA9IGFycmF5KCksICRodHRwY29kZSA9IDIwMCkNCnsNCiAgICAkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfU2hvd0Vycm9yJ11bJ0FwaURlYnVnRGlzcGxheSddID0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOOw0KICAgIC8v5aaC5p6c5pivJGVycm9yQ29kZSA9PSAy5bCx5pivaHR0cCA0MDQNCiAgICBpZiAoJGVycm9yQ29kZSA9PSAyICYmICRodHRwY29kZSA9PSAyMDApIHsNCiAgICAgICAgJGh0dHBjb2RlID0gNDA0Ow0KICAgIH0NCiAgICAkemJlID0gWkJsb2dFeGNlcHRpb246OkdldEluc3RhbmNlKCk7DQogICAgJHpiZS0+UGFyc2VFcnJvcigkZXJyb3JDb2RlLCAkZXJyb3JUZXh0LCAkZmlsZSwgJGxpbmUpOw0KICAgIEFwaVJlc3BvbnNlKG51bGwsICR6YmUsICRodHRwY29kZSwgJGVycm9yVGV4dCk7DQogICAgZGllOw0KfQ0KDQovKioNCiAqIOi9veWFpSBBUEkgTW9kcy4NCiAqLw0KZnVuY3Rpb24gQXBpTG9hZE1vZHMoJiRtb2RzKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQVBJX0V4dGVuZF9Nb2RzJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRhZGRfbW9kcyA9ICRmcG5hbWUoKTsNCg0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhZGRfbW9kcykpIHsNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yZWFjaCAoJGFkZF9tb2RzIGFzICRtb2QgPT4gJGZpbGUpIHsNCiAgICAgICAgICAgICRtb2QgPSBzdHJ0b2xvd2VyKCRtb2QpOw0KICAgICAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoJG1vZCwgJG1vZHMpKSB7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRtb2RzWyRtb2RdID0gJGZpbGU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyDku44gemJfc3lzdGVtL2FwaS8g55uu5b2V5Lit6L295YWlIG1vZHMNCiAgICBmb3JlYWNoIChHZXRGaWxlc0luRGlyKFpCUF9QQVRIIC4gJ3piX3N5c3RlbS9hcGkvJywgJ3BocCcpIGFzICRtb2QgPT4gJGZpbGUpIHsNCiAgICAgICAgJG1vZHNbJG1vZF0gPSAkZmlsZTsNCiAgICB9DQogICAgcmV0dXJuIHRydWU7DQp9DQoNCi8qKg0KICog56e76Zmk5oyH5a6a55qEIEFQSSBNb2RzLg0KICovDQpmdW5jdGlvbiBBcGlSZW1vdmVNb2RzKCRuYW1lKQ0Kew0KICAgIGdsb2JhbCAkbW9kczsNCiAgICB1bnNldCgkbW9kc1skbmFtZV0pOw0KICAgIHJldHVybiAkbW9kczsNCn0NCg0KLyoqDQogKiDmo4Dmn6VBUEkgTW9kc+eahOeZveWQjeWNleWSjOm7keWQjeWNlS4NCiAqICRtb2RzX2FsbG9355m95ZCN5Y2V6K+35oWO55So77yM5ZCv55So55m95ZCN5Y2V5ZCO77yM5LiN5Zyo55m95ZCN5Y2V55qEbW9k6YO95bCG6KKr5ouS57udDQogKiDlpoLmnpzlj6rmg7PlhbPpl63mn5DkupvmqKHlnZflj6rpnIDopoHlr7kkbW9kc19kaXNhbGxvd+m7keWQjeWNlei/m+ihjOa3u+WKoA0KICovDQpmdW5jdGlvbiBBcGlDaGVja01vZHMoJiRtb2RzX2FsbG93LCAmJG1vZHNfZGlzYWxsb3cpDQp7DQogICAgZ2xvYmFsICR6YnAsICRtb2QsICRhY3Q7DQoNCiAgICAvL+aOpeWPo+WPiuWvuSRtb2RzX2FsbG93LCAkbW9kc19kaXNhbGxvd+eahOa3u+WKoA0KICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0FQSV9DaGVja01vZHMnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJG5ld19hbGxvdyA9ICRuZXdfZGlzYWxsb3cgPSBhcnJheSgpOw0KICAgICAgICAkZnBuYW1lKCRuZXdfYWxsb3csICRuZXdfZGlzYWxsb3cpOw0KDQogICAgICAgICRtb2RzX2FsbG93ID0gYXJyYXlfbWVyZ2UoJG1vZHNfYWxsb3csICRuZXdfYWxsb3cpOw0KICAgICAgICAkbW9kc19kaXNhbGxvdyA9IGFycmF5X21lcmdlKCRtb2RzX2Rpc2FsbG93LCAkbmV3X2Rpc2FsbG93KTsNCiAgICB9DQoNCiAgICAkYiA9IGZhbHNlOw0KDQogICAgZm9yZWFjaCAoJG1vZHNfYWxsb3cgYXMgJGFycmF5KSB7DQogICAgICAgIGlmICghZW1wdHkoJGFycmF5KSAmJiBpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGsgPT4gJHYpIHsNCiAgICAgICAgICAgICAgICAkbGlzdF9tb2QgPSAkazsNCiAgICAgICAgICAgICAgICAkbGlzdF9hY3QgPSAkdjsNCiAgICAgICAgICAgICAgICBpZiAoaXNfaW50ZWdlcigkaykpIHsNCiAgICAgICAgICAgICAgICAgICAgJGxpc3RfbW9kID0gJHY7DQogICAgICAgICAgICAgICAgICAgICRsaXN0X2FjdCA9ICcnOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoJG1vZCA9PSAkbGlzdF9tb2QgJiYgKCRsaXN0X2FjdCA9PSAnJyB8fCAkYWN0ID09ICRsaXN0X2FjdCkpIHsNCiAgICAgICAgICAgICAgICAgICAgJGIgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBpZiAoIWVtcHR5KCRtb2RzX2FsbG93KSAmJiAkYiA9PSBmYWxzZSkgew0KICAgICAgICAkemJwLT5TaG93RXJyb3IoOTYsIF9fRklMRV9fLCBfX0xJTkVfXyk7DQogICAgfQ0KDQogICAgJGIgPSB0cnVlOw0KDQogICAgZm9yZWFjaCAoJG1vZHNfZGlzYWxsb3cgYXMgJGFycmF5KSB7DQogICAgICAgIGlmICghZW1wdHkoJGFycmF5KSAmJiBpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGsgPT4gJHYpIHsNCiAgICAgICAgICAgICAgICAkbGlzdF9tb2QgPSAkazsNCiAgICAgICAgICAgICAgICAkbGlzdF9hY3QgPSAkdjsNCiAgICAgICAgICAgICAgICBpZiAoaXNfaW50ZWdlcigkaykpIHsNCiAgICAgICAgICAgICAgICAgICAgJGxpc3RfbW9kID0gJHY7DQogICAgICAgICAgICAgICAgICAgICRsaXN0X2FjdCA9ICcnOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoJG1vZCA9PSAkbGlzdF9tb2QgJiYgKCRsaXN0X2FjdCA9PSAnJyB8fCAkYWN0ID09ICRsaXN0X2FjdCkpIHsNCiAgICAgICAgICAgICAgICAgICAgJGIgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKCFlbXB0eSgkbW9kc19kaXNhbGxvdykgJiYgJGIgPT0gZmFsc2UpIHsNCiAgICAgICAgJHpicC0+U2hvd0Vycm9yKDk2LCBfX0ZJTEVfXywgX19MSU5FX18pOw0KICAgIH0NCiAgICByZXR1cm4gdHJ1ZTsNCn0NCg0KLyoqDQogKiBBUEkg5ZON5bqULg0KICoNCiAqIEBwYXJhbSBhcnJheXxudWxsICRkYXRhDQogKiBAcGFyYW0gWkJsb2dFeGNlcHRpb258bnVsbCAkZXJyb3INCiAqIEBwYXJhbSBpbnQgJGNvZGUNCiAqIEBwYXJhbSBzdHJpbmd8bnVsbCAkbWVzc2FnZQ0KICovDQpmdW5jdGlvbiBBcGlSZXNwb25zZSgkZGF0YSA9IG51bGwsICRlcnJvciA9IG51bGwsICRjb2RlID0gMjAwLCAkbWVzc2FnZSA9IG51bGwsICRzaG91bGRfcmVzcCA9IHRydWUpDQp7DQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQVBJX1ByZV9SZXNwb25zZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnBuYW1lKCRkYXRhLCAkZXJyb3IsICRjb2RlLCAkbWVzc2FnZSwgJHNob3VsZF9yZXNwKTsNCiAgICB9DQoNCiAgICBpZiAoIWVtcHR5KCRlcnJvcikpIHsNCiAgICAgICAgJGVycm9yX2luZm8gPSBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiBtZXRob2RfZXhpc3RzKCRlcnJvciwgJ2dldENvZGUnKSA/ICRlcnJvci0+Z2V0Q29kZSgpIDogJGVycm9yLT5jb2RlLA0KICAgICAgICAgICAgJ3R5cGUnID0+IHByb3BlcnR5X2V4aXN0cygkZXJyb3IsICd0eXBlJykgPyAkZXJyb3ItPnR5cGUgOiAkZXJyb3ItPmdldENvZGUoKSwNCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiBtZXRob2RfZXhpc3RzKCRlcnJvciwgJ2dldE1lc3NhZ2UnKSA/ICRlcnJvci0+Z2V0TWVzc2FnZSgpIDogJGVycm9yLT5tZXNzYWdlLA0KICAgICAgICApOw0KDQogICAgICAgIGlmICgkR0xPQkFMU1snemJwJ10tPmlzZGVidWcpIHsNCiAgICAgICAgICAgICRlcnJvcl9pbmZvWydtZXNzYWdlX2Z1bGwnXSA9IHByb3BlcnR5X2V4aXN0cygkZXJyb3IsICdtZXNzYWdlZnVsbCcpID8gJGVycm9yLT5tZXNzYWdlZnVsbCA6ICcnOw0KICAgICAgICAgICAgJGVycm9yX2luZm9bJ2ZpbGUnXSA9IG1ldGhvZF9leGlzdHMoJGVycm9yLCAnZ2V0RmlsZScpID8gJGVycm9yLT5nZXRGaWxlKCkgOiAkZXJyb3ItPmZpbGU7DQogICAgICAgICAgICAkZXJyb3JfaW5mb1snbGluZSddID0gbWV0aG9kX2V4aXN0cygkZXJyb3IsICdnZXRMaW5lJykgPyAkZXJyb3ItPmdldExpbmUoKSA6ICRlcnJvci0+bGluZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkY29kZSA9PT0gMjAwKSB7DQogICAgICAgICAgICAkY29kZSA9IDUwMDsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZW1wdHkoJG1lc3NhZ2UpKSB7DQogICAgICAgICAgICAkbWVzc2FnZSA9ICdTeXN0ZW0gZXJyb3I6ICcgLiAobWV0aG9kX2V4aXN0cygkZXJyb3IsICdnZXRNZXNzYWdlJykgPyAkZXJyb3ItPmdldE1lc3NhZ2UoKSA6ICRlcnJvci0+bWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAkcmVzcG9uc2UgPSBhcnJheSgNCiAgICAgICAgJ2NvZGUnID0+ICRjb2RlLA0KICAgICAgICAnbWVzc2FnZScgPT4gIWVtcHR5KCRtZXNzYWdlKSA/ICRtZXNzYWdlIDogJ09LJywNCiAgICAgICAgJ2RhdGEnID0+ICRkYXRhLA0KICAgICAgICAnZXJyb3InID0+IGVtcHR5KCRlcnJvcikgPyBudWxsIDogJGVycm9yX2luZm8sDQogICAgKTsNCg0KICAgIC8vIOaYvuekuiBSdW50aW1lIOiwg+ivleS/oeaBrw0KICAgIGlmICghZGVmaW5lZCgnWkJQX0FQSV9JTl9URVNUJykgJiYgJEdMT0JBTFNbJ29wdGlvbiddWydaQ19SVU5JTkZPX0RJU1BMQVknXSkgew0KICAgICAgICAkcnVudGltZSA9IFJ1blRpbWUoZmFsc2UpOw0KICAgICAgICB1bnNldCgkcnVudGltZVsnZXJyb3JfZGV0YWlsJ10pOw0KICAgICAgICAkcmVzcG9uc2VbJ3J1bnRpbWUnXSA9ICRydW50aW1lOw0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0FQSV9SZXNwb25zZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnBuYW1lKCRyZXNwb25zZSk7DQogICAgfQ0KDQogICAgaWYgKCFkZWZpbmVkKCdaQlBfQVBJX0lOX1RFU1QnKSAmJiAkc2hvdWxkX3Jlc3AgPT0gdHJ1ZSkgew0KICAgICAgICAvL29iX2VuZF9jbGVhbigpOw0KICAgICAgICBpZiAoIWhlYWRlcnNfc2VudCgpKSB7DQogICAgICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKCRjb2RlID49IDUwMCkgew0KICAgICAgICBTZXRIdHRwU3RhdHVzQ29kZSgkY29kZSk7DQogICAgfQ0KDQogICAgJHIgPSBKc29uRW5jb2RlKCRyZXNwb25zZSk7DQoNCiAgICBpZiAoJHNob3VsZF9yZXNwID09IHRydWUpIHsNCiAgICAgICAgZWNobyAkcjsNCiAgICB9DQoNCiAgICBpZiAoZW1wdHkoJGVycm9yKSAmJiAkY29kZSAhPT0gMjAwKSB7DQogICAgICAgIC8vIOWmguaenCBjb2RlIOS4jeS4uiAyMDDvvIzlj4jkuI3mmK/ns7vnu5/mipvlh7rnmoTplJnor6/vvIzlho3mnaXmipvlh7rkuIDkuKogRXhjZXB0aW9u77yM6YCC6YWNIHBocHVuaXQNCiAgICAgICAgWkJsb2dFeGNlcHRpb246OlN1c3BlbmRFcnJvckhvb2soKTsNCiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigkbWVzc2FnZSwgJGNvZGUpOw0KICAgIH0NCg0KICAgIHJldHVybiAkcjsNCn0NCg0KLyoqDQogKiBBUEkg5qOA5rWL5p2D6ZmQLg0KICoNCiAqIEBwYXJhbSBib29sICRsb2dpblJlcXVpcmUNCiAqIEBwYXJhbSBzdHJpbmcgJGFjdGlvbg0KICogQHBhcmFtIGJvb2wgJHRocm93RXhjZXB0aW9uDQogKi8NCmZ1bmN0aW9uIEFwaUNoZWNrQXV0aCgkbG9naW5SZXF1aXJlID0gZmFsc2UsICRhY3Rpb24gPSAndmlldycsICR0aHJvd0V4Y2VwdGlvbiA9IHRydWUpDQp7DQogICAgLy8g55m75b2V6K6k6K+BDQogICAgaWYgKCRsb2dpblJlcXVpcmUgJiYgISRHTE9CQUxTWyd6YnAnXS0+dXNlci0+SUQpIHsNCiAgICAgICAgaWYgKCR0aHJvd0V4Y2VwdGlvbiA9PSB0cnVlKSB7DQogICAgICAgICAgICAkR0xPQkFMU1snemJwJ10tPlNob3dFcnJvcigkR0xPQkFMU1snbGFuZyddWydlcnJvciddWyc2J10sIF9fRklMRV9fLCBfX0xJTkVfXywgbnVsbCwgNDAxKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIOadg+mZkOiupOivgQ0KICAgIGlmICghJEdMT0JBTFNbJ3picCddLT5DaGVja1JpZ2h0cygkYWN0aW9uKSkgew0KICAgICAgICBpZiAoJHRocm93RXhjZXB0aW9uID09IHRydWUpIHsNCiAgICAgICAgICAgICRHTE9CQUxTWyd6YnAnXS0+U2hvd0Vycm9yKCRHTE9CQUxTWydsYW5nJ11bJ2Vycm9yJ11bJzYnXSwgX19GSUxFX18sIF9fTElORV9fLCBudWxsLCA0MDMpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuIHRydWU7DQp9DQoNCi8qKg0KICogQVBJIOiOt+WPluaMh+WumuWxnuaAp+eahEFycmF5DQogKg0KICogQHBhcmFtIG9iamVjdCAkb2JqZWN0DQogKiBAcGFyYW0gYXJyYXkgJG90aGVyX3Byb3BzIOi/veWKoOeahOWxnuaApw0KICogQHBhcmFtIGFycmF5ICRyZW1vdmVfcHJvcHMg6KaB5Yig6Zmk55qE5bGe5oCnDQogKiBAcGFyYW0gYXJyYXkgJHdpdGhfcmVsYXRpb25zIOimgei/veWKoOeahOWFs+iBlOWvueixoQ0KICovDQpmdW5jdGlvbiBBcGlHZXRPYmplY3RBcnJheSgkb2JqZWN0LCAkb3RoZXJfcHJvcHMgPSBhcnJheSgpLCAkcmVtb3ZlX3Byb3BzID0gYXJyYXkoKSwgJHdpdGhfcmVsYXRpb25zID0gYXJyYXkoKSkNCnsNCiAgICAkYXJyYXkgPSAkb2JqZWN0LT5HZXREYXRhKCk7DQogICAgdW5zZXQoJGFycmF5WydNZXRhJ10pOw0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQVBJX0dldF9PYmplY3RfQXJyYXknXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwbmFtZSgkb2JqZWN0LCAkYXJyYXksICRvdGhlcl9wcm9wcywgJHJlbW92ZV9wcm9wcywgJHdpdGhfcmVsYXRpb25zKTsNCiAgICB9DQoNCiAgICBmb3JlYWNoICgkb3RoZXJfcHJvcHMgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgJGFycmF5WyR2YWx1ZV0gPSAkb2JqZWN0LT4kdmFsdWU7DQogICAgfQ0KICAgIHN3aXRjaCAoZ2V0X2NsYXNzKCRvYmplY3QpKSB7DQogICAgICAgIGNhc2UgJ01lbWJlcic6DQogICAgICAgICAgICAkcmVtb3ZlX3Byb3BzW10gPSAnR3VpZCc7DQogICAgICAgICAgICAkcmVtb3ZlX3Byb3BzW10gPSAnUGFzc3dvcmQnOw0KICAgICAgICAgICAgJHJlbW92ZV9wcm9wc1tdID0gJ0lQJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgIyBjb2RlLi4uDQogICAgICAgICAgICBicmVhazsNCiAgICB9DQoNCiAgICBmb3JlYWNoICgkcmVtb3ZlX3Byb3BzIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgIHVuc2V0KCRhcnJheVskdmFsdWVdKTsNCiAgICB9DQogICAgZm9yZWFjaCAoJHdpdGhfcmVsYXRpb25zIGFzICRyZWxhdGlvbiA9PiAkaW5mbykgew0KICAgICAgICAkcmVsYXRpb25fb2JqID0gJG9iamVjdC0+JHJlbGF0aW9uOw0KICAgICAgICBpZiAoaXNfYXJyYXkoJHJlbGF0aW9uX29iaikpIHsNCiAgICAgICAgICAgICRhcnJheVskcmVsYXRpb25dID0gQXBpR2V0T2JqZWN0QXJyYXlMaXN0KA0KICAgICAgICAgICAgICAgICRyZWxhdGlvbl9vYmosDQogICAgICAgICAgICAgICAgaXNzZXQoJGluZm9bJ290aGVyX3Byb3BzJ10pID8gJGluZm9bJ290aGVyX3Byb3BzJ10gOiBhcnJheSgpLA0KICAgICAgICAgICAgICAgIGlzc2V0KCRpbmZvWydyZW1vdmVfcHJvcHMnXSkgPyAkaW5mb1sncmVtb3ZlX3Byb3BzJ10gOiBhcnJheSgpLA0KICAgICAgICAgICAgICAgIGlzc2V0KCRpbmZvWyd3aXRoX3JlbGF0aW9ucyddKSA/ICRpbmZvWyd3aXRoX3JlbGF0aW9ucyddIDogYXJyYXkoKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRhcnJheVskcmVsYXRpb25dID0gQXBpR2V0T2JqZWN0QXJyYXkoDQogICAgICAgICAgICAgICAgJHJlbGF0aW9uX29iaiwNCiAgICAgICAgICAgICAgICBpc3NldCgkaW5mb1snb3RoZXJfcHJvcHMnXSkgPyAkaW5mb1snb3RoZXJfcHJvcHMnXSA6IGFycmF5KCksDQogICAgICAgICAgICAgICAgaXNzZXQoJGluZm9bJ3JlbW92ZV9wcm9wcyddKSA/ICRpbmZvWydyZW1vdmVfcHJvcHMnXSA6IGFycmF5KCksDQogICAgICAgICAgICAgICAgaXNzZXQoJGluZm9bJ3dpdGhfcmVsYXRpb25zJ10pID8gJGluZm9bJ3dpdGhfcmVsYXRpb25zJ10gOiBhcnJheSgpDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiAkYXJyYXk7DQp9DQoNCi8qKg0KICogQVBJIOiOt+WPluaMh+WumuWxnuaAp+eahEFycmF5IOWIl+ihqC4NCiAqDQogKiBAcGFyYW0gYXJyYXkgJGxpc3QNCiAqIEBwYXJhbSBhcnJheSAkb3RoZXJfcHJvcHMg6L+95Yqg55qE5bGe5oCnDQogKiBAcGFyYW0gYXJyYXkgJHJlbW92ZV9wcm9wcyDopoHliKDpmaTnmoTlsZ7mgKcNCiAqIEBwYXJhbSBhcnJheSAkd2l0aF9yZWxhdGlvbnMg6KaB6L+95Yqg55qE5YWz6IGU5a+56LGhDQogKi8NCmZ1bmN0aW9uIEFwaUdldE9iamVjdEFycmF5TGlzdCgkbGlzdCwgJG90aGVyX3Byb3BzID0gYXJyYXkoKSwgJHJlbW92ZV9wcm9wcyA9IGFycmF5KCksICR3aXRoX3JlbGF0aW9ucyA9IGFycmF5KCkpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICBpZiAoYXJyYXlfa2V5X2V4aXN0cygnQXV0aG9yJywgJHdpdGhfcmVsYXRpb25zKSkgew0KICAgICAgICAkemJwLT5Mb2FkTWVtYmVyc0luTGlzdCgkbGlzdCk7DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJGxpc3QgYXMgJiRvYmplY3QpIHsNCiAgICAgICAgJG9iamVjdCA9IEFwaUdldE9iamVjdEFycmF5KCRvYmplY3QsICRvdGhlcl9wcm9wcywgJHJlbW92ZV9wcm9wcywgJHdpdGhfcmVsYXRpb25zKTsNCiAgICB9DQoNCiAgICByZXR1cm4gJGxpc3Q7DQp9DQoNCi8qKg0KICogQVBJIOiOt+WPlue6puadn+i/h+a7pOadoeS7tg0KICog5bCG6K+35rGC5Lit55qE5Y+C5pWw6L2s5o2i5Li6IFNRTCBMSU1JVC9PUkRFUiDmn6Xor6LmnaHku7YuDQogKg0KICogQHBhcmFtIGludCAkbGltaXREZWZhdWx0IOm7mOiupOiusOW9leaVsA0KICogQHBhcmFtIGFycmF5ICRzb3J0YWJsZUNvbHVtbnMgc29ydGJ5IOWvueW6lOeahOaooeWdl+aVsOaNruihqOS4reaUr+aMgeaOkuW6j+eahOWxnuaApw0KICogQHBhcmFtIGludCAkbWF4X2NvdW50X3BlcnBhZ2Ug5q+P6aG15pyA5aSa5p2h5pWwDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIEFwaUdldFJlcXVlc3RGaWx0ZXIoJGxpbWl0RGVmYXVsdCA9IG51bGwsICRzb3J0YWJsZUNvbHVtbnMgPSBhcnJheSgpLCAkbWF4X2NvdW50X3BlcnBhZ2UgPSBudWxsKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJGNvbmRpdGlvbiA9IGFycmF5KA0KICAgICAgICAnbGltaXQnID0+IGFycmF5KDAsICRsaW1pdERlZmF1bHQpLA0KICAgICAgICAnb3JkZXInID0+IG51bGwsDQogICAgICAgICdvcHRpb24nID0+IG51bGwsDQogICAgKTsNCiAgICAkc29ydEJ5ID0gKHN0cmluZykgR2V0VmFycygnc29ydGJ5Jyk7DQogICAgJG9yZGVyID0gc3RydG91cHBlcigoc3RyaW5nKSBHZXRWYXJzKCdvcmRlcicpKTsNCiAgICAkcGFnZU5vdyA9IChpbnQpIEdldFZhcnMoJ3BhZ2UnKTsNCiAgICAkcGVyUGFnZSA9IChpbnQpIEdldFZhcnMoJ3BlcnBhZ2UnKTsNCg0KICAgICRtYXhfY291bnRfcGVycGFnZSA9ICgkbWF4X2NvdW50X3BlcnBhZ2UgIT09IG51bGwpID8gJG1heF9jb3VudF9wZXJwYWdlIDogJHpicC0+YXBpTWF4Q291bnRQZXJQYWdlOw0KDQogICAgaWYgKCgkcGVyUGFnZSA+IChpbnQpICRtYXhfY291bnRfcGVycGFnZSkgfHwgKChpbnQpICRwZXJQYWdlIDw9IDApKSB7DQogICAgICAgIGlmICgkbGltaXREZWZhdWx0ICE9PSBudWxsKSB7DQogICAgICAgICAgICAkcGVyUGFnZSA9ICRsaW1pdERlZmF1bHQ7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkcGVyUGFnZSA9IDEwOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8g5o6S5bqP6aG65bqPDQogICAgaWYgKCFlbXB0eSgkc29ydEJ5KSAmJiBpc3NldCgkc29ydGFibGVDb2x1bW5zWyRzb3J0QnldKSkgew0KICAgICAgICAkY29uZGl0aW9uWydvcmRlciddID0gYXJyYXkoJHNvcnRhYmxlQ29sdW1uc1skc29ydEJ5XSA9PiAnQVNDJyk7DQogICAgfQ0KICAgIGlmICghaXNfbnVsbCgkY29uZGl0aW9uWydvcmRlciddKSAmJiAkb3JkZXIgPT0gJ0RFU0MnKSB7DQogICAgICAgICRjb25kaXRpb25bJ29yZGVyJ11bJHNvcnRhYmxlQ29sdW1uc1skc29ydEJ5XV0gPSAkb3JkZXI7DQogICAgfQ0KDQogICAgaWYgKCRwZXJQYWdlKSB7DQogICAgICAgICRwID0gbmV3IFBhZ2ViYXIobnVsbCwgZmFsc2UpOyAvLyDnrKzkuIDkuKrlj4LmlbDkuLogbnVsbO+8jOS4jemcgOimgeWIhumhtSBVcmwg5aSE55CGDQogICAgICAgICRwLT5QYWdlTm93ID0gKGludCkgJHBhZ2VOb3cgPT0gMCA/IDEgOiAoaW50KSAkcGFnZU5vdzsNCiAgICAgICAgJHAtPlBhZ2VDb3VudCA9ICRwZXJQYWdlOw0KICAgICAgICAkbGltaXQgPSBhcnJheSgoJHAtPlBhZ2VOb3cgLSAxKSAqICRwLT5QYWdlQ291bnQsICRwLT5QYWdlQ291bnQpOw0KICAgICAgICAkb3AgPSBhcnJheSgncGFnZWJhcicgPT4gJiRwKTsNCg0KICAgICAgICAkY29uZGl0aW9uWydsaW1pdCddID0gJGxpbWl0Ow0KICAgICAgICAkY29uZGl0aW9uWydvcHRpb24nXSA9ICRvcDsNCiAgICB9DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9BUElfR2V0X1JlcXVlc3RfRmlsdGVyJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcG5hbWUoJGNvbmRpdGlvbik7DQogICAgfQ0KICAgIHJldHVybiAkY29uZGl0aW9uOw0KfQ0KDQovKioNCiAqIOiOt+WPluWIhumhteS/oeaBry4NCiAqDQogKiBAcGFyYW0gYXJyYXl8bnVsbCAkb3B0aW9uDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIEFwaUdldFBhZ2ViYXJJbmZvKCRvcHRpb24gPSBudWxsKQ0Kew0KICAgIGlmICgkb3B0aW9uID09PSBudWxsKSB7DQogICAgICAgIC8vIOeUqCBzdGRDbGFzcyDogIzkuI3nlKggYXJyYXkoKSDvvIzkuLrkuobkuLrnqbrml7YganNvbiDmmL7npLoge30g6ICM5LiN5pivIFtdDQogICAgICAgIHJldHVybiBuZXcgc3RkQ2xhc3M7DQogICAgfQ0KDQogICAgJGluZm8gPSBhcnJheSgpOw0KICAgICRwYWdlYmFyID0gJiRvcHRpb25bJ3BhZ2ViYXInXTsNCg0KICAgIC8vJGluZm9bJ0NvdW50J10gPSAkcGFnZWJhci0+Q291bnQ7DQogICAgJGluZm9bJ0FsbENvdW50J10gPSAkcGFnZWJhci0+QWxsQ291bnQ7DQogICAgJGluZm9bJ0N1cnJlbnRDb3VudCddID0gJHBhZ2ViYXItPkN1cnJlbnRDb3VudDsNCiAgICAvLyRpbmZvWydQYWdlQmFyQ291bnQnXSA9ICRwYWdlYmFyLT5QYWdlQmFyQ291bnQ7DQogICAgLy8kaW5mb1snUGFnZUNvdW50J10gPSAkcGFnZWJhci0+UGFnZUNvdW50Ow0KICAgICRpbmZvWydQZXJQYWdlQ291bnQnXSA9ICRwYWdlYmFyLT5QZXJQYWdlQ291bnQ7DQogICAgJGluZm9bJ1BhZ2VBbGwnXSA9ICRwYWdlYmFyLT5QYWdlQWxsOw0KICAgICRpbmZvWydQYWdlTm93J10gPSAkcGFnZWJhci0+UGFnZU5vdzsNCiAgICAkaW5mb1snUGFnZUN1cnJlbnQnXSA9ICRwYWdlYmFyLT5QYWdlQ3VycmVudDsNCiAgICAkaW5mb1snUGFnZUZpcnN0J10gPSAkcGFnZWJhci0+UGFnZUZpcnN0Ow0KICAgICRpbmZvWydQYWdlTGFzdCddID0gJHBhZ2ViYXItPlBhZ2VMYXN0Ow0KICAgICRpbmZvWydQYWdlUHJldmlvdXMnXSA9ICRwYWdlYmFyLT5QYWdlUHJldmlvdXM7DQogICAgJGluZm9bJ1BhZ2VOZXh0J10gPSAkcGFnZWJhci0+UGFnZU5leHQ7DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9BUElfR2V0X1BhZ2luYXRpb25fSW5mbyddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnBuYW1lKCRpbmZvLCAkcGFnZWJhcik7DQogICAgfQ0KICAgIHJldHVybiAkaW5mbzsNCn0NCg0KLyoqDQogKiBBUEkg6I635Y+W5Y+K6L+H5ruk5YWz6IGU5a+56LGh6K+35rGCLg0KICoNCiAqIEBwYXJhbSBhcnJheSAkaW5mbyDkvKDlhaXliLAgQXBpR2V0T2JqZWN0QXJyYXkg55qE5YWz6IGU5L+h5oGvDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIEFwaUdldEFuZEZpbHRlclJlbGF0aW9uUXVlcnkoJGluZm8pDQp7DQogICAgJHJlbGF0aW9uc19yZXEgPSB0cmltKEdldFZhcnMoJ3dpdGhfcmVsYXRpb25zJykpOw0KDQogICAgaWYgKGVtcHR5KCRyZWxhdGlvbnNfcmVxKSkgew0KICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICB9DQoNCiAgICAkcmVsYXRpb25zID0gZXhwbG9kZSgnLCcsICRyZWxhdGlvbnNfcmVxKTsNCiAgICAkcmV0X3JlbGF0aW9ucyA9IGFycmF5KCk7DQoNCiAgICBmb3JlYWNoICgkcmVsYXRpb25zIGFzICRyZWxhdGlvbikgew0KICAgICAgICAkcmVsYXRpb24gPSB0cmltKCRyZWxhdGlvbik7DQogICAgICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCRyZWxhdGlvbiwgJGluZm8pKSB7DQogICAgICAgICAgICAkcmV0X3JlbGF0aW9uc1skcmVsYXRpb25dID0gJGluZm9bJHJlbGF0aW9uXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkcmV0X3JlbGF0aW9uczsNCn0NCg0KLyoqDQogKiBBUEkg5Lyg57uf55m75b2V5pe255qEUE9TVOaWueW8j+S4i+eahCBDU1JGIOmqjOivgS4NCiAqDQogKiBAcGFyYW0gYm9vbGVhbiAkZm9yY2VfY2hlY2sg5piv5ZCm5by65Yi25qOA5p+lDQogKi8NCmZ1bmN0aW9uIEFwaVZlcmlmeUNTUkYoJGZvcmNlX2NoZWNrID0gZmFsc2UpDQp7DQogICAgZ2xvYmFsICR6YnAsICRtb2QsICRhY3Q7DQoNCiAgICBpZiAoIWRlZmluZWQoJ1pCUF9JTl9BUElfVkVSSUZZQllUT0tFTicpKSB7DQogICAgICAgICRjc3JmX3Rva2VuID0gR2V0VmFycygnY3NyZl90b2tlbicpOw0KDQogICAgICAgIGlmICghJGZvcmNlX2NoZWNrKSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ1JFUVVFU1RfTUVUSE9EJ10pICYmICRfU0VSVkVSWydSRVFVRVNUX01FVEhPRCddICE9PSAnUE9TVCcpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChwaHBfc2FwaV9uYW1lKCkgPT0gJ2NsaScpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIOS4jemcgOimgeagoemqjCBDU1JGIOeahCBBUEkNCiAgICAgICAgICAgICRza2lwX2FjdHMgPSBhcnJheSgNCiAgICAgICAgICAgICAgICBhcnJheSgnbW9kJyA9PiAnbWVtYmVyJywgJ2FjdCcgPT4gJ2xvZ2luJyksDQogICAgICAgICAgICAgICAgYXJyYXkoJ21vZCcgPT4gJ2NvbW1lbnQnLCAnYWN0JyA9PiAncG9zdCcpDQogICAgICAgICAgICApOw0KDQogICAgICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9BUElfVmVyaWZ5Q1NSRl9Ta2lwJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAgICAgJGZwbmFtZSgkc2tpcF9hY3RzKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yZWFjaCAoJHNraXBfYWN0cyBhcyAkYXBpX2FjdCkgew0KICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJGFwaV9hY3RbJ21vZCddKSkgew0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKCFpc3NldCgkYXBpX2FjdFsnYWN0J10pICYmICRhcGlfYWN0Wydtb2QnXSA9PSAkbW9kKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOWPquWumuS5ieS6hiBtb2Qg5bm25Yy56YWN77yM5pS+6KGMKOavlOWmguivtOWumuS5ieS6hiBtb2Q9bWVtYmVyIO+8jOmCoyBtZW1iZXIgbW9kIOS4i+aJgOaciSBQT1NUIOmDveaUvuihjCkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoJGFwaV9hY3RbJ21vZCddID09ICRtb2QgJiYgJGFwaV9hY3RbJ2FjdCddID09ICRhY3QpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8g5Yy56YWN5LqGIG1vZCDlkowgYWN077yM5pS+6KGMDQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoISR6YnAtPlZlcmlmeUNTUkZUb2tlbigkY3NyZl90b2tlbiwgJ2FwaScpKSB7DQogICAgICAgICAgICAkR0xPQkFMU1snemJwJ10tPlNob3dFcnJvcigkR0xPQkFMU1snbGFuZyddWydlcnJvciddWyc1J10sIF9fRklMRV9fLCBfX0xJTkVfXywgbnVsbCwgNDE5KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCn0NCg0KLyoqDQogKiBBUEkg6L295YWlIFBPU1Qg5pWw5o2u77yI5YmN56uvIEpTT07vvIkuDQogKi8NCmZ1bmN0aW9uIEFwaUxvYWRQb3N0RGF0YSgpDQp7DQogICAgJGlucHV0ID0gZmlsZV9nZXRfY29udGVudHMoJ3BocDovL2lucHV0Jyk7DQogICAgaWYgKCRpbnB1dCAmJiAoJGRhdGEgPSBqc29uX2RlY29kZSgkaW5wdXQsIHRydWUpKSAmJiBpc19hcnJheSgkZGF0YSkpIHsNCiAgICAgICAgJF9QT1NUID0gYXJyYXlfbWVyZ2UoJGRhdGEsICRfUE9TVCk7DQogICAgfQ0KfQ0KDQovKioNCiAqIEFQSSDmtL7lj5EuDQogKg0KICogQHBhcmFtIGFycmF5ICAgICAgICRtb2RzDQogKiBAcGFyYW0gc3RyaW5nICAgICAgJG1vZA0KICogQHBhcmFtIHN0cmluZ3xudWxsICRhY3QNCiAqLw0KZnVuY3Rpb24gQXBpRGlzcGF0Y2goJG1vZHMsICRtb2QsICRhY3QpDQp7DQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQVBJX0Rpc3BhdGNoJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcG5hbWUoJG1vZHMsICRtb2QsICRhY3QpOw0KICAgIH0NCg0KICAgIGlmIChlbXB0eSgkYWN0KSkgew0KICAgICAgICAkYWN0ID0gJ2dldCc7DQogICAgfQ0KDQogICAgaWYgKGlzc2V0KCRtb2RzWyRtb2RdKSAmJiBmaWxlX2V4aXN0cygkbW9kX2ZpbGUgPSAkbW9kc1skbW9kXSkpIHsNCiAgICAgICAgaW5jbHVkZV9vbmNlICRtb2RfZmlsZTsNCiAgICAgICAgJGZ1bmMgPSAnYXBpXycgLiAkbW9kIC4gJ18nIC4gJGFjdDsNCiAgICAgICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygkZnVuYykpIHsNCiAgICAgICAgICAgICRyZXN1bHQgPSBjYWxsX3VzZXJfZnVuYygkZnVuYyk7DQoNCiAgICAgICAgICAgIEFwaVJlc3VsdERhdGEoJHJlc3VsdCk7DQoNCiAgICAgICAgICAgICRyID0gQXBpUmVzcG9uc2UoDQogICAgICAgICAgICAgICAgaXNzZXQoJHJlc3VsdFsnZGF0YSddKSA/ICRyZXN1bHRbJ2RhdGEnXSA6IG51bGwsDQogICAgICAgICAgICAgICAgaXNzZXQoJHJlc3VsdFsnZXJyb3InXSkgPyAkcmVzdWx0WydlcnJvciddIDogbnVsbCwNCiAgICAgICAgICAgICAgICBpc3NldCgkcmVzdWx0Wydjb2RlJ10pID8gJHJlc3VsdFsnY29kZSddIDogMjAwLA0KICAgICAgICAgICAgICAgIGlzc2V0KCRyZXN1bHRbJ21lc3NhZ2UnXSkgPyAkcmVzdWx0WydtZXNzYWdlJ10gOiAnT0snDQogICAgICAgICAgICApOw0KDQogICAgICAgICAgICByZXR1cm4gJHI7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAkR0xPQkFMU1snemJwJ10tPlNob3dFcnJvcigkR0xPQkFMU1snbGFuZyddWydlcnJvciddWyc5NiddLCBfX0ZJTEVfXywgX19MSU5FX18sIG51bGwsIDQwNCk7DQp9DQoNCi8qKg0KICogQVBJIOWcsOWdgOeUn+aIkC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRtb2QNCiAqIEBwYXJhbSBzdHJpbmcgJGFjdA0KICogQHBhcmFtIGFycmF5ICAkcXVlcnkNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBBcGlVcmxHZW5lcmF0ZSgkbW9kLCAkYWN0ID0gJ2dldCcsICRxdWVyeSA9IGFycmF5KCkpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICAkbW9kID0gc3RydG9sb3dlcigkbW9kKTsNCiAgICAkYWN0ID0gc3RydG9sb3dlcigkYWN0KTsNCg0KICAgIGlmIChjb3VudCgkcXVlcnkpID4gMCkgew0KICAgICAgICAkcXVlcnlfc3RyaW5nID0gJyYnIC4gaHR0cF9idWlsZF9xdWVyeSgkcXVlcnkpOw0KICAgIH0gZWxzZSB7DQogICAgICAgICRxdWVyeV9zdHJpbmcgPSAnJzsNCiAgICB9DQoNCiAgICByZXR1cm4gJHpicC0+aG9zdCAuICd6Yl9zeXN0ZW0vYXBpLnBocD9tb2Q9JyAuICRtb2QgLiAnJmFjdD0nIC4gJGFjdCAuICRxdWVyeV9zdHJpbmc7DQp9DQoNCi8qKg0KICogQVBJIOW8gOWQr+ajgOa1i+mZkOa1gS4NCiAqLw0KZnVuY3Rpb24gQXBpQ2hlY2tMaW1pdCgpDQp7DQogICAgaWYgKCRHTE9CQUxTWydvcHRpb24nXVsnWkNfQVBJX1RIUk9UVExFX0VOQUJMRSddKSB7DQogICAgICAgIEFwaVRocm90dGxlKCdkZWZhdWx0JywgJEdMT0JBTFNbJ29wdGlvbiddWydaQ19BUElfVEhST1RUTEVfTUFYX1JFUVNfUEVSX01JTiddID8gJEdMT0JBTFNbJ29wdGlvbiddWydaQ19BUElfVEhST1RUTEVfTUFYX1JFUVNfUEVSX01JTiddIDogNjApOw0KICAgIH0NCn0NCg0KLyoqDQogKiBBUEkg6ZmQ5rWBLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgICRuYW1lDQogKiBAcGFyYW0gaW50ZWdlciAkbWF4X3JlcXMNCiAqIEBwYXJhbSBpbnRlZ2VyICRwZXJpb2QNCiAqLw0KZnVuY3Rpb24gQXBpVGhyb3R0bGUoJG5hbWUgPSAnZGVmYXVsdCcsICRtYXhfcmVxcyA9IDYwLCAkcGVyaW9kID0gNjApDQp7DQogICAgZ2xvYmFsICR6YnBjYWNoZTsNCg0KICAgIGlmICghaXNzZXQoJHpicGNhY2hlKSkgew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfSBlbHNlIHsNCiAgICAgICAgJHpicGNhY2hlLT5Db25uZWN0KCk7DQogICAgfQ0KDQogICAgJHVzZXJfaWQgPSBtZDUoR2V0R3Vlc3RJUCgpKTsNCg0KICAgICRjYWNoZV9rZXkgPSAiYXBpLXRocm90dGxlOiRuYW1lOiR1c2VyX2lkIjsNCiAgICAkY2FjaGVkX3ZhbHVlID0gJHpicGNhY2hlLT5HZXQoJGNhY2hlX2tleSk7DQogICAgJGNhY2hlZF9yZXEgPSBqc29uX2RlY29kZSgkY2FjaGVkX3ZhbHVlLCB0cnVlKTsNCiAgICBpZiAoISRjYWNoZWRfdmFsdWUgfHwgISRjYWNoZWRfcmVxIHx8ICh0aW1lKCkgPj0gJGNhY2hlZF9yZXFbJ2V4cGlyZV90aW1lJ10pKSB7DQogICAgICAgICRjYWNoZWRfcmVxID0gYXJyYXkoJ2hpdHMnID0+IDAsICdleHBpcmVfdGltZScgPT4gKHRpbWUoKSArICRwZXJpb2QpKTsNCiAgICB9DQoNCiAgICBpZiAoJGNhY2hlZF9yZXFbJ2hpdHMnXSA+PSAkbWF4X3JlcXMpIHsNCiAgICAgICAgJEdMT0JBTFNbJ3picCddLT5TaG93RXJyb3IoJ1RvbyBtYW55IHJlcXVlc3RzLicsIF9fRklMRV9fLCBfX0xJTkVfXywgbnVsbCwgNDI5KTsNCiAgICB9DQoNCiAgICAkY2FjaGVkX3JlcVsnaGl0cyddKys7DQogICAgJHpicGNhY2hlLT5TZXQoJGNhY2hlX2tleSwganNvbl9lbmNvZGUoJGNhY2hlZF9yZXEpLCAoJGNhY2hlZF9yZXFbJ2V4cGlyZV90aW1lJ10gLSB0aW1lKCkpKTsNCg0KICAgIHJldHVybiB0cnVlOw0KfQ0KDQovKioNCiAqIEFQSSDov5Tlm57mlbDmja7lpITnkIblh73mlbANCiAqLw0KZnVuY3Rpb24gQXBpUmVzdWx0RGF0YSgmJGRhdGEpDQp7DQogICAgZ2xvYmFsICRtb2QsICRhY3Q7DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9BUElfUmVzdWx0X0RhdGEnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwbmFtZSgkZGF0YSwgJG1vZCwgJGFjdCk7DQogICAgfQ0KfQ0KDQovKioNCiAqIEFQSSDmo4Dmn6VIdHRwIE1ldGhvZA0KICovDQpmdW5jdGlvbiBBcGlDaGVja0h0dHBNZXRob2QoJGFsbG93X21ldGhvZCA9ICdHRVR8UE9TVHxQVVR8REVMRVRFJykNCnsNCiAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ1JFUVVFU1RfTUVUSE9EJ10pICYmIHN0cmlwb3MoJGFsbG93X21ldGhvZCwgJF9TRVJWRVJbJ1JFUVVFU1RfTUVUSE9EJ10pID09PSBmYWxzZSkgew0KICAgICAgICAkR0xPQkFMU1snemJwJ10tPlNob3dFcnJvcigkR0xPQkFMU1snbGFuZyddWydlcnJvciddWyc1J10sIF9fRklMRV9fLCBfX0xJTkVfXywgbnVsbCwgNDA1KTsNCiAgICB9DQp9DQo=</file>
	<file name='zb_system\function\c_system_base.php' crc32='E21BD50B'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_common.php' crc32='342E295A'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_debug.php' crc32='D7BDC86E'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_event.php' crc32='5DF6A0CE'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_function.php' crc32='71E3B702'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_misc.php' crc32='D50F2EC'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_plugin.php' crc32='B9407EB0'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_route.php' crc32='CED2E785'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_version.php' crc32='5D066609'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNycpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzInKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMzAwMCcpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ1RlbmV0Jyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT04nLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQgLiAnLicgLiBaQ19WRVJTSU9OX0NPTU1JVCk7DQppZiAoc3RyY2FzZWNtcChaQ19WRVJTSU9OX0NPREVOQU1FLCAnQmV0YScpID09IDAgfHwgc3RyY2FzZWNtcChaQ19WRVJTSU9OX0NPREVOQU1FLCAnQWxwaGEnKSA9PSAwKSB7DQogICAgZGVmaW5lKCdaQ19WRVJTSU9OX0RJU1BMQVknLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQgLiAnICcgLiBaQ19WRVJTSU9OX0NPREVOQU1FKTsNCn0gZWxzZSB7DQogICAgZGVmaW5lKCdaQ19WRVJTSU9OX0RJU1BMQVknLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQpOw0KfQ0KZGVmaW5lKCdaQ19WRVJTSU9OX0ZVTEwnLCBaQ19WRVJTSU9OIC4gJyAoJyAuIFpDX1ZFUlNJT05fQ09ERU5BTUUgLiAnKScpOw0KZGVmaW5lKCdaQ19CTE9HX0NPTU1JVCcsIFpDX1ZFUlNJT05fQ09NTUlUKTsgLy8g5Li65YaZ5YWl57O757uf6YWN572u57uf5LiA6aOO5qC8DQokR0xPQkFMU1snYmxvZ3ZlcnNpb24nXSA9IFpDX1ZFUlNJT05fTUFKT1IgLiBaQ19WRVJTSU9OX01JTk9SIC4gWkNfVkVSU0lPTl9DT01NSVQ7DQpkZWZpbmUoJ1pDX05PV19WRVJTSU9OJywgJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0KZGVmaW5lKCdaQ19CTE9HX1ZFUlNJT04nLCBaQ19WRVJTSU9OX0RJU1BMQVkgLiAnIEJ1aWxkICcgLiAkR0xPQkFMU1snYmxvZ3ZlcnNpb24nXSk7DQpkZWZpbmUoJ1pDX0xBU1RfVkVSU0lPTicsICcxNzI4MDAnKTsgLy/mlbDmja7lupPph4zlhpnlhaXnmoTmnIDmlrDnmoTmlbDmja7lupPniYjmnKzlj7fvvIjpnZ7ns7vnu5/niYjmnKzlj7fvvIzlj6rmnInmm7TmlLnmlbDmja7lupPnu5PmnoTmiY3kvJrlj5jliqjvvIkNCg==</file>
	<file name='zb_system\function\lib\app.php' crc32='8499C0F6'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\base.php' crc32='4A00A9FF'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\basemember.php' crc32='A5142234'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiDnlKjmiLfln7rnsbsuDQogKg0KICogQHByb3BlcnR5IGludHxzdHJpbmcgSUQNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIExldmVsIOeUqOaIt+etiee6pw0KICogQHByb3BlcnR5IHN0cmluZyBOYW1lDQogKiBAcHJvcGVydHkgc3RyaW5nIFBhc3N3b3JkDQogKiBAcHJvcGVydHkgc3RyaW5nIFRlbXBsYXRlDQogKiBAcHJvcGVydHkgc3RyaW5nIEVtYWlsDQogKiBAcHJvcGVydHkgc3RyaW5nIExldmVsTmFtZSDnrYnnuqfor6bnu4bkv6Hmga8NCiAqIEBwcm9wZXJ0eSBzdHJpbmcgSG9tZVBhZ2UNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgR3VpZA0KICogQHByb3BlcnR5IHN0cmluZyBVcmwNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgQWxpYXMNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIFN0YXR1cyDnlKjmiLfnirbmgIENCiAqIEBwcm9wZXJ0eSBzdHJpbmcgUGFzc1dvcmRfTUQ1UGF0aA0KICogQHByb3BlcnR5IHN0cmluZyBTdGF0aWNOYW1lIOWvueWkluWxleekuueahOWQjeWtl++8iOaOqOiNkOeUqOS6juabv+S7o05hbWXlkoxBbGlhc++8iQ0KICogQHByb3BlcnR5IGJvb2wgSXNHb2Qg5piv5ZCm5pyA6auY566h55CG5ZGYDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBBcnRpY2xlcyDmlofnq6DmlbDph48NCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIFBhZ2VzIOmhtemdouaVsOmHjw0KICogQHByb3BlcnR5IGludHxzdHJpbmcgQ29tbWVudHMg6K+E6K665pWw6YePDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBVcGxvYWRzIOS4iuS8oOaVsOmHjw0KICovDQpjbGFzcyBCYXNlTWVtYmVyIGV4dGVuZHMgQmFzZQ0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg5aS05YOP5Zu+54mH5Zyw5Z2ADQogICAgICovDQogICAgcHJpdmF0ZSAkcHJpdmF0ZV9hdmF0YXIgPSAnJzsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYm9vbCDliJvlp4tpZA0KICAgICAqLw0KICAgIHByaXZhdGUgJHByaXZhdGVfaXNnb2QgPSBudWxsOw0KDQogICAgLyoqDQogICAgICog5p6E6YCg5Ye95pWw77yM6buY6K6k55So5oi36K6+5Li6YW5vbnltb3VzLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdCgkemJwLT50YWJsZVsnTWVtYmVyJ10sICR6YnAtPmRhdGFpbmZvWydNZW1iZXInXSwgX19DTEFTU19fKTsNCg0KICAgICAgICAkdGhpcy0+TmFtZSA9ICR6YnAtPmxhbmdbJ21zZyddWydhbm9ueW1vdXMnXTsNCg0KICAgICAgICAkdGhpcy0+Q3JlYXRlVGltZSA9IHRpbWUoKTsNCiAgICAgICAgJHRoaXMtPlVwZGF0ZVRpbWUgPSAkdGhpcy0+VXBkYXRlVGltZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDoh6rlrprkuYnlh73mlbAuDQogICAgICoNCiAgICAgKiBAYXBpIEZpbHRlcl9QbHVnaW5fTWVtYmVyX0NhbGwNCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbWV0aG9kDQogICAgICogQHBhcmFtICRhcmdzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY2FsbCgkbWV0aG9kLCAkYXJncykNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX01lbWJlcl9DYWxsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbWV0aG9kLCAkYXJncyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6Ieq5a6a5LmJ5Y+C5pWw5Y+K5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0gJG5hbWUNCiAgICAgKiBAcGFyYW0gJHZhbHVlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fc2V0KCRuYW1lLCAkdmFsdWUpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKGluX2FycmF5KCRuYW1lLCBhcnJheSgnVXJsJywgJ0F2YXRhcicsICdMZXZlbE5hbWUnLCAnRW1haWxNRDUnLCAnU3RhdGljTmFtZScsICdQYXNzV29yZF9NRDVQYXRoJywgJ0lzR29kJywgJ0FsaWFzRmlyc3QnKSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfSBlbHNlaWYgKCRuYW1lID09ICdUZW1wbGF0ZScpIHsNCiAgICAgICAgICAgIGlmICgkdmFsdWUgPT0gJHpicC0+b3B0aW9uWydaQ19JTkRFWF9ERUZBVUxUX1RFTVBMQVRFJ10pIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSAnJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5kYXRhWyRuYW1lXSA9ICR2YWx1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX01lbWJlcl9TZXQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMsICRuYW1lLCAkdmFsdWUpOw0KICAgICAgICB9DQogICAgICAgIHBhcmVudDo6X19zZXQoJG5hbWUsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkfHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2dldCgkbmFtZSkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1VybCcpIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX01lbWJlcl9VcmwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJHJvdXRlcyA9ICR6YnAtPkdldFBvc3RUeXBlKDAsICdyb3V0ZXMnKTsNCiAgICAgICAgICAgIGlmIChpc3NldCgkcm91dGVzWydwb3N0XycgLiAkemJwLT5HZXRQb3N0VHlwZSgwLCAnbmFtZScpIC4gJ19saXN0X2F1dGhvciddKSkgew0KICAgICAgICAgICAgICAgICR1ID0gbmV3IFVybFJ1bGUoJHpicC0+R2V0Um91dGUoJHJvdXRlc1sncG9zdF8nIC4gJHpicC0+R2V0UG9zdFR5cGUoMCwgJ25hbWUnKSAuICdfbGlzdF9hdXRob3InXSkpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkdSA9IG5ldyBVcmxSdWxlKCR6YnAtPkdldFBvc3RUeXBlKDAsICdsaXN0X2F1dGhvcl91cmxydWxlJykpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJHUtPlJ1bGVzT2JqZWN0ID0gJiR0aGlzOw0KICAgICAgICAgICAgJHUtPlJ1bGVzWyd7JWlkJX0nXSA9ICR0aGlzLT5JRDsNCiAgICAgICAgICAgICR1LT5SdWxlc1sneyVhbGlhcyV9J10gPSAkdGhpcy0+QWxpYXMgPT0gJycgPyByYXd1cmxlbmNvZGUoJHRoaXMtPk5hbWUpIDogJHRoaXMtPkFsaWFzOw0KDQogICAgICAgICAgICByZXR1cm4gJHUtPk1ha2UoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ0F2YXRhcicpIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX01lbWJlcl9BdmF0YXInXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZwcmV0dXJuKSB7DQogICAgICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJHRoaXMtPnByaXZhdGVfYXZhdGFyKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wcml2YXRlX2F2YXRhcjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHMgPSAkemJwLT51c2Vyc2RpciAuICdhdmF0YXIvJyAuICR0aGlzLT5JRCAuICcucG5nJzsNCiAgICAgICAgICAgIGlmIChpc19yZWFkYWJsZSgkcykpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+cHJpdmF0ZV9hdmF0YXIgPSAkemJwLT5ob3N0IC4gJ3piX3VzZXJzL2F2YXRhci8nIC4gJHRoaXMtPklEIC4gJy5wbmcnOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wcml2YXRlX2F2YXRhcjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5wcml2YXRlX2F2YXRhciA9ICR6YnAtPmhvc3QgLiAnemJfdXNlcnMvYXZhdGFyLzAucG5nJzsNCg0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wcml2YXRlX2F2YXRhcjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ0xldmVsTmFtZScpIHsNCiAgICAgICAgICAgIHJldHVybiAkemJwLT5sYW5nWyd1c2VyX2xldmVsX25hbWUnXVskdGhpcy0+TGV2ZWxdOw0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnRW1haWxNRDUnKSB7DQogICAgICAgICAgICByZXR1cm4gbWQ1KCR0aGlzLT5FbWFpbCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdTdGF0aWNOYW1lJykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5BbGlhcykgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+QWxpYXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+TmFtZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1RlbXBsYXRlJykgew0KICAgICAgICAgICAgJHZhbHVlID0gJHRoaXMtPmRhdGFbJG5hbWVdOw0KICAgICAgICAgICAgaWYgKCR2YWx1ZSA9PSAnJykgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9ICR6YnAtPkdldFBvc3RUeXBlKDAsICdhdXRob3JfdGVtcGxhdGUnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICR2YWx1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1Bhc3NXb3JkX01ENVBhdGgnKSB7DQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPkdldEhhc2hCeU1ENVBhdGgoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ0lzR29kJykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5wcml2YXRlX2lzZ29kID09PSB0cnVlIHx8ICR0aGlzLT5wcml2YXRlX2lzZ29kID09PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cHJpdmF0ZV9pc2dvZDsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5MZXZlbCAhPSAxKSB7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5wcml2YXRlX2lzZ29kID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cHJpdmF0ZV9pc2dvZDsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAkc3FsID0gJHpicC0+ZGItPnNxbC0+U2VsZWN0KCR6YnAtPnRhYmxlWydNZW1iZXInXSwgJyonLCBhcnJheShhcnJheSgnPScsICdtZW1fTGV2ZWwnLCAxKSksICdtZW1fSUQgQVNDJywgMSwgbnVsbCk7DQogICAgICAgICAgICAgICAgJGFtID0gJHpicC0+R2V0TGlzdFR5cGUoJ01lbWJlcicsICRzcWwpOw0KICAgICAgICAgICAgICAgIGlmICgkYW1bMF0tPklEID09ICR0aGlzLT5JRCkgew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cHJpdmF0ZV9pc2dvZCA9IHRydWU7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnByaXZhdGVfaXNnb2QgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnByaXZhdGVfaXNnb2Q7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdBbGlhc0ZpcnN0Jykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5BbGlhcykgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+QWxpYXM7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+TmFtZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9NZW1iZXJfR2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbmFtZSk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6X19nZXQoJG5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmdmeaAgeaWueazle+8jOiOt+WPluWKoOebkOWPiuS6jOasoeaVo+WIl+eahCznlKjkuo7kv53lrZjnmoTmnIDnu4jlr4bnoIENCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHBzICAg5piO5paH5a+G56CBDQogICAgICogQHBhcmFtIHN0cmluZyAkZ3VpZCDnlKjmiLfllK/kuIDnoIENCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBHZXRQYXNzV29yZEJ5R3VpZCgkcHMsICRndWlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIG1kNShtZDUoJHBzKSAuICRndWlkKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bmnInmnJ/pmZDnmoRUb2tlbuWvhueggQ0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkd3RfaWQgVG9rZW7nmoRJRA0KICAgICAqIEBwYXJhbSBpbnQgICAgJGRheSAgIOaXtumXtO+8jOaMieWkqeeulyAoMeWIhumSn+WwseaYrzEvMjQqNjApDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZyAoc2hhMeWtl+S4sit1bml45pe26Ze0KQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRIYXNoQnlUb2tlbigkd3RfaWQgPSAnJywgJGRheSA9IDMwKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgICR0ID0gKGludHZhbCgkZGF5ICogMjQgKiAzNjAwKSArIHRpbWUoKSk7DQoNCiAgICAgICAgcmV0dXJuIENyZWF0ZVdlYlRva2VuKCR3dF9pZCwgJHQsICR6YnAtPmd1aWQsICR0aGlzLT5JRCwgJHRoaXMtPlBhc3N3b3JkKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bliqDot6/lvoTnm5DnmoRIYXNo5a+G56CBICjlhbblrp7lubbmsqHmnInnlKhwYXRo77yM6ICM5piv55SoemJwLT5ndWlk5pu/5Luj5LqGKS4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldEhhc2hCeU1ENVBhdGgoKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQoNCiAgICAgICAgcmV0dXJuIG1kNSgkdGhpcy0+UGFzc3dvcmQgLiAkemJwLT5ndWlkKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkv53lrZjnlKjmiLfmlbDmja4uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2F2ZSgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKCR0aGlzLT5UZW1wbGF0ZSA9PSAkemJwLT5vcHRpb25bJ1pDX0lOREVYX0RFRkFVTFRfVEVNUExBVEUnXSkgew0KICAgICAgICAgICAgJHRoaXMtPmRhdGFbJ1RlbXBsYXRlJ10gPSAnJzsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX01lbWJlcl9TYXZlJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcGFyZW50OjpTYXZlKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbCgpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9NZW1iZXJfRGVsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgICAgIHJldHVybiBwYXJlbnQ6OkRlbCgpOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\basepost.php' crc32='A4A8D975'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\category.php' crc32='BA9C1B39'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIOaWh+eroOWIhuexu+exuy4NCiAqDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBJRA0KICogQHByb3BlcnR5IHN0cmluZyBOYW1lIOWIhuexu+WQjQ0KICogQHByb3BlcnR5IHN0cmluZyBBbGlhcyDliKvlkI0NCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIENvdW50IOWIhuexu+S4i+aWh+eroOaVsOmHjw0KICogQHByb3BlcnR5IGludHxzdHJpbmcgUm9vdElEIOelluWFiOWIhuexu0lEDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBQYXJlbnRJRCDniLbliIbnsbtJRA0KICogQHByb3BlcnR5IHN0cmluZyBTeW1ib2wg55So5LqO5ZCO5Y+w5YiG57G7566h55CG55qE4oCc5bGC5qyh5qCH6K+G56ym4oCd77yM5peg55So5aSE77yM5b6F5pS55ZCNDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBMZXZlbCDliIbnsbvlsYLnuqcNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgVGVtcGxhdGUg5YiG57G75qih5p2/DQogKiBAcHJvcGVydHkgc3RyaW5nIExvZ1RlbXBsYXRlIOWIhuexu+S4i+aWh+eroOaooeadvw0KICogQHByb3BlcnR5IHN0cmluZyBVcmwNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIE9yZGVyIOWIhuexu+mhuuW6jw0KICogQHByb3BlcnR5IHN0cmluZyBTeW1ib2xOYW1lIOWxguasoeagh+ivhuespivlkI3lrZcNCiAqIEBwcm9wZXJ0eSBpbnQgQWxsQ291bnQg5pys5YiG57G75Y+K5a2Q5a2Z5YiG57G75LiL5omA5pyJ5paH56ug5pWw6YePDQogKi8NCmNsYXNzIENhdGVnb3J5IGV4dGVuZHMgQmFzZQ0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheSDkuIvlsYLliIbnsbsNCiAgICAgKi8NCiAgICBwdWJsaWMgJFN1YkNhdGVnb3JpZXMgPSBhcnJheSgpOyAvL+WtkOWIhuexuw0KDQogICAgLyoqDQogICAgICogQGRlcHJlY2F0ZWQNCiAgICAgKg0KICAgICAqIEB2YXIgYXJyYXl8bnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyAkU3ViQ2F0ZWdvcnlzID0gbnVsbDsgLy8g5ou85YaZ6ZSZ6K+v77yM5L+d5oyB5YW85a65DQoNCiAgICBwdWJsaWMgJENoaWxkcmVuQ2F0ZWdvcmllcyA9IGFycmF5KCk7IC8v5a2Q5a2Z5YiG57G7DQogICAgLy9wcml2YXRlICRwcmlDaGlsZHJlbkNhdGVnb3JpZXMgPSBudWxsOyAvL+engeacieeahOWtkOWtmeWIhuexuw0KDQogICAgLyoqDQogICAgICog5p6E6YCg5Ye95pWwLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdCgkemJwLT50YWJsZVsnQ2F0ZWdvcnknXSwgJHpicC0+ZGF0YWluZm9bJ0NhdGVnb3J5J10sIF9fQ0xBU1NfXyk7DQoNCiAgICAgICAgJHRoaXMtPlN1YkNhdGVnb3J5cyA9ICYkdGhpcy0+U3ViQ2F0ZWdvcmllczsNCiAgICAgICAgJHRoaXMtPk5hbWUgPSAkemJwLT5sYW5nWydtc2cnXVsndW5uYW1lZCddOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmtlOacr+aWueazle+8mumHjei9ve+8jOWPr+mAmui/h+aOpeWPo0ZpbHRlcl9QbHVnaW5fQ2F0ZWdvcnlfQ2FsbOa3u+WKoOiHquWumuS5ieWHveaVsC4NCiAgICAgKg0KICAgICAqIEBhcGkgRmlsdGVyX1BsdWdpbl9DYXRlZ29yeV9DYWxsDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRtZXRob2Qg5pa55rOVDQogICAgICogQHBhcmFtIG1peGVkICAkYXJncyAgIOWPguaVsA0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NhbGwoJG1ldGhvZCwgJGFyZ3MpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9DYXRlZ29yeV9DYWxsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbWV0aG9kLCAkYXJncyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHBhcmFtICR2YWx1ZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmIChpbl9hcnJheSgkbmFtZSwgYXJyYXkoJ1VybCcsICdTeW1ib2wnLCAnTGV2ZWwnLCAnU3ltYm9sTmFtZScsICdQYXJlbnQnLCAnQWxpYXNGaXJzdCcpKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9IGVsc2VpZiAoJG5hbWUgPT0gJ1RlbXBsYXRlJykgew0KICAgICAgICAgICAgaWYgKCR2YWx1ZSA9PSAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ2NhdGVnb3J5X3RlbXBsYXRlJykpIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSAnJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5kYXRhWyRuYW1lXSA9ICR2YWx1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnTG9nVGVtcGxhdGUnKSB7DQogICAgICAgICAgICBpZiAoJHZhbHVlID09ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAndGVtcGxhdGUnKSkgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9ICcnOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJHRoaXMtPmRhdGFbJG5hbWVdID0gJHZhbHVlOw0KDQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ2F0ZWdvcnlfU2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbmFtZSwgJHZhbHVlKTsNCiAgICAgICAgfQ0KICAgICAgICBwYXJlbnQ6Ol9fc2V0KCRuYW1lLCAkdmFsdWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBpbnR8bWl4ZWR8bnVsbHxzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJG5hbWUpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKCRuYW1lID09ICdVcmwnKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9DYXRlZ29yeV9VcmwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGJhY2tBdHRyID0gJHpicC0+b3B0aW9uWydaQ19BTElBU19CQUNLX0FUVFInXTsNCg0KICAgICAgICAgICAgJHJvdXRlcyA9ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAncm91dGVzJyk7DQogICAgICAgICAgICAkcm91dGVuYW1lID0gJ3Bvc3RfJyAuICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAnbmFtZScpIC4gJ19saXN0X2NhdGVnb3J5JzsNCiAgICAgICAgICAgIGlmIChpc3NldCgkcm91dGVzWyRyb3V0ZW5hbWVdKSAmJiAhaXNfbnVsbCgkemJwLT5HZXRSb3V0ZSgkcm91dGVzWyRyb3V0ZW5hbWVdKSkpIHsNCiAgICAgICAgICAgICAgICAkdSA9IG5ldyBVcmxSdWxlKCR6YnAtPkdldFJvdXRlKCRyb3V0ZXNbJHJvdXRlbmFtZV0pKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJHUgPSBuZXcgVXJsUnVsZSgkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ2xpc3RfY2F0ZWdvcnlfdXJscnVsZScpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR1LT5SdWxlc09iamVjdCA9ICYkdGhpczsNCiAgICAgICAgICAgICR1LT5SdWxlc1sneyVpZCV9J10gPSAkdGhpcy0+SUQ7DQogICAgICAgICAgICAkdS0+UnVsZXNbJ3slYWxpYXMlfSddID0gcmF3dXJsZW5jb2RlX3dpdGhvdXRfYmFja3NsYXNoKCR0aGlzLT5BbGlhcyA9PSAnJyA/ICR0aGlzLT4kYmFja0F0dHIgOiAkdGhpcy0+QWxpYXMpOw0KDQogICAgICAgICAgICByZXR1cm4gJHUtPk1ha2UoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1N5bWJvbCcpIHsNCiAgICAgICAgICAgIGlmICgkdGhpcy0+UGFyZW50SUQgPT0gMCkgew0KICAgICAgICAgICAgICAgIHJldHVybiAnJzsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJGwgPSAkdGhpcy0+TGV2ZWw7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gc3RyX3JlcGVhdCgnJm5ic3A7JywgKCRsICogMiAtIDEpKSAuICfilJQnOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnTGV2ZWwnKSB7DQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPkdldERlZXAoJHRoaXMpOw0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnU3ltYm9sTmFtZScpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+U3ltYm9sIC4gaHRtbHNwZWNpYWxjaGFycygkdGhpcy0+TmFtZSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdQYXJlbnQnKSB7DQogICAgICAgICAgICBpZiAoJHRoaXMtPlBhcmVudElEID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAkemJwLT5jYXRlZ29yaWVzX2FsbFskdGhpcy0+UGFyZW50SURdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnUm9vdCcpIHsNCiAgICAgICAgICAgIGlmICgkdGhpcy0+Um9vdElEID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAkemJwLT5jYXRlZ29yaWVzX2FsbFskdGhpcy0+Um9vdElEXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1RlbXBsYXRlJykgew0KICAgICAgICAgICAgJHZhbHVlID0gJHRoaXMtPmRhdGFbJG5hbWVdOw0KICAgICAgICAgICAgaWYgKCR2YWx1ZSA9PSAnJykgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAnY2F0ZWdvcnlfdGVtcGxhdGUnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICR2YWx1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ0xvZ1RlbXBsYXRlJykgew0KICAgICAgICAgICAgJHZhbHVlID0gJHRoaXMtPmRhdGFbJG5hbWVdOw0KICAgICAgICAgICAgaWYgKCR2YWx1ZSA9PSAnJykgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAndGVtcGxhdGUnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICR2YWx1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ0FsbENvdW50Jykgew0KICAgICAgICAgICAgJGkgPSAkdGhpcy0+Q291bnQ7DQogICAgICAgICAgICBmb3JlYWNoICgkdGhpcy0+Q2hpbGRyZW5DYXRlZ29yaWVzIGFzICRjKSB7DQogICAgICAgICAgICAgICAgJGkgKz0gJGMtPkNvdW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuICRpOw0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnQWxpYXNGaXJzdCcpIHsNCiAgICAgICAgICAgIGlmICgkdGhpcy0+QWxpYXMpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPkFsaWFzOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPk5hbWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ2F0ZWdvcnlfR2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbmFtZSk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6X19nZXQoJG5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS/neWtmOWIhuexu+aVsOaNri4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTYXZlKCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJHRoaXMtPlRlbXBsYXRlID09ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAnY2F0ZWdvcnlfdGVtcGxhdGUnKSkgew0KICAgICAgICAgICAgJHRoaXMtPmRhdGFbJ1RlbXBsYXRlJ10gPSAnJzsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdGhpcy0+TG9nVGVtcGxhdGUgPT0gJHpicC0+R2V0UG9zdFR5cGUoJHRoaXMtPlR5cGUsICd0ZW1wbGF0ZScpKSB7DQogICAgICAgICAgICAkdGhpcy0+ZGF0YVsnTG9nVGVtcGxhdGUnXSA9ICcnOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPlJvb3RJRCA9IChpbnQpICR0aGlzLT5HZXRSb290KCR0aGlzLT5QYXJlbnRJRCk7DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ2F0ZWdvcnlfU2F2ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWwoKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ2F0ZWdvcnlfRGVsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcGFyZW50OjpEZWwoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlvpfliLDliIbnsbvmt7HluqYuDQogICAgICoNCiAgICAgKiBAcGFyYW0gb2JqZWN0ICRvYmplY3QNCiAgICAgKiBAcGFyYW0gaW50ICAgICRkZWVwDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludCDliIbnsbvmt7HluqYNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIEdldERlZXAoJiRvYmplY3QsICRkZWVwID0gMCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJG9iamVjdC0+UGFyZW50SUQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuICRkZWVwOw0KICAgICAgICB9IGVsc2VpZiAoIWlzc2V0KCR6YnAtPmNhdGVnb3JpZXNfYWxsWyRvYmplY3QtPlBhcmVudElEXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5HZXREZWVwKCR6YnAtPmNhdGVnb3JpZXNfYWxsWyRvYmplY3QtPlBhcmVudElEXSwgKCRkZWVwICsgMSkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5b6X5Yiw5YiG57G7Um9vdElELg0KICAgICAqDQogICAgICogQHBhcmFtIGludCDniLbliIbnsbtJRA0KICAgICAqDQogICAgICogQHJldHVybiBpbnQg56WW5YiG57G7SUQNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIEdldFJvb3QoJHBhcmVudGlkKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmICgkcGFyZW50aWQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzc2V0KCR6YnAtPmNhdGVnb3JpZXNfYWxsWyRwYXJlbnRpZF0pKSB7DQogICAgICAgICAgICBpZiAoJHpicC0+Y2F0ZWdvcmllc19hbGxbJHBhcmVudGlkXS0+UGFyZW50SUQgPiAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRSb290KCR6YnAtPmNhdGVnb3JpZXNfYWxsWyRwYXJlbnRpZF0tPlBhcmVudElEKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICRwYXJlbnRpZDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p+l5om+54i256WW5YiG57G75bm25YaZ5YWlJHBhcmVudHMNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIEZpbmRQYXJlbnRzKCRwYXJlbnRpZCwgJiRwYXJlbnRzKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmICgkcGFyZW50aWQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzc2V0KCR6YnAtPmNhdGVnb3JpZXNfYWxsWyRwYXJlbnRpZF0pKSB7DQogICAgICAgICAgICAkcGFyZW50c1tdID0gJHpicC0+Y2F0ZWdvcmllc19hbGxbJHBhcmVudGlkXTsNCiAgICAgICAgICAgIGlmICgkemJwLT5jYXRlZ29yaWVzX2FsbFskcGFyZW50aWRdLT5QYXJlbnRJRCA+IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPkZpbmRQYXJlbnRzKCR6YnAtPmNhdGVnb3JpZXNfYWxsWyRwYXJlbnRpZF0tPlBhcmVudElELCAkcGFyZW50cyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAkcGFyZW50aWQ7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIpOaWrSRpZOaYr+WQpuaYr+WIhuexu+eahOeItuellui+iOWIhuexuw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJc1BhcmVudHMoJGlkKQ0KICAgIHsNCiAgICAgICAgJHBhcmVudHMgPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+RmluZFBhcmVudHMoJHRoaXMtPlBhcmVudElELCAkcGFyZW50cyk7DQogICAgICAgIGZvcmVhY2ggKCRwYXJlbnRzIGFzICRjKSB7DQogICAgICAgICAgICBpZiAoJGMtPklEID09ICRpZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKTmlq0kaWTmmK/lkKbmmK/liIbnsbvnmoTniLbliIbnsbsNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gSXNQYXJlbnQoJGlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5QYXJlbnRJRCA9PSAkaWQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yik5patJGlk5piv5ZCm5piv5YiG57G755qE5a2Q5a2Z5YiG57G7DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIElzR3JhbmRDaGlsZHJlbigkaWQpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+Q2hpbGRyZW5DYXRlZ29yaWVzIGFzICRjKSB7DQogICAgICAgICAgICBpZiAoJGMtPklEID09ICRpZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKTmlq0kaWTmmK/lkKbmmK/liIbnsbvnmoTlrZDliIbnsbsNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gSXNDaGlsZHJlbigkaWQpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+U3ViQ2F0ZWdvcmllcyBhcyAkYykgew0KICAgICAgICAgICAgaWYgKCRjLT5JRCA9PSAkaWQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQp9DQo=</file>
	<file name='zb_system\function\lib\comment.php' crc32='602AE2ED'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIOivhOiuuuexuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIEF1dGhvcklEDQogKiBAcHJvcGVydHkgc3RyaW5nIEhvbWVQYWdlDQogKiBAcHJvcGVydHkgc3RyaW5nIEVtYWlsDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBSb290SUQNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIFBhcmVudElEDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBMb2dJRA0KICogQHByb3BlcnR5IGJvb2wgSXNDaGVja2luZyDlrqHmoLjnirbmgIENCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIExldmVsIOivhOiuuuWxgue6pw0KICogQHByb3BlcnR5IGludCBQb3N0VGltZQ0KICogQHByb3BlcnR5IENvbW1lbnRbXSBDb21tZW50cyDlrZDor4TorroNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgQ29udGVudA0KICovDQpjbGFzcyBDb21tZW50IGV4dGVuZHMgQmFzZQ0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBib29sIOaYr+WQpuS4ouW8g++8jOWmgumAmui/h+aPkuS7tuetieWIpOaWreS4uuWeg+WcvuivhOiuuuWImeagh+iusOS4unRydWUNCiAgICAgKi8NCiAgICBwdWJsaWMgJElzVGhyb3cgPSBmYWxzZTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOivhOiuuuWxguWPtw0KICAgICAqLw0KICAgIHB1YmxpYyAkRmxvb3JJRCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiDmnoTpgKDlh73mlbAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCR6YnAtPnRhYmxlWydDb21tZW50J10sICR6YnAtPmRhdGFpbmZvWydDb21tZW50J10sIF9fQ0xBU1NfXyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6a2U5pyv5pa55rOV77ya6YeN6L2977yM5Y+v6YCa6L+H5o6l5Y+jRmlsdGVyX1BsdWdpbl9Db21tZW50X0NhbGzmt7vliqDoh6rlrprkuYnlh73mlbAuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRtZXRob2Qg5pa55rOVDQogICAgICogQHBhcmFtIG1peGVkICAkYXJncyAgIOWPguaVsA0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NhbGwoJG1ldGhvZCwgJGFyZ3MpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9Db21tZW50X0NhbGwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMsICRtZXRob2QsICRhcmdzKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bor4Torrrmpbzlj7cuDQogICAgICoNCiAgICAgKiBAcGFyYW0gaW50ICRwYXJlbnRpZCDniLbor4TorrpJRA0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheXxpbnR8bWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEdldFJvb3RJRCgkcGFyZW50aWQpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKCRwYXJlbnRpZCA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KDQogICAgICAgICRjID0gJHpicC0+R2V0Q29tbWVudEJ5SUQoJHBhcmVudGlkKTsNCiAgICAgICAgaWYgKCRjLT5Sb290SUQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuICRjLT5JRDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAkYy0+Um9vdElEOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6K+E6K665pe26Ze0Lg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkcyDml7bpl7TmoLzlvI8NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbHxzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVGltZSgkcyA9ICdZLW0tZCBIOmk6cycpDQogICAgew0KICAgICAgICByZXR1cm4gZGF0ZSgkcywgKGludCkgJHRoaXMtPlBvc3RUaW1lKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJG5hbWUNCiAgICAgKiBAcGFyYW0gJHZhbHVlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fc2V0KCRuYW1lLCAkdmFsdWUpDQogICAgew0KICAgICAgICBpZiAoaW5fYXJyYXkoJG5hbWUsIGFycmF5KCdBdXRob3InLCAnQ29tbWVudHMnLCAnTGV2ZWwnLCAnUG9zdCcpKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0NvbW1lbnRfU2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbmFtZSwgJHZhbHVlKTsNCiAgICAgICAgfQ0KICAgICAgICBwYXJlbnQ6Ol9fc2V0KCRuYW1lLCAkdmFsdWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheXxpbnR8TWVtYmVyfG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fZ2V0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmICgkbmFtZSA9PT0gJ0F1dGhvcicpIHsNCiAgICAgICAgICAgICRtID0gJHpicC0+R2V0TWVtYmVyQnlJRCgkdGhpcy0+QXV0aG9ySUQpOw0KICAgICAgICAgICAgaWYgKCRtLT5JRCA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgJG0tPk5hbWUgPSAkdGhpcy0+TmFtZTsNCiAgICAgICAgICAgICAgICAkbS0+QWxpYXMgPSAkdGhpcy0+TmFtZTsNCiAgICAgICAgICAgICAgICAkbS0+RW1haWwgPSAkdGhpcy0+RW1haWw7DQogICAgICAgICAgICAgICAgJG0tPkhvbWVQYWdlID0gJHRoaXMtPkhvbWVQYWdlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gJG07DQogICAgICAgIH0gZWxzZWlmICgkbmFtZSA9PT0gJ0NvbW1lbnRzJykgew0KICAgICAgICAgICAgLy/mraTmlrnms5XlubbkuI3mmK/ku47mlbDmja7lupPkuK3or7vlj5bmlbDmja7ogIzmmK/ku47nvJPlrZjkuK3or7vlj5bvvIzmiYDku6Xlj6/og73kuI3lh4bnoa4NCiAgICAgICAgICAgICRhcnJheSA9IGFycmF5KCk7DQogICAgICAgICAgICBmb3JlYWNoICgkemJwLT5jb21tZW50cyBhcyAkY29tbWVudCkgew0KICAgICAgICAgICAgICAgIGlmICgkY29tbWVudC0+UGFyZW50SUQgPT0gJHRoaXMtPklEKSB7DQogICAgICAgICAgICAgICAgICAgICRhcnJheVtdID0gJiR6YnAtPmNvbW1lbnRzWyRjb21tZW50LT5JRF07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gJGFycmF5Ow0KICAgICAgICB9IGVsc2VpZiAoJG5hbWUgPT09ICdMZXZlbCcpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+R2V0RGVlcCgkdGhpcyk7DQogICAgICAgIH0gZWxzZWlmICgkbmFtZSA9PT0gJ1Bvc3QnKSB7DQogICAgICAgICAgICByZXR1cm4gJHpicC0+R2V0UG9zdEJ5SUQoJHRoaXMtPkxvZ0lEKTsNCiAgICAgICAgfSBlbHNlaWYgKCRuYW1lID09PSAnUGFyZW50Jykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5QYXJlbnRJRCA9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHpicC0+R2V0Q29tbWVudEJ5SUQoJHRoaXMtPlBhcmVudElEKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0NvbW1lbnRfR2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcywgJG5hbWUpOw0KICAgICAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcGFyZW50OjpfX2dldCgkbmFtZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2Y6K+E6K665pWw5o2uLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNhdmUoKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0NvbW1lbnRfU2F2ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWwoKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ29tbWVudF9EZWwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwYXJlbnQ6OkRlbCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOW+l+WIsOivhOiuuua3seW6pi4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBvYmplY3QgJG9iamVjdA0KICAgICAqIEBwYXJhbSBpbnQgICAgJGRlZXANCiAgICAgKg0KICAgICAqIEByZXR1cm4gaW50IOivhOiuuua3seW6pg0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gR2V0RGVlcCgmJG9iamVjdCwgJGRlZXAgPSAwKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmICgkb2JqZWN0LT5QYXJlbnRJRCA9PSAwIHx8ICRvYmplY3QtPlBhcmVudElEID09ICRvYmplY3QtPklEKSB7DQogICAgICAgICAgICByZXR1cm4gJGRlZXA7DQogICAgICAgIH0NCiAgICAgICAgJHBhcmVudENvbW1lbnQgPSAkemJwLT5HZXRDb21tZW50QnlJRCgkb2JqZWN0LT5QYXJlbnRJRCk7DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXREZWVwKCRwYXJlbnRDb21tZW50LCAoJGRlZXAgKyAxKSk7DQogICAgfQ0KDQp9DQo=</file>
	<file name='zb_system\function\lib\config.php' crc32='A0B2256A'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\dbsql.php' crc32='DFE46ED8'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiDmlbDmja7lupPmk43kvZzmjqXlj6MuDQogKi8NCg0KLyoqDQogKiBTUUzor63lj6XnlJ/miJDnsbsuDQogKi8NCmNsYXNzIERiU3FsDQp7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIERhdGFiYXNlX19JbnRlcmZhY2Ug5pWw5o2u5bqT6L+e5o6l5a6e5L6LDQogICAgICovDQogICAgcHJpdmF0ZSAkZGIgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsfHN0cmluZyDmlbDmja7lupPnsbvlnovlkI3np7ANCiAgICAgKi8NCiAgICBwcml2YXRlICRkYmNsYXNzID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBvYmplY3QgJGRiDQogICAgICovDQogICAgcHJpdmF0ZSAkc3FsID0gbnVsbDsNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgmJGRiID0gbnVsbCkNCiAgICB7DQogICAgICAgICR0aGlzLT5kYiA9ICYkZGI7DQogICAgICAgICR0aGlzLT5kYmNsYXNzID0gZ2V0X2NsYXNzKCR0aGlzLT5kYik7DQogICAgICAgICR0aGlzLT5zcWwgPSAnc3FsX18nIC4gJHRoaXMtPmRiLT50eXBlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOabv+aNouaVsOaNruihqOWJjee8gA0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkcw0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVwbGFjZVByZSgmJHMpDQogICAgew0KICAgICAgICAkcyA9IHN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYi0+ZGJwcmUsICRzKTsNCg0KICAgICAgICByZXR1cm4gJHM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHJldHVybiBTUUxfX0dsb2JhbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXQoKQ0KICAgIHsNCiAgICAgICAgJHNxbCA9IG5ldyAkdGhpcy0+c3FsKCR0aGlzLT5kYik7DQoNCiAgICAgICAgcmV0dXJuICRzcWw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yig6Zmk6KGoLOi/lOWbnlNRTOivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWxUYWJsZSgkdGFibGUpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPmdldCgpLT5kcm9wKCIkdGFibGUiKS0+c3FsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeihqOaYr+WQpuWtmOWcqO+8jOi/lOWbnlNRTOivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlDQogICAgICogQHBhcmFtIHN0cmluZyAkZGJuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFeGlzdFRhYmxlKCR0YWJsZSwgJGRibmFtZSA9ICcnKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5nZXQoKS0+ZXhpc3QoJHRhYmxlLCAkZGJuYW1lKS0+c3FsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIm+W7uuihqO+8jOi/lOWbnuaehOmAoOWujOaVtOeahFNRTOivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlDQogICAgICogQHBhcmFtIGFycmF5ICAkZGF0YWluZm8NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRlbmdpbmUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjaGFyc2V0DQogICAgICogQHBhcmFtIHN0cmluZyAkY29sbGF0ZQ0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8sICRlbmdpbmUgPSBudWxsLCAkY2hhcnNldCA9IG51bGwsICRjb2xsYXRlID0gbnVsbCkNCiAgICB7DQogICAgICAgICRzcWwgPSAkdGhpcy0+Z2V0KCk7DQogICAgICAgICRzcWwtPmNyZWF0ZSgkdGFibGUpLT5kYXRhKCRkYXRhaW5mbyk7DQogICAgICAgIGlmICh0cmltKCRlbmdpbmUpICE9ICcnKSB7DQogICAgICAgICAgICAkc3FsLT5vcHRpb24oYXJyYXkoJ2VuZ2luZScgPT4gJGVuZ2luZSkpOw0KICAgICAgICB9DQogICAgICAgIGlmICh0cmltKCRjaGFyc2V0KSAhPSAnJykgew0KICAgICAgICAgICAgJHNxbC0+b3B0aW9uKGFycmF5KCdjaGFyc2V0JyA9PiAkY2hhcnNldCkpOw0KICAgICAgICB9DQogICAgICAgIGlmICh0cmltKCRjb2xsYXRlKSAhPSAnJykgew0KICAgICAgICAgICAgJHNxbC0+b3B0aW9uKGFycmF5KCdjb2xsYXRlJyA9PiAkY29sbGF0ZSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRzcWwtPnNxbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmnoTpgKDmn6Xor6Lor63lj6UuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAkdGFibGUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAkc2VsZWN0DQogICAgICogQHBhcmFtIHN0cmluZyAgICAgJHdoZXJlDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgJG9yZGVyDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgJGxpbWl0DQogICAgICogQHBhcmFtIGFycmF5fG51bGwgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcg6L+U5Zue5p6E6YCg55qE6K+t5Y+lDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNlbGVjdCgkdGFibGUsICRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmICghaXNfYXJyYXkoJG9wdGlvbikpIHsNCiAgICAgICAgICAgICRvcHRpb24gPSBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHNxbCA9ICR0aGlzLT5nZXQoKS0+c2VsZWN0KCR0YWJsZSktPm9wdGlvbigkb3B0aW9uKS0+d2hlcmUoJHdoZXJlKS0+b3JkZXJCeSgkb3JkZXIpLT5saW1pdCgkbGltaXQpOw0KDQogICAgICAgIC8v5a6a5LmJ5Ye6a2V5IGFycmF5DQogICAgICAgICRhcnJheSA9IGFycmF5KCdDT1VOVCcsICdNSU4nLCAnTUFYJywgJ1NVTScsICdBVkcnLCAnU0VMRUNUQU5ZJywgJ0ZST00nLCAnSU5ORVJKT0lOJywgJ0xFRlRKT0lOJywgJ1JJR0hUSk9JTicsICdKT0lOJywgJ0ZVTExKT0lOJywgJ1VTRUlOREVYJywgJ0ZPUkNFSU5ERVgnLCAnSUdOT1JFSU5ERVgnLCAnT04nLCAnRElTVElOQ1QnLCAnUkFORE9NJywgJ0NPTFVNTicsICdHUk9VUEJZJywgJ0hBVklORycsICdXSEVSRScsICdPUkRFUicsICdMSU1JVCcpOw0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGtleSA9PiAka2V5d29yZCkgew0KICAgICAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bc3RydG9sb3dlcigka2V5d29yZCldKSkgew0KICAgICAgICAgICAgICAgICRhcmdzID0gYXJyYXkoJG9wdGlvbltzdHJ0b2xvd2VyKCRrZXl3b3JkKV0pOw0KICAgICAgICAgICAgICAgIGNhbGxfdXNlcl9mdW5jX2FycmF5KGFycmF5KCRzcWwsICRrZXl3b3JkKSwgJGFyZ3MpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bJ3BhZ2ViYXInXSkpIHsNCiAgICAgICAgICAgIGlmICgkb3B0aW9uWydwYWdlYmFyJ10tPkNvdW50ID09PSBudWxsKSB7DQogICAgICAgICAgICAgICAgJHNxbHBiID0gJHRoaXMtPmdldCgpLT5zZWxlY3QoJHRhYmxlKS0+Y291bnQoYXJyYXkoJyonID0+ICdudW0nKSktPndoZXJlKCR3aGVyZSktPm9wdGlvbigkb3B0aW9uKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChhcnJheSgnRlJPTScsICdJTk5FUkpPSU4nLCAnTEVGVEpPSU4nLCAnUklHSFRKT0lOJywgJ0pPSU4nLCAnRlVMTEpPSU4nLCAnVVNFSU5ERVgnLCAnRk9SQ0VJTkRFWCcsICdJR05PUkVJTkRFWCcsICdPTicsICdXSEVSRScsICdHUk9VUEJZJywgJ0hBVklORycpIGFzICRrZXkgPT4gJGtleXdvcmQpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bc3RydG9sb3dlcigka2V5d29yZCldKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGFyZ3MgPSBhcnJheSgkb3B0aW9uW3N0cnRvbG93ZXIoJGtleXdvcmQpXSk7DQogICAgICAgICAgICAgICAgICAgICAgICBjYWxsX3VzZXJfZnVuY19hcnJheShhcnJheSgkc3FscGIsICRrZXl3b3JkKSwgJGFyZ3MpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRxdWVyeSA9ICRzcWxwYi0+cXVlcnk7DQogICAgICAgICAgICAgICAgJG9wdGlvblsncGFnZWJhciddLT5Db3VudCA9IEdldFZhbHVlSW5BcnJheUJ5Q3VycmVudCgkcXVlcnksICdudW0nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRvcHRpb25bJ3BhZ2ViYXInXS0+Q291bnQgPSAoaW50KSAkb3B0aW9uWydwYWdlYmFyJ10tPkNvdW50Ow0KICAgICAgICAgICAgJG9wdGlvblsncGFnZWJhciddLT5NYWtlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWlzX2FycmF5KCRzZWxlY3QpKSB7DQogICAgICAgICAgICBpZiAoIWVtcHR5KCRzZWxlY3QpKSB7DQogICAgICAgICAgICAgICAgJHNlbGVjdCA9IGFycmF5KHRyaW0oJHNlbGVjdCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICRzcWwtPmNvbHVtbigkc2VsZWN0KTsNCg0KICAgICAgICAkc3FsID0gJHNxbC0+c3FsOw0KDQogICAgICAgIHJldHVybiAkc3FsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOiuoeaVsOivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlDQogICAgICogQHBhcmFtIG1peGVkICAkY291bnQg5LiN5Y+q5pivY291bnQs6L+Y5pyJc3VtLGF2ZyxtaW4sbWF4DQogICAgICogQHBhcmFtIG1peGVkICAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbnVsbCAgICRvcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnuaehOmAoOeahOivreWPpQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDb3VudCgkdGFibGUsICRjb3VudG9mbnVtLCAkd2hlcmUgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgICRzcWwgPSAkdGhpcy0+Z2V0KCktPnNlbGVjdCgkdGFibGUpLT5vcHRpb24oJG9wdGlvbiktPndoZXJlKCR3aGVyZSk7DQogICAgICAgIGlmIChjb3VudCgkY291bnRvZm51bSkgPT0gMSkgew0KICAgICAgICAgICAgJGNvdW50b2ZudW0gPSAkY291bnRvZm51bVswXTsNCiAgICAgICAgfQ0KICAgICAgICAvL+S4uuS6huWFvOWuueS7peWJjeeahOWBmuazleaJjeWGmeS6huS4gOWghueahOivreWPpQ0KICAgICAgICBpZiAoY291bnQoJGNvdW50b2ZudW0pID09IDMpIHsgLy9hcnJheSgnc3VtJywnKicsJ2FzbmFtZScpDQogICAgICAgICAgICBjYWxsX3VzZXJfZnVuY19hcnJheShhcnJheSgkc3FsLCBzdHJ0b2xvd2VyKCRjb3VudG9mbnVtWzBdKSksIGFycmF5KGFycmF5KCRjb3VudG9mbnVtWzFdID0+ICRjb3VudG9mbnVtWzJdKSkpOw0KICAgICAgICB9DQogICAgICAgIGlmIChjb3VudCgkY291bnRvZm51bSkgPT0gMikgew0KICAgICAgICAgICAgaWYgKGluX2FycmF5KHN0cnRvdXBwZXIoJGNvdW50b2ZudW1bMF0pLCBhcnJheSgnQ09VTlQnLCAnTUlOJywgJ01BWCcsICdTVU0nLCAnQVZHJykpKSB7IC8vYXJyYXkoJ0FWRycsJyonKQ0KICAgICAgICAgICAgICAgIGNhbGxfdXNlcl9mdW5jX2FycmF5KGFycmF5KCRzcWwsICRjb3VudG9mbnVtWzBdKSwgYXJyYXkoJGNvdW50b2ZudW1bMV0pKTsNCiAgICAgICAgICAgIH0gZWxzZSB7IC8vYXJyYXkoJyonLCdhc25hbWUnKQ0KICAgICAgICAgICAgICAgIGNhbGxfdXNlcl9mdW5jX2FycmF5KGFycmF5KCRzcWwsICdjb3VudCcpLCBhcnJheShhcnJheSgkY291bnRvZm51bVswXSA9PiAkY291bnRvZm51bVsxXSkpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkc3FsLT5zcWw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p6E6YCg5pWw5o2u5pu05paw6K+t5Y+lLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgJHRhYmxlDQogICAgICogQHBhcmFtIG1peGVkICAgICAgJGtleXZhbHVlDQogICAgICogQHBhcmFtIG1peGVkICAgICAgJHdoZXJlDQogICAgICogQHBhcmFtIGFycmF5fG51bGwgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcg6L+U5Zue5p6E6YCg55qE6K+t5Y+lDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFVwZGF0ZSgkdGFibGUsICRrZXl2YWx1ZSwgJHdoZXJlLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+Z2V0KCktPnVwZGF0ZSgkdGFibGUpLT5kYXRhKCRrZXl2YWx1ZSktPndoZXJlKCR3aGVyZSktPm9wdGlvbigkb3B0aW9uKS0+c3FsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOaVsOaNruaPkuWFpeivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlDQogICAgICogQHBhcmFtIG1peGVkICAka2V5dmFsdWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnuaehOmAoOeahOivreWPpQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbnNlcnQoJHRhYmxlLCAka2V5dmFsdWUpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPmdldCgpLT5pbnNlcnQoJHRhYmxlKS0+ZGF0YSgka2V5dmFsdWUpLT5zcWw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p6E6YCg5pWw5o2u5Yig6Zmk6K+t5Y+lLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgJHRhYmxlDQogICAgICogQHBhcmFtIG1peGVkICAgICAgJHdoZXJlDQogICAgICogQHBhcmFtIGFycmF5fG51bGwgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcg6L+U5Zue5p6E6YCg55qE6K+t5Y+lDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbGV0ZSgkdGFibGUsICR3aGVyZSwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPmdldCgpLT5kZWxldGUoJHRhYmxlKS0+d2hlcmUoJHdoZXJlKS0+b3B0aW9uKCRvcHRpb24pLT5zcWw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L+U5Zue57uP6L+H6L+H5ruk55qEU1FM6K+t5Y+lLg0KICAgICAqDQogICAgICogQHBhcmFtICRzcWwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRmlsdGVyKCRzcWwpDQogICAgew0KICAgICAgICAkX1NFUlZFUlsnX3F1ZXJ5X2NvdW50J10gPSAoJF9TRVJWRVJbJ19xdWVyeV9jb3VudCddICsgMSk7DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fRGJTcWxfRmlsdGVyJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBuYW1lKCRzcWwpOw0KICAgICAgICB9DQogICAgICAgIC8vTG9ncygkc3FsKTsNCiAgICAgICAgcmV0dXJuICRzcWw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5a+85Ye6c3Fs55Sf5oiQ6K+t5Y+l77yM55So5LqO5aSH5Lu95pWw5o2u55So44CCDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHR5cGUg5pWw5o2u6L+e5o6l57G75Z6LDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHJpdmF0ZSAkcHJpX2V4cGxvcnRfZGIgPSBudWxsOw0KDQogICAgcHVibGljIGZ1bmN0aW9uIEV4cG9ydCgkdGFibGUsICRrZXl2YWx1ZSwgJHR5cGUgPSAnbXlzcWwnKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0eXBlID09ICdteXNxbCcgJiYgJHRoaXMtPnByaV9leHBsb3J0X2RiID09PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+cHJpX2V4cGxvcnRfZGIgPSBuZXcgRGF0YWJhc2VfX015U1FMKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHR5cGUgPT0gJ215c3FsaScgJiYgJHRoaXMtPnByaV9leHBsb3J0X2RiID09PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+cHJpX2V4cGxvcnRfZGIgPSBuZXcgRGF0YWJhc2VfX015U1FMaSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR0eXBlID09ICdwZG9fbXlzcWwnICYmICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9PT0gbnVsbCkgew0KICAgICAgICAgICAgJHRoaXMtPnByaV9leHBsb3J0X2RiID0gbmV3IERhdGFiYXNlX19QRE9fTXlTUUwoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdHlwZSA9PSAnc3FsaXRlJyAmJiAkdGhpcy0+cHJpX2V4cGxvcnRfZGIgPT09IG51bGwpIHsNCiAgICAgICAgICAgICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9IG5ldyBEYXRhYmFzZV9fU1FMaXRlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHR5cGUgPT0gJ3NxbGl0ZTMnICYmICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9PT0gbnVsbCkgew0KICAgICAgICAgICAgJHRoaXMtPnByaV9leHBsb3J0X2RiID0gbmV3IERhdGFiYXNlX19TUUxpdGUzKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHR5cGUgPT0gJ3Bkb19zcWxpdGUnICYmICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9PT0gbnVsbCkgew0KICAgICAgICAgICAgJHRoaXMtPnByaV9leHBsb3J0X2RiID0gbmV3IERhdGFiYXNlX19QRE9fU1FMaXRlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHR5cGUgPT0gJ3Bvc3RncmVzcWwnICYmICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9PT0gbnVsbCkgew0KICAgICAgICAgICAgJHRoaXMtPnByaV9leHBsb3J0X2RiID0gbmV3IERhdGFiYXNlX19Qb3N0Z3JlU1FMKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHR5cGUgPT0gJ3Bkb19wb3N0Z3Jlc3FsJyAmJiAkdGhpcy0+cHJpX2V4cGxvcnRfZGIgPT09IG51bGwpIHsNCiAgICAgICAgICAgICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9IG5ldyBEYXRhYmFzZV9fUERPX1Bvc3RncmVTUUwoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdGhpcy0+cHJpX2V4cGxvcnRfZGIgPT09IG51bGwpIHsNCiAgICAgICAgICAgICR0aGlzLT5wcmlfZXhwbG9ydF9kYiA9IG5ldyBEYXRhYmFzZV9fTXlTUUwoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRzcWwgPSAiSU5TRVJUIElOVE8gJHRhYmxlICI7DQoNCiAgICAgICAgJHNxbCAuPSAnKCc7DQogICAgICAgICRjb21tYSA9ICcnOw0KICAgICAgICBmb3JlYWNoICgka2V5dmFsdWUgYXMgJGsgPT4gJHYpIHsNCiAgICAgICAgICAgIGlmIChpc19udWxsKCR2KSkgew0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkc3FsIC49ICRjb21tYSAuICIkayI7DQogICAgICAgICAgICAkY29tbWEgPSAnLCc7DQogICAgICAgIH0NCiAgICAgICAgJHNxbCAuPSAnKVZBTFVFUygnOw0KDQogICAgICAgICRjb21tYSA9ICcnOw0KICAgICAgICBmb3JlYWNoICgka2V5dmFsdWUgYXMgJGsgPT4gJHYpIHsNCiAgICAgICAgICAgIGlmIChpc19udWxsKCR2KSkgew0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkdiA9ICR0aGlzLT5wcmlfZXhwbG9ydF9kYi0+RXNjYXBlU3RyaW5nKCR2KTsNCiAgICAgICAgICAgICRzcWwgLj0gJGNvbW1hIC4gIickdiciOw0KICAgICAgICAgICAgJGNvbW1hID0gJywnOw0KICAgICAgICB9DQogICAgICAgICRzcWwgLj0gJyknOw0KDQogICAgICAgIHJldHVybiAkc3FsIC4gIjtcclxuIjsNCiAgICB9DQoNCiAgICAvL2NvbW1hbmQgPSAnYmVnaW4nLCdjb21taXQnLCdyb2xsYmFjaycNCiAgICBwdWJsaWMgZnVuY3Rpb24gVHJhbnNhY3Rpb24oJGNvbW1hbmQpDQogICAgew0KICAgICAgICAkY29tbWFuZCA9IHN0cnRvdXBwZXIodHJpbSgkY29tbWFuZCkpOw0KICAgICAgICBpZiAoJGNvbW1hbmQgPT0gJ0JFR0lOJyB8fCAkY29tbWFuZCA9PSAnQ09NTUlUJyB8fCAkY29tbWFuZCA9PSAnUk9MTEJBQ0snKSB7DQogICAgICAgICAgICByZXR1cm4gJGNvbW1hbmQ7DQogICAgICAgIH0NCiAgICB9DQoNCn0NCg==</file>
	<file name='zb_system\function\lib\metas.php' crc32='3F9DE332'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIOaJqeWxleWGheWuueexuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIENvdW50DQogKiBAcHJvcGVydHkgc3RyaW5nIFVybA0KICovDQpjbGFzcyBNZXRhcw0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheSDlrZjlgqhNZXRhc+ebuOW6lOaVsOWAvOeahOaVsOe7hA0KICAgICAqLw0KICAgIHByaXZhdGUgJHBfZGF0YSA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGJvb2xlYW4g5piv5ZCm6Ieq5Yqo5pu/5o2iaG9zdA0KICAgICAqLw0KICAgIHByb3RlY3RlZCAkaXNyZXBsYWNlaG9zdCA9IHRydWU7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIGtleeWQjQ0KICAgICAqIEBwYXJhbSAkdmFsdWUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19zZXQoJG5hbWUsICR2YWx1ZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5wX2RhdGFbJG5hbWVdID0gJHZhbHVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUga2V55ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5wX2RhdGFbJG5hbWVdKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5wX2RhdGFbJG5hbWVdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9faXNzZXQoJG5hbWUpDQogICAgew0KICAgICAgICByZXR1cm4gaXNzZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3Vuc2V0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgdW5zZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuaVsOe7hOaVsOaNrui9rOaNouS4uk1ldGFz5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIGFycmF5ICRhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1ldGFzDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBDb252ZXJ0QXJyYXkoJGEpDQogICAgew0KICAgICAgICAkbSA9IG5ldyBzZWxmKCk7DQogICAgICAgIGlmIChpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgICRtLT5wX2RhdGEgPSAkYTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5ZEYXRh5pWw5o2uKOS4jeiuviRrZXnlsLHov5Tlm57mlbTkuKpkYXRh5pWw57uEKS4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0RGF0YSgka2V5ID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChudWxsID09ICRrZXkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cF9kYXRhOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wX2RhdGFbJGtleV07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkvp3mja56YnDorr7nva7mm7/mjaLnrb7moIfkuLpob3N05YC85oiW5piv5Zu65a6a5Z+f5ZCNLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdmFsdWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gUmVwbGFjZVRhZzJIb3N0KCR2YWx1ZSkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkYmxvZ2hvc3Q7DQoNCiAgICAgICAgcmV0dXJuIHN0cl9yZXBsYWNlKCd7I1pDX0JMT0dfSE9TVCN9JywgJGJsb2dob3N0LCAkdmFsdWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS+neaNrnpicOiuvue9ruabv+aNomhvc3TlgLzkuLrnrb7moIcuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR2YWx1ZQ0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBSZXBsYWNlSG9zdDJUYWcoJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICRibG9naG9zdDsNCg0KICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UoJGJsb2dob3N0LCAneyNaQ19CTE9HX0hPU1QjfScsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5aSa57u05pWw57uE5pu/5o2iaG9zdOWAvOS4uuetvuaghy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBhcnJheSAkYXJyYXkNCiAgICAgKiBAcGFyYW0gbWV0aG9kICRtZXRob2QNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFJlcGxhY2VUYWdBcnJheSgkYXJyYXksICRtZXRob2QpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJiR2YWx1ZSkgew0KICAgICAgICAgICAgaWYgKGlzX2FycmF5KCR2YWx1ZSkpIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSBzZWxmOjpSZXBsYWNlVGFnQXJyYXkoJHZhbHVlLCAkbWV0aG9kKTsNCiAgICAgICAgICAgIH0gZWxzZWlmIChpc19zdHJpbmcoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9IHNlbGY6OiRtZXRob2QoJHZhbHVlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gJGFycmF5Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpURhdGHlsZ7mgKfvvIjmlbDnu4TvvInlsZ7mgKflgLzmmK/mmK/lkKblrZjlnKjnm7jlupRrZXkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIGtleeWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEhhc0tleSgkbmFtZSkNCiAgICB7DQogICAgICAgIHJldHVybiBhcnJheV9rZXlfZXhpc3RzKCRuYW1lLCAkdGhpcy0+cF9kYXRhKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmo4Dmn6VEYXRh5bGe5oCn77yI5pWw57uE77yJ5Lit55qE5Y2V5YWD5pWw55uuLg0KICAgICAqDQogICAgICogQHJldHVybiBpbnQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ291bnRJdGVtKCkNCiAgICB7DQogICAgICAgIHJldHVybiBjb3VudCgkdGhpcy0+cF9kYXRhKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKDpmaREYXRh5bGe5oCn77yI5pWw57uE77yJ5Lit55qE55u45bqU6aG5Lg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSBrZXnlkI0NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgdW5zZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhkRhdGHlsZ7mgKfvvIjmlbDnu4TvvInlgLzluo/liJfljJYuDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZyDov5Tlm57luo/liJfljJbnmoTlgLwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2VyaWFsaXplKCkNCiAgICB7DQogICAgICAgIGlmIChjb3VudCgkdGhpcy0+cF9kYXRhKSA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gJyc7DQogICAgICAgIH0NCg0KICAgICAgICAkZGF0YSA9ICR0aGlzLT5wX2RhdGE7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5pc3JlcGxhY2Vob3N0KSB7DQogICAgICAgICAgICAkZGF0YSA9IHNlbGY6OlJlcGxhY2VUYWdBcnJheSgkZGF0YSwgJ1JlcGxhY2VIb3N0MlRhZycpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy9yZXR1cm4ganNvbl9lbmNvZGUoJGRhdGEpOw0KICAgICAgICByZXR1cm4gc2VyaWFsaXplKCRkYXRhKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlsIbluo/liJfljJbnmoTlgLzlj43luo/liJfljJblkI7otYvkuohEYXRh5bGe5oCn5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRzIOW6j+WIl+WMluWAvA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFVuc2VyaWFsaXplKCRzKQ0KICAgIHsNCiAgICAgICAgaWYgKCRzID09ICcnKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAvL2lmKHN0cnBvcygkcywneycpPT09MCl7DQogICAgICAgIC8vJHRoaXMtPnBfZGF0YT1qc29uX2RlY29kZSgkcyx0cnVlKTsNCiAgICAgICAgLy99ZWxzZXsNCiAgICAgICAgQCR0aGlzLT5wX2RhdGEgPSB1bnNlcmlhbGl6ZSgkcyk7DQogICAgICAgIC8vfQ0KICAgICAgICBpZiAoaXNfYXJyYXkoJHRoaXMtPnBfZGF0YSkpIHsNCiAgICAgICAgICAgIGlmIChjb3VudCgkdGhpcy0+cF9kYXRhKSA9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJHRoaXMtPmlzcmVwbGFjZWhvc3QpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+cF9kYXRhID0gc2VsZjo6UmVwbGFjZVRhZ0FycmF5KCR0aGlzLT5wX2RhdGEsICdSZXBsYWNlVGFnMkhvc3QnKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICR0aGlzLT5wX2RhdGEgPSBhcnJheSgpOw0KDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCn0NCg==</file>
	<file name='zb_system\function\lib\module.php' crc32='8B98CF6'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\modulebuilder.php' crc32='5701EEAE'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\network.php' crc32='B2209E1F'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiDnvZHnu5zov57mjqXnsbsuDQogKi8NCmNsYXNzIE5ldHdvcmsNCnsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgbnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyAkbmV0d29ya3R5cGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyAkbmV0d29ya19saXN0ID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyAkY3VybCA9IGZhbHNlOw0KDQogICAgLyoqDQogICAgICogQHZhciBib29sDQogICAgICovDQogICAgcHVibGljICRmc29ja29wZW4gPSBmYWxzZTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyAkZmlsZV9nZXRfY29udGVudHMgPSBmYWxzZTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgTmV0d29ya19fSW50ZXJmYWNlW10NCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyAkcHJpdmF0ZV9uZXR3b3JrID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOWHveaVsC4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQ0KICAgIHsNCiAgICAgICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnY3VybF9pbml0JykgJiYgZnVuY3Rpb25fZXhpc3RzKCdjdXJsX2V4ZWMnKSkgew0KICAgICAgICAgICAgJHRoaXMtPm5ldHdvcmtfbGlzdFtdID0gJ2N1cmwnOw0KICAgICAgICAgICAgJHRoaXMtPmN1cmwgPSB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGlmICgoYm9vbCkgaW5pX2dldCgnYWxsb3dfdXJsX2ZvcGVuJykpIHsNCiAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ3N0cmVhbV9zb2NrZXRfY2xpZW50JykpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bmV0d29ya19saXN0W10gPSAnZnNvY2tvcGVuJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5mc29ja29wZW4gPSB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGlmICgoYm9vbCkgaW5pX2dldCgnYWxsb3dfdXJsX2ZvcGVuJykpIHsNCiAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ2ZpbGVfZ2V0X2NvbnRlbnRzJykpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bmV0d29ya19saXN0W10gPSAnZmlsZWdldGNvbnRlbnRzJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5maWxlX2dldF9jb250ZW50cyA9IHRydWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRleHRlbnNpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gTmV0d29ya19fSW50ZXJmYWNlDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBDcmVhdGUoJGV4dGVuc2lvbiA9ICcnKQ0KICAgIHsNCiAgICAgICAgaWYgKCFpc3NldChzZWxmOjokcHJpdmF0ZV9uZXR3b3JrKSkgew0KICAgICAgICAgICAgc2VsZjo6JHByaXZhdGVfbmV0d29yayA9IG5ldyBzZWxmKCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCghc2VsZjo6JHByaXZhdGVfbmV0d29yay0+ZmlsZV9nZXRfY29udGVudHMpICYmICghc2VsZjo6JHByaXZhdGVfbmV0d29yay0+ZnNvY2tvcGVuKSAmJiAoIXNlbGY6OiRwcml2YXRlX25ldHdvcmstPmN1cmwpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAkZXh0ZW5zaW9uID0gKCRleHRlbnNpb24gPT0gJycgPyBzZWxmOjokcHJpdmF0ZV9uZXR3b3JrLT5uZXR3b3JrX2xpc3RbMF0gOiAkZXh0ZW5zaW9uKTsNCiAgICAgICAgJHR5cGUgPSAnTmV0d29ya19fJyAuICRleHRlbnNpb247DQogICAgICAgICRuZXR3b3JrID0gbmV3ICR0eXBlKCk7DQoNCiAgICAgICAgcmV0dXJuICRuZXR3b3JrOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\pagebar.php' crc32='41C4398A'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiDliIbpobXmnaHnoIENCiAqLw0KY2xhc3MgUGFnZUJhcg0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBpbnR8bnVsbCDlhoXlrrnmgLvmlbAo5pS55Li6QWxsQ291bnQpDQogICAgICovDQogICAgcHVibGljICRDb3VudCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludHxudWxsIOWGheWuueaAu+aVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkQWxsQ291bnQgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5b2T5YmN6aG1Q291bnTmlbDph48NCiAgICAgKi8NCiAgICBwdWJsaWMgJEN1cnJlbnRDb3VudCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCBQYWdlYmFy6ZW/5bqm5pWw6YePDQogICAgICovDQogICAgcHVibGljICRQYWdlQmFyQ291bnQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5q+P6aG15pWw6YeP77yI5pS55Li6UGVyUGFnZUNvdW5077yJDQogICAgICovDQogICAgcHVibGljICRQYWdlQ291bnQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5q+P6aG15pWw6YePDQogICAgICovDQogICAgcHVibGljICRQZXJQYWdlQ291bnQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5oC76aG15pWwDQogICAgICovDQogICAgcHVibGljICRQYWdlQWxsID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOW9k+WJjemhtSjmlLnkuLpQYWdlQ3VycmVudCkNCiAgICAgKi8NCiAgICBwdWJsaWMgJFBhZ2VOb3cgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5b2T5YmN6aG1DQogICAgICovDQogICAgcHVibGljICRQYWdlQ3VycmVudCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCDotbflp4vpobUNCiAgICAgKi8NCiAgICBwdWJsaWMgJFBhZ2VGaXJzdCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCDmnIDlkI7pobUNCiAgICAgKi8NCiAgICBwdWJsaWMgJFBhZ2VMYXN0ID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOS4iuS4gOmhtQ0KICAgICAqLw0KICAgIHB1YmxpYyAkUGFnZVByZXZpb3VzID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOS4i+S4gOmhtQ0KICAgICAqLw0KICAgIHB1YmxpYyAkUGFnZU5leHQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsfFVybFJ1bGUNCiAgICAgKi8NCiAgICBwdWJsaWMgJFVybFJ1bGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyAkYnV0dG9ucyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHByZXZidXR0b24gPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsDQogICAgICovDQogICAgcHVibGljICRuZXh0YnV0dG9uID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgJEJ1dHRvbnMgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsDQogICAgICovDQogICAgcHVibGljICRQcmV2QnV0dG9uID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgbnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyAkTmV4dEJ1dHRvbiA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGJvb2xlYW4g5piv5ZCm5YWo6YOo6L6T5Ye65Li65bim6ZO+5o6l55qEYnV0dG9uDQogICAgICovDQogICAgcHVibGljICRpc0Z1bGxMaW5rID0gZmFsc2U7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHVybA0KICAgICAqIEBwYXJhbSBib29sICRub191c2UNCiAgICAgKiBAcGFyYW0gYm9vbCAkdXNlQWJicg0KICAgICAqIEBwYXJhbSBib29sICRmb3JjZURpc3BsYXlGaXJzdFBhZ2UgPSBmYWxzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkdXJscnVsZSwgJG5vX3VzZSA9IHRydWUsICR1c2VBYmJyID0gZmFsc2UsICRmb3JjZURpc3BsYXlGaXJzdFBhZ2UgPSBmYWxzZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5VcmxSdWxlID0gbmV3IFVybFJ1bGUoJHVybHJ1bGUpOw0KICAgICAgICAvLyRub191c2Ug5Y+C5pWw5bey6KKr5bqf5byD5LqGDQogICAgICAgICR0aGlzLT5VcmxSdWxlLT51c2VBYmJyID0gJHVzZUFiYnI7DQogICAgICAgICR0aGlzLT5VcmxSdWxlLT5mb3JjZURpc3BsYXlGaXJzdFBhZ2UgPSAkZm9yY2VEaXNwbGF5Rmlyc3RQYWdlOw0KICAgICAgICAkdGhpcy0+QnV0dG9ucyA9ICYkdGhpcy0+YnV0dG9uczsNCiAgICAgICAgJHRoaXMtPlByZXZCdXR0b24gPSAmJHRoaXMtPnByZXZidXR0b247DQogICAgICAgICR0aGlzLT5OZXh0QnV0dG9uID0gJiR0aGlzLT5uZXh0YnV0dG9uOw0KICAgICAgICAkdGhpcy0+UGVyUGFnZUNvdW50ID0gJiR0aGlzLT5QYWdlQ291bnQ7DQogICAgICAgICR0aGlzLT5BbGxDb3VudCA9ICYkdGhpcy0+Q291bnQ7DQogICAgICAgICR0aGlzLT5QYWdlQ3VycmVudCA9ICYkdGhpcy0+UGFnZU5vdzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmnoTpgKDliIbpobXmnaENCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTWFrZSgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCg0KICAgICAgICAkdGhpcy0+UGFnZU5vdyA9IG1heCgxLCAkdGhpcy0+UGFnZU5vdyk7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5QYWdlQ291bnQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuICcnOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPlBhZ2VBbGwgPSBjZWlsKCR0aGlzLT5Db3VudCAvICR0aGlzLT5QYWdlQ291bnQpOw0KICAgICAgICAkdGhpcy0+UGFnZUZpcnN0ID0gMTsNCiAgICAgICAgJHRoaXMtPlBhZ2VMYXN0ID0gJHRoaXMtPlBhZ2VBbGw7DQoNCiAgICAgICAgJHRoaXMtPlBhZ2VQcmV2aW91cyA9ICgkdGhpcy0+UGFnZU5vdyAtIDEpOw0KICAgICAgICAkdGhpcy0+UGFnZVByZXZpb3VzID0gbWF4KDEsICR0aGlzLT5QYWdlUHJldmlvdXMpOw0KDQogICAgICAgICR0aGlzLT5QYWdlTmV4dCA9ICgkdGhpcy0+UGFnZU5vdyArIDEpOw0KICAgICAgICAkdGhpcy0+UGFnZU5leHQgPSBtaW4oJHRoaXMtPlBhZ2VBbGwsICR0aGlzLT5QYWdlTmV4dCk7DQoNCiAgICAgICAgJHRoaXMtPlVybFJ1bGUtPlJ1bGVzWyd7JXBhZ2UlfSddID0gJHRoaXMtPlBhZ2VGaXJzdDsNCiAgICAgICAgJHRoaXMtPmJ1dHRvbnNbKHN0cmluZykgJHpicC0+bGFuZ3MtPm1zZy0+Zmlyc3RfYnV0dG9uXSA9ICR0aGlzLT5VcmxSdWxlLT5NYWtlKCk7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5QYWdlTm93ICE9ICR0aGlzLT5QYWdlRmlyc3QpIHsNCiAgICAgICAgICAgICR0aGlzLT5VcmxSdWxlLT5SdWxlc1sneyVwYWdlJX0nXSA9ICR0aGlzLT5QYWdlUHJldmlvdXM7DQogICAgICAgICAgICAkdGhpcy0+YnV0dG9uc1soc3RyaW5nKSAkemJwLT5sYW5ncy0+bXNnLT5wcmV2X2J1dHRvbl0gPSAkdGhpcy0+VXJsUnVsZS0+TWFrZSgpOw0KICAgICAgICAgICAgJHRoaXMtPnByZXZidXR0b24gPSAkdGhpcy0+YnV0dG9uc1tAJHpicC0+bGFuZ3MtPm1zZy0+cHJldl9idXR0b25dOw0KICAgICAgICB9DQoNCiAgICAgICAgJHBhZ2VBbGwgPSAoJHRoaXMtPlBhZ2VBbGwgKyAxKTsNCiAgICAgICAgJG1pZGRsZSA9IGNlaWwoJHRoaXMtPlBhZ2VCYXJDb3VudCAvIDIpOw0KICAgICAgICAkc3RhcnQgPSAxOw0KICAgICAgICBpZiAoJHRoaXMtPlBhZ2VOb3cgPiAkbWlkZGxlKSB7DQogICAgICAgICAgICAkc3RhcnQgPSAoJHRoaXMtPlBhZ2VOb3cgLSAkbWlkZGxlICsgMSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRwYWdlQWxsID4gJHRoaXMtPlBhZ2VCYXJDb3VudCAmJiAoJHBhZ2VBbGwgLSAkc3RhcnQpIDwgJHRoaXMtPlBhZ2VCYXJDb3VudCkgew0KICAgICAgICAgICAgJHN0YXJ0ID0gKCRwYWdlQWxsIC0gJHRoaXMtPlBhZ2VCYXJDb3VudCk7DQogICAgICAgIH0NCiAgICAgICAgJGVuZCA9ICgkc3RhcnQgKyAkdGhpcy0+UGFnZUJhckNvdW50KTsNCiAgICAgICAgaWYgKCRlbmQgPiAkcGFnZUFsbCkgew0KICAgICAgICAgICAgJGVuZCA9ICRwYWdlQWxsOw0KICAgICAgICB9DQoNCiAgICAgICAgJGogPSB0cmltKChzdHJpbmcpICR6YnAtPmxhbmdzLT5tc2ctPm51bWVyYWxfYnV0dG9uKTsNCiAgICAgICAgJGogPSAoJGogPT0gJycpID8gJyVudW0lJyA6ICRqOw0KICAgICAgICBmb3IgKCRpID0gJHN0YXJ0OyAkaSA8ICRlbmQ7ICRpKyspIHsNCiAgICAgICAgICAgICR0aGlzLT5VcmxSdWxlLT5SdWxlc1sneyVwYWdlJX0nXSA9ICRpOw0KICAgICAgICAgICAgJHRoaXMtPmJ1dHRvbnNbc3RyX2lyZXBsYWNlKCclbnVtJScsICRpLCAkaildID0gJHRoaXMtPlVybFJ1bGUtPk1ha2UoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdGhpcy0+UGFnZU5vdyAhPSAkdGhpcy0+UGFnZU5leHQpIHsNCiAgICAgICAgICAgICR0aGlzLT5VcmxSdWxlLT5SdWxlc1sneyVwYWdlJX0nXSA9ICR0aGlzLT5QYWdlTmV4dDsNCiAgICAgICAgICAgICR0aGlzLT5idXR0b25zWyhzdHJpbmcpICR6YnAtPmxhbmdzLT5tc2ctPm5leHRfYnV0dG9uXSA9ICR0aGlzLT5VcmxSdWxlLT5NYWtlKCk7DQogICAgICAgICAgICAkdGhpcy0+bmV4dGJ1dHRvbiA9ICR0aGlzLT5idXR0b25zWyhzdHJpbmcpICR6YnAtPmxhbmdzLT5tc2ctPm5leHRfYnV0dG9uXTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5VcmxSdWxlLT5SdWxlc1sneyVwYWdlJX0nXSA9ICR0aGlzLT5QYWdlTGFzdDsNCiAgICAgICAgJHRoaXMtPmJ1dHRvbnNbKHN0cmluZykgJHpicC0+bGFuZ3MtPm1zZy0+bGFzdF9idXR0b25dID0gJHRoaXMtPlVybFJ1bGUtPk1ha2UoKTsNCiAgICB9DQoNCn0NCg==</file>
	<file name='zb_system\function\lib\tag.php' crc32='98E6FA3C'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFRhZ+exuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIFRlbXBsYXRlDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgSUQNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgQWxpYXMNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgVXJsDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBDb3VudCDmlofnq6DmlbDph48NCiAqLw0KY2xhc3MgVGFnIGV4dGVuZHMgQmFzZQ0Kew0KDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCR6YnAtPnRhYmxlWydUYWcnXSwgJHpicC0+ZGF0YWluZm9bJ1RhZyddLCBfX0NMQVNTX18pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbWV0aG9kDQogICAgICogQHBhcmFtICRhcmdzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY2FsbCgkbWV0aG9kLCAkYXJncykNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19DYWxsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbWV0aG9kLCAkYXJncyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHBhcmFtICR2YWx1ZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmIChpbl9hcnJheSgkbmFtZSwgYXJyYXkoJ1VybCcsICdBbGlhc0ZpcnN0JykpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdUZW1wbGF0ZScpIHsNCiAgICAgICAgICAgIGlmICgkdmFsdWUgPT0gJHpicC0+b3B0aW9uWydaQ19JTkRFWF9ERUZBVUxUX1RFTVBMQVRFJ10pIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSAnJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5kYXRhWyRuYW1lXSA9ICR2YWx1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19TZXQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMsICRuYW1lLCAkdmFsdWUpOw0KICAgICAgICB9DQogICAgICAgIHBhcmVudDo6X19zZXQoJG5hbWUsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkfHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2dldCgkbmFtZSkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1VybCcpIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19VcmwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGJhY2tBdHRyID0gJHpicC0+b3B0aW9uWydaQ19BTElBU19CQUNLX0FUVFInXTsNCiAgICAgICAgICAgICRyb3V0ZXMgPSAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ3JvdXRlcycpOw0KICAgICAgICAgICAgJHJvdXRlbmFtZSA9ICdwb3N0XycgLiAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ25hbWUnKSAuICdfbGlzdF90YWcnOw0KICAgICAgICAgICAgaWYgKGlzc2V0KCRyb3V0ZXNbJHJvdXRlbmFtZV0pICYmICFpc19udWxsKCR6YnAtPkdldFJvdXRlKCRyb3V0ZXNbJHJvdXRlbmFtZV0pKSkgew0KICAgICAgICAgICAgICAgICR1ID0gbmV3IFVybFJ1bGUoJHpicC0+R2V0Um91dGUoJHJvdXRlc1skcm91dGVuYW1lXSkpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkdSA9IG5ldyBVcmxSdWxlKCR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAnbGlzdF90YWdfdXJscnVsZScpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR1LT5SdWxlc09iamVjdCA9ICYkdGhpczsNCiAgICAgICAgICAgICR1LT5SdWxlc1sneyVpZCV9J10gPSAkdGhpcy0+SUQ7DQogICAgICAgICAgICAkdS0+UnVsZXNbJ3slYWxpYXMlfSddID0gcmF3dXJsZW5jb2RlX3dpdGhvdXRfYmFja3NsYXNoKCR0aGlzLT5BbGlhcyA9PSAnJyA/ICR0aGlzLT4kYmFja0F0dHIgOiAkdGhpcy0+QWxpYXMpOw0KDQogICAgICAgICAgICByZXR1cm4gJHUtPk1ha2UoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1RlbXBsYXRlJykgew0KICAgICAgICAgICAgJHZhbHVlID0gJHRoaXMtPmRhdGFbJG5hbWVdOw0KICAgICAgICAgICAgaWYgKCR2YWx1ZSA9PSAnJykgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAndGFnX3RlbXBsYXRlJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAkdmFsdWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdBbGlhc0ZpcnN0Jykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5BbGlhcykgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+QWxpYXM7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+TmFtZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9UYWdfR2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbmFtZSk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6X19nZXQoJG5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTYXZlKCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJHRoaXMtPlRlbXBsYXRlID09ICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAndGFnX3RlbXBsYXRlJykpIHsNCiAgICAgICAgICAgICR0aGlzLT5kYXRhWydUZW1wbGF0ZSddID0gJyc7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9UYWdfU2F2ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWwoKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fVGFnX0RlbCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudDo6RGVsKCk7DQogICAgfQ0KDQp9DQo=</file>
	<file name='zb_system\function\lib\template.php' crc32='DB4C4F2D'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\thumb.php' crc32='7D6CF5F9'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\upload.php' crc32='7C79EF0D'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\urlrule.php' crc32='63AA6033'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='17897F8A'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiB6YnDlhajlsYDmk43kvZznsbsuDQogKi8NCmNsYXNzIFpCbG9nUEhQDQp7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIG9iamVjdCDljZXkvovmqKHlvI/kuIvnmoRaQlDllK/kuIDlrp7kvosNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyAkcHJpdmF0ZV96YnAgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg54mI5pys5Y+3DQogICAgICovDQogICAgcHVibGljICR2ZXJzaW9uID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgRGF0YWJhc2VfX0ludGVyZmFjZSDmlbDmja7lupMNCiAgICAgKi8NCiAgICBwdWJsaWMgJGRiID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkg6YWN572u6YCJ6aG5DQogICAgICovDQogICAgcHVibGljICRvcHRpb24gPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheSDor63oqIANCiAgICAgKi8NCiAgICBwdWJsaWMgJGxhbmcgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBqc29u57G75Z6LIOivreiogA0KICAgICAqLw0KICAgIHB1YmxpYyAkbGFuZ3MgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheSDor63oqIDljIVsaXN0DQogICAgICovDQogICAgcHVibGljICRsYW5ncGFja2xpc3QgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg6Lev5b6EDQogICAgICovDQogICAgcHVibGljICRwYXRoID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOWfn+WQjQ0KICAgICAqLw0KICAgIHB1YmxpYyAkaG9zdCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyBjb29raWXkvZznlKjln58NCiAgICAgKi8NCiAgICBwdWJsaWMgJGNvb2tpZXNwYXRoID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIGd1aWQNCiAgICAgKi8NCiAgICBwdWJsaWMgJGd1aWQgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg5b2T5YmN6ZO+5o6lDQogICAgICovDQogICAgcHVibGljICRjdXJyZW50dXJsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOW9k+WJjemTvuaOpQ0KICAgICAqLw0KICAgIHB1YmxpYyAkZnVsbGN1cnJlbnR1cmwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg5b2T5YmN6ISa5pysDQogICAgICovDQogICAgcHVibGljICRjdXJyZW50c2NyaXB0Ow0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg5b2T5YmN6ISa5pys5YWo6Lev5b6EDQogICAgICovDQogICAgcHVibGljICRmdWxsY3VycmVudHNjcmlwdDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIFN5c3RlbeebruW9lQ0KICAgICAqLw0KICAgIHB1YmxpYyAkc3lzdGVtZGlyID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIEFkbWlu55uu5b2VDQogICAgICovDQogICAgcHVibGljICRhZG1pbmRpciA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDnlKjmiLfnm67lvZUNCiAgICAgKi8NCiAgICBwdWJsaWMgJHVzZXJzZGlyID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIFN5c3RlbSBVcmwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHN5c3RlbXVybCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyBBZG1pbiBVcmwNCiAgICAgKi8NCiAgICBwdWJsaWMgJGFkbWludXJsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOeUqOaIt1VybA0KICAgICAqLw0KICAgIHB1YmxpYyAkdXNlcnN1cmwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcgQ2FjaGXnm67lvZUNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNhY2hlZGlyID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIExvZ3Pnm67lvZUNCiAgICAgKi8NCiAgICBwdWJsaWMgJGxvZ3NkaXIgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcgRGF0YeebruW9lQ0KICAgICAqLw0KICAgIHB1YmxpYyAkZGF0YWRpciA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDpqozor4HnoIHlnLDlnYANCiAgICAgKi8NCiAgICBwdWJsaWMgJHZlcmlmeUNvZGVVcmwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg6aqM6K+B56CB5Zyw5Z2A77yI5ou85YaZ6ZSZ6K+v77yJDQogICAgICoNCiAgICAgKiBAZGVwcmVjYXRlZA0KICAgICAqLw0KICAgIHB1YmxpYyAkdmFsaWRjb2RldXJsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nDQogICAgICovDQogICAgcHVibGljICRmZWVkdXJsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nDQogICAgICovDQogICAgcHVibGljICRzZWFyY2h1cmwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgJGFqYXh1cmwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgJHhtbHJwY3VybCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyAkYXBpdXJsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nDQogICAgICovDQogICAgcHVibGljICRjbWR1cmwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBNZW1iZXJbXSDnlKjmiLfmlbDnu4QNCiAgICAgKi8NCiAgICBwdWJsaWMgJG1lbWJlcnMgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBNZW1iZXJbXSDnlKjmiLfmlbDnu4TvvIjku6XnlKjmiLflkI3kuLrplK7vvIkNCiAgICAgKi8NCiAgICBwdWJsaWMgJG1lbWJlcnNieW5hbWUgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBDYXRlZ29yeVtdIOWIhuexu+aVsOe7hCAoJGNhdGVnb3J5c+W3suW6n+W8gykNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNhdGVnb3J5cyA9IGFycmF5KCk7DQoNCiAgICBwdWJsaWMgJGNhdGVnb3JpZXMgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBDYXRlZ29yeVtdIOWIhuexu+aVsOe7hEFMTA0KICAgICAqLw0KICAgIHB1YmxpYyAkY2F0ZWdvcmllc19hbGwgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBDYXRlZ29yeVtdIOWIhuexu+aVsOe7hO+8iOW3suaOkuW6j++8iSAoJGNhdGVnb3J5c2J5b3JkZXLlt7Llup/lvIMpICBjYXRlZ29yaWVz5byV55SoDQogICAgICovDQogICAgcHVibGljICRjYXRlZ29yeXNieW9yZGVyID0gYXJyYXkoKTsNCg0KICAgIHB1YmxpYyAkY2F0ZWdvcmllc2J5b3JkZXIgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBDYXRlZ29yeVtdIOaMieexu+Wei+WIhuexu+eahDLnu7TmlbDnu4QgLy/mnKzouqvml6DmhI/kuYnkuobvvIznjrDlvJXnlKjoh6okY2F0ZWdvcmllc2J5b3JkZXJfdHlwZQ0KICAgICAqLw0KICAgIHB1YmxpYyAkY2F0ZWdvcmllc190eXBlID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgQ2F0ZWdvcnlbXSDmjInnsbvlnovliIbnsbsy57u05pWw57uE77yI5bey5o6S5bqP77yJY2F0ZWdvcmllc190eXBl5byV55SoDQogICAgICovDQogICAgcHVibGljICRjYXRlZ29yaWVzYnlvcmRlcl90eXBlID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgTW9kdWxlW10g5qih5Z2X5pWw57uEDQogICAgICovDQogICAgcHVibGljICRtb2R1bGVzID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgTW9kdWxlW10g5qih5Z2X5pWw57uE77yI5Lul5paH5Lu25ZCN5Li66ZSu77yJDQogICAgICovDQogICAgcHVibGljICRtb2R1bGVzYnlmaWxlbmFtZSA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIENvbmZpZ1tdIOmFjee9rumAiemhuQ0KICAgICAqLw0KICAgIHB1YmxpYyAkY29uZmlncyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIFRhZ1tdIOagh+etvuaVsOe7hA0KICAgICAqLw0KICAgIHB1YmxpYyAkdGFncyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIFRhZ1tdIOagh+etvuaVsOe7hO+8iOS7peagh+etvuWQjeS4uumUru+8iQ0KICAgICAqLw0KICAgIHB1YmxpYyAkdGFnc2J5bmFtZSA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGFycmF5IOagh+etvuaVsOe7hCBBTEwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRhZ3NfYWxsID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkg5qCH562+5pWw57uEIEJ5IFR5cGUgMue7tOaVsOe7hA0KICAgICAqLw0KICAgIHB1YmxpYyAkdGFnc190eXBlID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkg5qCH562+5pWw57uEIEJ5IFR5cGXvvIjku6XmoIfnrb7lkI3kuLrplK7vvIky57u05pWw57uEDQogICAgICovDQogICAgcHVibGljICR0YWdzYnluYW1lX3R5cGUgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBDb21tZW50W10g6K+E6K665pWw57uEDQogICAgICovDQogICAgcHVibGljICRjb21tZW50cyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIFBvc3RbXSDmlofnq6DliJfooajmlbDnu4QNCiAgICAgKi8NCiAgICBwdWJsaWMgJHBvc3RzID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOW9k+WJjemhtemdouagh+mimA0KICAgICAqLw0KICAgIHB1YmxpYyAkdGl0bGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg572R56uZ5ZCNDQogICAgICovDQogICAgcHVibGljICRuYW1lID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOe9keermeWtkOagh+mimA0KICAgICAqLw0KICAgIHB1YmxpYyAkc3VibmFtZSA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIEFwcCDlvZPliY3kuLvpopgNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRoZW1lID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkoKSDlvZPliY3kuLvpopjniYjmnKzkv6Hmga8NCiAgICAgKi8NCiAgICBwdWJsaWMgJHRoZW1laW5mbyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDlvZPliY3kuLvpopjpo47moLwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHN0eWxlID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgTWVtYmVyIOW9k+WJjeeUqOaItw0KICAgICAqLw0KICAgIHB1YmxpYyAkdXNlciA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIENvbmZpZyDnvJPlrZgNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNhY2hlID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXl8bnVsbCDmlbDmja7ooagNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRhYmxlID0gbnVsbDsNCg0KICAgIHB1YmxpYyAkdCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGFycmF5fG51bGwg5pWw5o2u6KGo5L+h5oGvDQogICAgICovDQogICAgcHVibGljICRkYXRhaW5mbyA9IG51bGw7DQoNCiAgICBwdWJsaWMgJGQgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheXxudWxsIOexu+Wei+W6j+WIlw0KICAgICAqLw0KICAgIHB1YmxpYyAkcG9zdHR5cGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheXxudWxsIOaTjeS9nOWIl+ihqA0KICAgICAqLw0KICAgIHB1YmxpYyAkYWN0aW9ucyA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIG1peGVkfG51bGx8c3RyaW5nIOW9k+WJjeaTjeS9nA0KICAgICAqLw0KICAgIHB1YmxpYyAkYWN0aW9uID0gbnVsbDsNCg0KICAgIHByb3RlY3RlZCAkaXNpbml0aWFsaXplZCA9IGZhbHNlOyAvL+aYr+WQpuWIneWni+WMluaIkOWKnw0KDQogICAgcHJvdGVjdGVkICRpc2Nvbm5lY3RlZCA9IGZhbHNlOyAvL+aYr+WQpui/nuaOpeaIkOWKnw0KDQogICAgcHJvdGVjdGVkICRpc2xvYWQgPSBmYWxzZTsgLy/mmK/lkKbovb3lhaUNCg0KICAgIHByb3RlY3RlZCAkaXNwcmVsb2FkID0gZmFsc2U7IC8v5piv5ZCm6aKE5Yqg6L29DQoNCiAgICBwcm90ZWN0ZWQgJGlzc2Vzc2lvbiA9IGZhbHNlOyAvL+aYr+WQpuS9v+eUqHNlc3Npb24NCg0KICAgIHB1YmxpYyAkaXNsb2FkbWVtYmVycyA9IGZhbHNlOw0KDQogICAgcHVibGljICRpc2xvYWRjYXRlZ29yaWVzID0gZmFsc2U7DQoNCiAgICBwdWJsaWMgJGlzbG9hZHRhZ3MgPSBmYWxzZTsNCg0KICAgIHB1YmxpYyAkaXNsb2FkbW9kdWxlcyA9IGZhbHNlOw0KDQogICAgcHVibGljICRpc21hbmFnZSA9IGZhbHNlOyAvL+aYr+WQpuWKoOi9veeuoeeQhuaooeW8jw0KDQogICAgcHVibGljICRpc2FwaSA9IGZhbHNlOyAvL+aYr+WQpuWKoOi9vUFQSeaooeW8jw0KDQogICAgcHVibGljICRpc2NtZCA9IGZhbHNlOyAvL+aYr+WQpuWKoOi9vUNNROaooeW8jw0KDQogICAgcHVibGljICRpc2FqYXggPSBmYWxzZTsgLy/mmK/lkKbliqDovb1BSkFY5qih5byPDQoNCiAgICBwdWJsaWMgJGlzeG1scnBjID0gZmFsc2U7IC8v5piv5ZCm5Yqg6L29WE1MLVJQQ+aooeW8jw0KDQogICAgcHVibGljICRpc2h0dHBzID0gZmFsc2U7IC8v5piv5ZCmSFRUUFMNCg0KICAgIHB1YmxpYyAkaXNIdHRwcyA9IGZhbHNlOyAvL+mTvuaOpeiHs2lzaHR0cHMNCg0KICAgIHB1YmxpYyAkaXNkZWJ1ZyA9IGZhbHNlOyAvL+aYr+WQpkRlYnVnIE1vZGUNCg0KICAgIHB1YmxpYyAkaXNsb2dpbiA9IGZhbHNlOyAvL+aYr+WQpkxvZ2luDQoNCiAgICBwdWJsaWMgJGlzbG9nZ2VkaW4gPSBmYWxzZTsgLy/pk77mjqXoh7Npc2xvZ2luDQoNCiAgICAvKioNCiAgICAgKiBAdmFyIFRlbXBsYXRlIOW9k+WJjeaooeadvw0KICAgICAqLw0KICAgIHB1YmxpYyAkdGVtcGxhdGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsIOekvuS8muWMluivhOiuug0KICAgICAqLw0KICAgIHB1YmxpYyAkc29jaWFsY29tbWVudCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIG51bGwg5qih5p2/5aS06YOoDQogICAgICovDQogICAgcHVibGljICRoZWFkZXIgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsIOaooeadv+WwvumDqA0KICAgICAqLw0KICAgIHB1YmxpYyAkZm9vdGVyID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkg5r+A5rS755qE5o+S5Lu25YiX6KGoDQogICAgICovDQogICAgcHVibGljICRhY3RpdmVkYXBwcyA9IGFycmF5KCk7DQoNCiAgICBwdWJsaWMgJGFjdGl2ZWFwcHM7DQoNCiAgICBwdWJsaWMgJGNvb2tpZV90b29rZW5faHR0cG9ubHkgPSB0cnVlOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg566h55CG6aG16Z2i5pi+56S65p2h5pWwDQogICAgICovDQogICAgcHVibGljICRtYW5hZ2Vjb3VudCA9IDUwOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsIOeuoeeQhumhtemdouaOkuW6j+S+neaNrg0KICAgICAqLw0KICAgIHB1YmxpYyAkbWFuYWdlb3JkZXIgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg6aG156CB5pi+56S65p2h5pWwDQogICAgICovDQogICAgcHVibGljICRwYWdlYmFyY291bnQgPSAxMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOaQnOe0oui/lOWbnuadoeaVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkc2VhcmNoY291bnQgPSAxMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOaWh+eroOWIl+ihqOaYvuekuuadoeaVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkZGlzcGxheWNvdW50ID0gMTA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIG51bGwg5paH56ug5YiX6KGo5o6S5bqP5L6d5o2uDQogICAgICovDQogICAgcHVibGljICRkaXNwbGF5b3JkZXIgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg6K+E6K665pi+56S65pWw6YePDQogICAgICovDQogICAgcHVibGljICRjb21tZW50ZGlzcGxheWNvdW50ID0gMTA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCBBUEkg5q+P6aG15pyA5aSa5p2h5pWwDQogICAgICovDQogICAgcHVibGljICRhcGlNYXhDb3VudFBlclBhZ2UgPSA1MDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOW9k+WJjeWunuS+i+S4i0NTUkYgVG9rZW7ov4fmnJ/ml7bpl7TvvIjlsI/ml7bvvIkNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNzcmZFeHBpcmF0aW9uID0gMTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgQXBwIOW9k+WJjeS4u+mimOexuw0KICAgICAqLw0KICAgIHB1YmxpYyAkdGhlbWVhcHAgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5YiG57G75pyA5aSn6YCS5b2S5bGC5pWwDQogICAgICovDQogICAgcHVibGljICRjYXRlZ29yeV9yZWN1cnNpb25fbGV2ZWwgPSA1Ow0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5YiG57G75a6e6ZmF6YCS5b2S5bGC5pWwDQogICAgICovDQogICAgcHVibGljICRjYXRlZ29yeV9yZWN1cnNpb25fcmVhbF9kZWVwID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOivhOiuuuacgOWkp+mAkuW9kuWxguaVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkY29tbWVudF9yZWN1cnNpb25fbGV2ZWwgPSA0Ow0KDQogICAgLyoqDQogICAgICogQHZhciBodG1sIGpzIGhhc2ggKOS9v+eUqOaXtuivt+eUqOKAnOi/veWKoOKAneWOu+a3u+WKoOiHquW3seeahGhhc2gpDQogICAgICovDQogICAgcHVibGljICRodG1sX2pzX2hhc2ggPSAnJzsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYWRtaW4ganMgaGFzaCAo5L2/55So5pe26K+355So4oCc6L+95Yqg4oCd5Y675re75Yqg6Ieq5bex55qEaGFzaCkNCiAgICAgKi8NCiAgICBwdWJsaWMgJGFkbWluX2pzX2hhc2ggPSAnJzsNCg0KICAgIC8v6buY6K6k6Lev55SxdXJs5pWw57uEDQogICAgcHVibGljICRyb3V0ZXMgPSBhcnJheSgpOw0KDQogICAgLy/mgLvnvJPlrZjlr7nosaENCiAgICBwdWJsaWMgJGNhY2hlb2JqZWN0ID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOiuvuWumuS4u+mimOS4i+eahOaooeadv+iHquWKqOWhq+WFhee8uuWkseeahGh0bWzmoIfnrb4o6buY6K6k5pivdHJ1ZSkNCiAgICAgKi8NCiAgICBwdWJsaWMgJGF1dG9maWxsX3RlbXBsYXRlX2h0bWx0YWdzID0gdHJ1ZTsNCg0KICAgIGNvbnN0IE9QVElPTl9SRVNFUlZFX0tFWVMgPSAnWkNfREFUQUJBU0VfVFlQRXxaQ19TUUxJVEVfTkFNRXxaQ19TUUxJVEVfUFJFfFpDX01ZU1FMX1NFUlZFUnxaQ19NWVNRTF9VU0VSTkFNRXxaQ19NWVNRTF9QQVNTV09SRHxaQ19NWVNRTF9OQU1FfFpDX01ZU1FMX0NIQVJTRVR8WkNfTVlTUUxfQ09MTEFURXxaQ19NWVNRTF9QUkV8WkNfTVlTUUxfRU5HSU5FfFpDX01ZU1FMX1BPUlR8WkNfTVlTUUxfUEVSU0lTVEVOVHxaQ19NWVNRTF9QT1JUfFpDX1BHU1FMX1NFUlZFUnxaQ19QR1NRTF9VU0VSTkFNRXxaQ19QR1NRTF9QQVNTV09SRHxaQ19QR1NRTF9OQU1FfFpDX1BHU1FMX0NIQVJTRVR8WkNfUEdTUUxfUFJFfFpDX1BHU1FMX1BPUlR8WkNfUEdTUUxfUEVSU0lTVEVOVHxaQ19DTE9TRV9XSE9MRV9TSVRFfFpDX1BFUk1BTkVOVF9ET01BSU5fRk9SQ0VEX1VSTHxaQ19QRVJNQU5FTlRfRE9NQUlOX0ZPUkNFRF9ESVNBQkxFfFpDX0lOU1RBTExfQUZURVJfQ09ORklHJzsNCg0KICAgIC8qKg0KICAgICAqIFpCUOmtlOacr+aWueazleWHveaVsCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLg0KICAgICAqLw0KDQogICAgLyoqDQogICAgICogQGFwaSBGaWx0ZXJfUGx1Z2luX1picF9DYWxsDQogICAgICoNCiAgICAgKiBAcGFyYW0gJG1ldGhvZA0KICAgICAqIEBwYXJhbSAkYXJncw0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NhbGwoJG1ldGhvZCwgJGFyZ3MpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfQ2FsbCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkbWV0aG9kLCAkYXJncyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHByZWdfbWF0Y2goJy9HZXQoW2EtekEtWl1bYS16QS1aMC05X10qKUxpc3QvaScsICRtZXRob2QsICRtKSA9PSAxKSB7DQogICAgICAgICAgICAkY2xhc3NuYW1lID0gJG1bMV07DQogICAgICAgICAgICBhcnJheV91bnNoaWZ0KCRhcmdzLCAkY2xhc3NuYW1lKTsNCiAgICAgICAgICAgIGlmIChpc19zdWJjbGFzc19vZigkY2xhc3NuYW1lLCAnQmFzZScpID09IHRydWUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbF91c2VyX2Z1bmNfYXJyYXkoYXJyYXkoJHRoaXMsICdHZXRMaXN0V2l0aEJhc2VPYmplY3QnKSwgJGFyZ3MpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChwcmVnX21hdGNoKCcvR2V0KFthLXpBLVpdW2EtekEtWjAtOV9dKilCeUFycmF5L2knLCAkbWV0aG9kLCAkbSkgPT0gMSkgew0KICAgICAgICAgICAgJGNsYXNzbmFtZSA9ICRtWzFdOw0KICAgICAgICAgICAgYXJyYXlfdW5zaGlmdCgkYXJncywgJGNsYXNzbmFtZSk7DQogICAgICAgICAgICBpZiAoaXNfc3ViY2xhc3Nfb2YoJGNsYXNzbmFtZSwgJ0Jhc2UnKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxfdXNlcl9mdW5jX2FycmF5KGFycmF5KCR0aGlzLCAnR2V0TGlzdEJ5QXJyYXlXaXRoQmFzZU9iamVjdCcpLCAkYXJncyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKHByZWdfbWF0Y2goJy9HZXQoW2EtekEtWl1bYS16QS1aMC05X10qKUJ5SUQvaScsICRtZXRob2QsICRtKSA9PSAxKSB7DQogICAgICAgICAgICAkY2xhc3NuYW1lID0gJG1bMV07DQogICAgICAgICAgICBhcnJheV91bnNoaWZ0KCRhcmdzLCAkY2xhc3NuYW1lKTsNCiAgICAgICAgICAgIGlmIChpc19zdWJjbGFzc19vZigkY2xhc3NuYW1lLCAnQmFzZScpID09IHRydWUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbF91c2VyX2Z1bmNfYXJyYXkoYXJyYXkoJHRoaXMsICdHZXRTaW5nbGVCeUlEV2l0aEJhc2VPYmplY3QnKSwgJGFyZ3MpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdHJpZ2dlcl9lcnJvcihnZXRfY2xhc3MoJHRoaXMpIC4gJHRoaXMtPmxhbmdbJ2Vycm9yJ11bODFdIC4gIiAnJG1ldGhvZCcgIiwgRV9VU0VSX1dBUk5JTkcpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiuvue9ruWPguaVsOWAvA0KICAgICAqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHBhcmFtICR2YWx1ZQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX1NldCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkbmFtZSwgJHZhbHVlKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdHJpZ2dlcl9lcnJvcihnZXRfY2xhc3MoJHRoaXMpIC4gJHRoaXMtPmxhbmdbJ2Vycm9yJ11bODFdIC4gIiAnJG5hbWUnICIsIEVfVVNFUl9XQVJOSU5HKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5blj4LmlbDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2dldCgkbmFtZSkNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9HZXQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJG5hbWUpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICB0cmlnZ2VyX2Vycm9yKGdldF9jbGFzcygkdGhpcykgLiAkdGhpcy0+bGFuZ1snZXJyb3InXVs4MV0gLiAiICckbmFtZScgIiwgRV9VU0VSX1dBUk5JTkcpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFpCUOezu+e7n+WIneWni+WMluWPiuWKoOi9vSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLg0KICAgICAqLw0KDQogICAgLyoqDQogICAgICog6I635Y+W5ZSv5LiA5a6e5L6LLg0KICAgICAqDQogICAgICogQHJldHVybiBudWxsfFpCbG9nUEhQDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBHZXRJbnN0YW5jZSgpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KHNlbGY6OiRwcml2YXRlX3picCkpIHsNCiAgICAgICAgICAgIGlmIChpc3NldCgkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0dPRFpCUF9GSUxFJ10pICYmIGlzc2V0KCRHTE9CQUxTWydvcHRpb24nXVsnWkNfR09EWkJQX05BTUUnXSkgJiYgaXNfcmVhZGFibGUoWkJQX1BBVEggLiAkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0dPRFpCUF9GSUxFJ10pKSB7DQogICAgICAgICAgICAgICAgaW5jbHVkZSBaQlBfUEFUSCAuICRHTE9CQUxTWydvcHRpb24nXVsnWkNfR09EWkJQX0ZJTEUnXTsNCiAgICAgICAgICAgICAgICBzZWxmOjokcHJpdmF0ZV96YnAgPSBuZXcgJEdMT0JBTFNbJ29wdGlvbiddWydaQ19HT0RaQlBfTkFNRSddKCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHNlbGY6OiRwcml2YXRlX3picCA9IG5ldyBzZWxmKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gc2VsZjo6JHByaXZhdGVfemJwOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIneWni+WMluaVsOaNruW6k+i/nuaOpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUg5pWw5o2u6L+e5o6l57G75Z6LDQogICAgICoNCiAgICAgKiBAcmV0dXJuIERhdGFiYXNlX19JbnRlcmZhY2UNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEluaXRpYWxpemVEQigkdHlwZSkNCiAgICB7DQogICAgICAgIGlmICghdHJpbSgkdHlwZSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgICRuZXd0eXBlID0gJ0RhdGFiYXNlX18nIC4gdHJpbSgkdHlwZSk7DQoNCiAgICAgICAgcmV0dXJuIG5ldyAkbmV3dHlwZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOWHveaVsO+8jOWKoOi9veWfuuacrOmFjee9ruWIsCR6YnAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkb3B0aW9uLCAkbGFuZywgJGxhbmdzLCAkYmxvZ3BhdGgsICRibG9naG9zdCwgJGNvb2tpZXNwYXRoLCAkY2FjaGVkaXIsICRsb2dzZGlyLCAkZGF0YWRpciwNCiAgICAgICAgICAgICR0YWJsZSwgJGRhdGFpbmZvLCAkYWN0aW9ucywgJGFjdGlvbiwgJGJsb2d2ZXJzaW9uLCAkYmxvZ3RpdGxlLCAkYmxvZ25hbWUsICRibG9nc3VibmFtZSwgJHJvdXRlcywNCiAgICAgICAgICAgICRibG9ndGhlbWUsICRibG9nc3R5bGUsICRjdXJyZW50dXJsLCAkZnVsbGN1cnJlbnR1cmwsICRjdXJyZW50c2NyaXB0LCAkZnVsbGN1cnJlbnRzY3JpcHQsDQogICAgICAgICAgICAkYWN0aXZlZGFwcHMsICRwb3N0dHlwZSwgJHVzZXJzZGlyLCAkc3lzdGVtZGlyLCAkYWRtaW5kaXIsICR1c2Vyc3VybCwgJHN5c3RlbXVybCwgJGFkbWludXJsOw0KDQogICAgICAgIGlmICgoZGVmaW5lZCgnWkJQX0RFQlVHTU9ERScpICYmIGNvbnN0YW50KCdaQlBfREVCVUdNT0RFJykgPT0gdHJ1ZSkpIHsNCiAgICAgICAgICAgICR0aGlzLT5pc2RlYnVnID0gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChaQlBfSE9PS0VSUk9SKSB7DQogICAgICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6U2V0RXJyb3JIb29rKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvL+WfuuacrOmFjee9ruWKoOi9veWIsCR6YnDlhoUNCiAgICAgICAgJHRoaXMtPnZlcnNpb24gPSAmJGJsb2d2ZXJzaW9uOw0KICAgICAgICAkdGhpcy0+b3B0aW9uID0gJiRvcHRpb247DQogICAgICAgICR0aGlzLT5sYW5nID0gJiRsYW5nOw0KICAgICAgICAkdGhpcy0+bGFuZ3MgPSAmJGxhbmdzOw0KICAgICAgICAkdGhpcy0+cm91dGVzID0gJiRyb3V0ZXM7DQoNCiAgICAgICAgJHRoaXMtPnBhdGggPSAmJGJsb2dwYXRoOw0KICAgICAgICAkdGhpcy0+aG9zdCA9ICYkYmxvZ2hvc3Q7IC8v5q2k5YC85Zyo5ZCO6L655Yid5aeL5YyW5pe25Y+v6IO95Lya5Y+Y5YyWIQ0KICAgICAgICAkdGhpcy0+Y3VycmVudHVybCA9ICYkY3VycmVudHVybDsNCiAgICAgICAgJHRoaXMtPmZ1bGxjdXJyZW50dXJsID0gJiRmdWxsY3VycmVudHVybDsNCiAgICAgICAgJHRoaXMtPmN1cnJlbnRzY3JpcHQgPSAmJGN1cnJlbnRzY3JpcHQ7DQogICAgICAgICR0aGlzLT5mdWxsY3VycmVudHNjcmlwdCA9ICYkZnVsbGN1cnJlbnRzY3JpcHQ7DQogICAgICAgICR0aGlzLT5jb29raWVzcGF0aCA9ICYkY29va2llc3BhdGg7DQogICAgICAgICR0aGlzLT51c2Vyc2RpciA9ICYkdXNlcnNkaXI7DQogICAgICAgICR0aGlzLT5jYWNoZWRpciA9ICYkY2FjaGVkaXI7DQogICAgICAgICR0aGlzLT5sb2dzZGlyID0gJiRsb2dzZGlyOw0KICAgICAgICAkdGhpcy0+ZGF0YWRpciA9ICYkZGF0YWRpcjsNCiAgICAgICAgJHRoaXMtPnN5c3RlbWRpciA9ICYkc3lzdGVtZGlyOw0KICAgICAgICAkdGhpcy0+YWRtaW5kaXIgPSAmJGFkbWluZGlyOw0KICAgICAgICAkdGhpcy0+dXNlcnN1cmwgPSAmJHVzZXJzdXJsOw0KICAgICAgICAkdGhpcy0+c3lzdGVtdXJsID0gJiRzeXN0ZW11cmw7DQogICAgICAgICR0aGlzLT5hZG1pbnVybCA9ICYkYWRtaW51cmw7DQoNCiAgICAgICAgJHRoaXMtPnRhYmxlID0gJiR0YWJsZTsNCiAgICAgICAgJHRoaXMtPmRhdGFpbmZvID0gJiRkYXRhaW5mbzsNCiAgICAgICAgJHRoaXMtPnQgPSAmJHRoaXMtPnRhYmxlOw0KICAgICAgICAkdGhpcy0+ZCA9ICYkdGhpcy0+ZGF0YWluZm87DQogICAgICAgICR0aGlzLT5hY3Rpb25zID0gJiRhY3Rpb25zOw0KICAgICAgICAkdGhpcy0+cG9zdHR5cGUgPSAmJHBvc3R0eXBlOw0KDQogICAgICAgICR0aGlzLT5hY3Rpb24gPSAmJGFjdGlvbjsNCiAgICAgICAgJHRoaXMtPmFjdGl2ZWRhcHBzID0gJiRhY3RpdmVkYXBwczsNCiAgICAgICAgJHRoaXMtPmFjdGl2ZWFwcHMgPSAmJHRoaXMtPmFjdGl2ZWRhcHBzOw0KDQogICAgICAgICR0aGlzLT5ndWlkID0gJiR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfQ0xTSUQnXTsNCg0KICAgICAgICAkdGhpcy0+dGl0bGUgPSAmJGJsb2d0aXRsZTsNCiAgICAgICAgJHRoaXMtPm5hbWUgPSAmJGJsb2duYW1lOw0KICAgICAgICAkdGhpcy0+c3VibmFtZSA9ICYkYmxvZ3N1Ym5hbWU7DQogICAgICAgICR0aGlzLT50aGVtZSA9ICYkYmxvZ3RoZW1lOw0KICAgICAgICAkdGhpcy0+c3R5bGUgPSAmJGJsb2dzdHlsZTsNCg0KICAgICAgICAkdGhpcy0+bWFuYWdlY291bnQgPSAmJHRoaXMtPm9wdGlvblsnWkNfTUFOQUdFX0NPVU5UJ107DQogICAgICAgICR0aGlzLT5tYW5hZ2VvcmRlciA9ICYkdGhpcy0+b3B0aW9uWydaQ19NQU5BR0VfT1JERVInXTsNCiAgICAgICAgJHRoaXMtPnBhZ2ViYXJjb3VudCA9ICYkdGhpcy0+b3B0aW9uWydaQ19QQUdFQkFSX0NPVU5UJ107DQogICAgICAgICR0aGlzLT5zZWFyY2hjb3VudCA9ICYkdGhpcy0+b3B0aW9uWydaQ19TRUFSQ0hfQ09VTlQnXTsNCiAgICAgICAgJHRoaXMtPmRpc3BsYXljb3VudCA9ICYkdGhpcy0+b3B0aW9uWydaQ19ESVNQTEFZX0NPVU5UJ107DQogICAgICAgICR0aGlzLT5kaXNwbGF5b3JkZXIgPSAmJHRoaXMtPm9wdGlvblsnWkNfRElTUExBWV9PUkRFUiddOw0KICAgICAgICAkdGhpcy0+Y29tbWVudGRpc3BsYXljb3VudCA9ICYkdGhpcy0+b3B0aW9uWydaQ19DT01NRU5UU19ESVNQTEFZX0NPVU5UJ107DQoNCiAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyX3R5cGVbMF0gPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXIgPSAmJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyX3R5cGVbMF07DQogICAgICAgICR0aGlzLT5jYXRlZ29yaWVzID0gJiR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcjsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3J5cyA9ICYkdGhpcy0+Y2F0ZWdvcmllczsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3J5c2J5b3JkZXIgPSAmJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyOw0KDQogICAgICAgICR0aGlzLT50YWdzX3R5cGVbMF0gPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+dGFnc2J5bmFtZV90eXBlWzBdID0gYXJyYXkoKTsNCiAgICAgICAgJHRoaXMtPnRhZ3MgPSAmJHRoaXMtPnRhZ3NfdHlwZVswXTsNCiAgICAgICAgJHRoaXMtPnRhZ3NieW5hbWUgPSAmJHRoaXMtPnRhZ3NieW5hbWVfdHlwZVswXTsNCg0KICAgICAgICAkdGhpcy0+dXNlciA9IG5ldyBzdGRDbGFzcygpOw0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+ZGF0YWluZm9bJ01lbWJlciddIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAkdGhpcy0+dXNlci0+JGtleSA9ICR2YWx1ZVszXTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+dXNlci0+TWV0YXMgPSBuZXcgTWV0YXMoKTsNCg0KICAgICAgICAkdGhpcy0+aXNIdHRwcyA9ICYkdGhpcy0+aXNodHRwczsNCiAgICAgICAgJHRoaXMtPmlzbG9nZ2VkaW4gPSAmJHRoaXMtPmlzbG9naW47DQoNCiAgICAgICAgJHRoaXMtPkJpbmRpbmdDYWNoZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAq5p6Q5p6E5Ye95pWw77yM6YeK5pS+6LWE5rqQLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCkNCiAgICB7DQogICAgICAgICR0aGlzLT5UZXJtaW5hdGUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliJ3lp4vljJYkemJwLg0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbml0aWFsaXplKCkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+aXNpbml0aWFsaXplZCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgJG9sZFpvbmUgPSAkdGhpcy0+b3B0aW9uWydaQ19USU1FX1pPTkVfTkFNRSddOw0KICAgICAgICBkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCRvbGRab25lKTsNCg0KICAgICAgICAkb2xkTGFuZyA9ICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfTEFOR1VBR0VQQUNLJ107DQogICAgICAgICR0aGlzLT5Mb2FkTGFuZ3VhZ2UoJ3N5c3RlbScsICcnKTsNCg0KICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfQ0xPU0VfV0hPTEVfU0lURSddID09IHRydWUpIHsNCiAgICAgICAgICAgIEh0dHA1MDMoKTsNCiAgICAgICAgICAgICR0aGlzLT5TaG93RXJyb3IoODIsIF9fRklMRV9fLCBfX0xJTkVfXyk7DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghJHRoaXMtPk9wZW5Db25uZWN0KCkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5Db252ZXJ0VGFibGVBbmREYXRhaW5mbygpOw0KDQogICAgICAgICR0aGlzLT5Mb2FkQ29uZmlnc09ubHlTeXN0ZW0odHJ1ZSk7DQogICAgICAgICR0aGlzLT5Mb2FkT3B0aW9uKCk7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfTEFOR1VBR0VQQUNLJ10gPT09ICdTaW1wQ2hpbmVzZScpIHsNCiAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfTEFOR1VBR0VQQUNLJ10gPSAnemgtY24nOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfTEFOR1VBR0VQQUNLJ10gPT09ICdUcmFkQ2hpbmVzZScpIHsNCiAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfTEFOR1VBR0VQQUNLJ10gPSAnemgtdHcnOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCRvbGRMYW5nICE9ICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfTEFOR1VBR0VQQUNLJ10pIHsNCiAgICAgICAgICAgICR0aGlzLT5Mb2FkTGFuZ3VhZ2UoJ3N5c3RlbScsICcnKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19NT0RFX1dBUk5JTkcnXSkpIHsNCiAgICAgICAgICAgIFpCbG9nRXhjZXB0aW9uOjokaXN3YXJuaW5nID0gKGJvb2wpICR0aGlzLT5vcHRpb25bJ1pDX0RFQlVHX01PREVfV0FSTklORyddOw0KICAgICAgICB9DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19NT0RFX1NUUklDVCddKSkgew0KICAgICAgICAgICAgWkJsb2dFeGNlcHRpb246OiRpc3N0cmljdCA9IChib29sKSAkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19NT0RFX1NUUklDVCddOw0KICAgICAgICB9DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19MT0dfRVJST1InXSkpIHsNCiAgICAgICAgICAgIFpCbG9nRXhjZXB0aW9uOjokaXNsb2dlcnJvciA9IChib29sKSAkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19MT0dfRVJST1InXTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChkZWZpbmVkKCdaQlBfREVCVUdNT0RFJykgJiYgY29uc3RhbnQoJ1pCUF9ERUJVR01PREUnKSA9PSB0cnVlKSB7DQogICAgICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6JGlzd2FybmluZyA9IHRydWU7DQogICAgICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6JGlzc3RyaWN0ID0gdHJ1ZTsNCiAgICAgICAgICAgIFpCbG9nRXhjZXB0aW9uOjokaXNsb2dlcnJvciA9IHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICAvL+a2iOmZpDE25Y2H57qnMTflj4jpgIDlm54xNuWQjuWGjeWNh+e6pzE35Ye655qEYnVnOw0KICAgICAgICBpZiAoaXNfYXJyYXkoJHRoaXMtPm9wdGlvblsnWkNfQkxPR19IT1NUJ10pICYmIGlzX2FycmF5KCR0aGlzLT5vcHRpb25bJ1pDX1BFUk1BTkVOVF9ET01BSU5fRU5BQkxFJ10pKSB7DQogICAgICAgICAgICBGaXhfMTZfdG9fMTdfYW5kXzE3X3RvXzE2X0Vycm9yKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoZGVmaW5lZCgnWkJQX1BSRVNFVF9IT1NUX1VTRUQnKSkgew0KICAgICAgICAgICAgLy/lpoLmnpznjq/looPlj5jph4/lt7LpooTorr7kuoZibG9naG9zdA0KICAgICAgICAgICAgJHRoaXMtPmhvc3QgPSBydHJpbSgkdGhpcy0+aG9zdCwgJy8nKSAuICcvJzsNCiAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfSE9TVCddID0gJHRoaXMtPmhvc3Q7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvL1pDX1BFUk1BTkVOVF9ET01BSU5fV0hPTEVfRElTQUJMReS4jeWtmOWcqCDmiJbmmK8gWkNfUEVSTUFORU5UX0RPTUFJTl9XSE9MRV9ESVNBQkxF5a2Y5Zyo5L2G5Li65YGHDQogICAgICAgICAgICAkZG9tYWluX2Rpc2FibGUgPSBHZXRWYWx1ZUluQXJyYXkoJHRoaXMtPm9wdGlvbiwgJ1pDX1BFUk1BTkVOVF9ET01BSU5fV0hPTEVfRElTQUJMRScpOw0KICAgICAgICAgICAgaWYgKCRkb21haW5fZGlzYWJsZSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgICRmb3JjZWRfdXJsID0gR2V0VmFsdWVJbkFycmF5KCR0aGlzLT5vcHRpb24sICdaQ19QRVJNQU5FTlRfRE9NQUlOX0ZPUkNFRF9VUkwnKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZvcmNlZF91cmwgIT0gJycpIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpxaQ19QRVJNQU5FTlRfRE9NQUlOX0ZPUkNFRF9VUkzlrZjlnKgg5LiU5LiN5Li656m6DQogICAgICAgICAgICAgICAgICAgICRmb3JjZWRfdXJsID0gcnRyaW0oJGZvcmNlZF91cmwsICcvJykgLiAnLyc7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5ob3N0ID0gKHN0cmluZykgJGZvcmNlZF91cmw7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5jb29raWVzcGF0aCA9IHN0cnN0cihzdHJfcmVwbGFjZSgnOi8vJywgJycsICR0aGlzLT5ob3N0KSwgJy8nKTsNCiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoJHRoaXMtPm9wdGlvblsnWkNfUEVSTUFORU5UX0RPTUFJTl9FTkFCTEUnXSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5aaC5p6cWkNfUEVSTUFORU5UX0RPTUFJTl9FTkFCTEXlt7LlvIDlkK/nmoTor50NCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmhvc3QgPSAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0hPU1QnXTsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmhvc3QgPSBydHJpbSgkdGhpcy0+aG9zdCwgJy8nKSAuICcvJzsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNvb2tpZXNwYXRoID0gc3Ryc3RyKHN0cl9yZXBsYWNlKCc6Ly8nLCAnJywgJHRoaXMtPmhvc3QpLCAnLycpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIC8v6buY6K6k6Ieq5Yqo6K+G5Yir5Z+f5ZCNDQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5ob3N0ID0gcnRyaW0oJHRoaXMtPmhvc3QsICcvJykgLiAnLyc7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfSE9TVCddID0gJHRoaXMtPmhvc3Q7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+aG9zdCA9IHJ0cmltKCR0aGlzLT5ob3N0LCAnLycpIC4gJy8nOw0KICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfSE9TVCddID0gJHRoaXMtPmhvc3Q7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1QnXSA9ICdaLUJsb2dQSFAnOw0KICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1ZFUlNJT04nXSA9IFpDX0JMT0dfVkVSU0lPTjsNCiAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfTk9XX1ZFUlNJT04nXSA9ICR0aGlzLT52ZXJzaW9uOw0KICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0NPTU1JVCddID0gWkNfQkxPR19DT01NSVQ7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfUFJPRFVDVF9GVUxMJ10gPSAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1QnXSAuICcgJyAuIFpDX1ZFUlNJT05fRElTUExBWTsNCiAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfQkxPR19QUk9EVUNUX0ZVTExIVE1MJ10gPSAnPGEgaHJlZj0iaHR0cHM6Ly93d3cuemJsb2djbi5jb20vIiB0aXRsZT0iWi1CbG9nUEhQICcgLiBaQ19CTE9HX1ZFUlNJT04gLiAnIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmZlcnJlciI+JyAuICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfUFJPRFVDVF9GVUxMJ10gLiAnPC9hPic7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfUFJPRFVDVF9IVE1MJ10gPSAnPGEgaHJlZj0iaHR0cHM6Ly93d3cuemJsb2djbi5jb20vIiB0aXRsZT0iWi1CbG9nUEhQICcgLiBaQ19CTE9HX1ZFUlNJT04gLiAnIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmZlcnJlciI+JyAuICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfUFJPRFVDVCddIC4gJzwvYT4nOw0KDQogICAgICAgIGlmICgkb2xkWm9uZSAhPSAkdGhpcy0+b3B0aW9uWydaQ19USU1FX1pPTkVfTkFNRSddKSB7DQogICAgICAgICAgICBkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCR0aGlzLT5vcHRpb25bJ1pDX1RJTUVfWk9ORV9OQU1FJ10pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyppZihpc3NldCgkX0NPT0tJRVsndGltZXpvbmUnXSkpew0KICAgICAgICAgICAgJHR6PUdldFZhcnMoJ3RpbWV6b25lJywnQ09PS0lFJyk7DQogICAgICAgICAgICBpZihpc19udW1lcmljKCR0eikpew0KICAgICAgICAgICAgJHR6PXNwcmludGYoJyUrZCcsLSR0eik7DQogICAgICAgICAgICBkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCdFdGMvR01UJyAuICR0eik7DQogICAgICAgICAgICAkdGhpcy0+dGltZXpvbmU9ZGF0ZV9kZWZhdWx0X3RpbWV6b25lX2dldCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAqLw0KDQogICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19WRVJTSU9OX0lOX0hFQURFUiddICYmICFoZWFkZXJzX3NlbnQoKSkgew0KICAgICAgICAgICAgaGVhZGVyKCdQcm9kdWN0OicgLiAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1RfRlVMTCddKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRwYXJzZWRIb3N0ID0gcGFyc2VfdXJsKCR0aGlzLT5ob3N0KTsNCiAgICAgICAgaWYgKGlzc2V0KCRwYXJzZWRIb3N0WydzY2hlbWUnXSkgJiYgaXNzZXQoJHBhcnNlZEhvc3RbJ2hvc3QnXSkpIHsNCiAgICAgICAgICAgICR0aGlzLT5mdWxsY3VycmVudHVybCA9ICRwYXJzZWRIb3N0WydzY2hlbWUnXSAuICc6Ly8nIC4gJHBhcnNlZEhvc3RbJ2hvc3QnXTsNCiAgICAgICAgICAgIGlmIChpc3NldCgkcGFyc2VkSG9zdFsncG9ydCddKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5mdWxsY3VycmVudHVybCAuPSAnOicgLiAkcGFyc2VkSG9zdFsncG9ydCddOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHRoaXMtPmZ1bGxjdXJyZW50dXJsID0gJyc7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPmZ1bGxjdXJyZW50dXJsIC49ICR0aGlzLT5jdXJyZW50dXJsOw0KDQogICAgICAgIGlmIChzdHJpcG9zKCR0aGlzLT5ob3N0LCAnaHR0cCcpID09PSAwKSB7DQogICAgICAgICAgICBpZiAoc3RyaXBvcygkdGhpcy0+aG9zdCwgJ2h0dHBzOi8vJykgPT09IDApIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+aXNodHRwcyA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkdGhpcy0+aXNodHRwcyA9IChIVFRQX1NDSEVNRSA9PT0gJ2h0dHBzOi8vJyk7DQogICAgICAgIH0NCiAgICAgICAgLy92YXJfZHVtcCgkdGhpcy0+aXNodHRwcyk7ZGllOw0KDQogICAgICAgICR0aGlzLT52ZXJpZnlDb2RlVXJsID0gJHRoaXMtPnN5c3RlbXVybCAuICdzY3JpcHQvY192YWxpZGNvZGUucGhwJzsNCiAgICAgICAgJHRoaXMtPnZhbGlkY29kZXVybCA9ICYkdGhpcy0+dmVyaWZ5Q29kZVVybDsNCiAgICAgICAgJHRoaXMtPmZlZWR1cmwgPSAkdGhpcy0+aG9zdCAuICdmZWVkLnBocCc7DQogICAgICAgICR0aGlzLT5zZWFyY2h1cmwgPSAkdGhpcy0+aG9zdCAuICdzZWFyY2gucGhwJzsNCiAgICAgICAgJHRoaXMtPmNtZHVybCA9ICR0aGlzLT5zeXN0ZW11cmwgLiAnY21kLnBocCc7DQogICAgICAgICR0aGlzLT5hamF4dXJsID0gJHRoaXMtPmNtZHVybCAuICc/YWN0PWFqYXgmc3JjPSc7DQogICAgICAgICR0aGlzLT54bWxycGN1cmwgPSAkdGhpcy0+c3lzdGVtdXJsIC4gJ3htbC1ycGMvaW5kZXgucGhwJzsNCiAgICAgICAgJHRoaXMtPmFwaXVybCA9ICR0aGlzLT5zeXN0ZW11cmwgLiAnYXBpLnBocCc7DQoNCiAgICAgICAgJHRoaXMtPkxvYWRDb25maWdzT25seVN5c3RlbShmYWxzZSk7DQoNCiAgICAgICAgJHRoaXMtPkxvYWRDYWNoZSgpOw0KDQogICAgICAgICFkZWZpbmVkKCdaQlBfSU5fQVBJJykgfHwgJHRoaXMtPmlzYXBpID0gdHJ1ZTsNCiAgICAgICAgIWRlZmluZWQoJ1pCUF9JTl9DTUQnKSB8fCAkdGhpcy0+aXNjbWQgPSB0cnVlOw0KICAgICAgICAhZGVmaW5lZCgnWkJQX0lOX0FKQVgnKSB8fCAkdGhpcy0+aXNhamF4ID0gdHJ1ZTsNCiAgICAgICAgIWRlZmluZWQoJ1pCUF9JTl9YTUxSUEMnKSB8fCAkdGhpcy0+aXN4bWxycGMgPSB0cnVlOw0KICAgICAgICAhJHRoaXMtPm9wdGlvblsnWkNfREVCVUdfTU9ERSddIHx8ICR0aGlzLT5pc2RlYnVnID0gdHJ1ZTsNCg0KICAgICAgICAkdGhpcy0+TG9hZFBvc3RUeXBlKCk7DQogICAgICAgICR0aGlzLT5Mb2FkUm91dGVzKCk7DQoNCiAgICAgICAgJHRoaXMtPnRoZW1lYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICAkdGhpcy0+dGhlbWVpbmZvID0gJHRoaXMtPnRoZW1lYXBwLT5HZXRJbmZvQXJyYXkoKTsNCg0KICAgICAgICAkdGhpcy0+aXNpbml0aWFsaXplZCA9IHRydWU7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5pc2FwaSkgew0KICAgICAgICAgICAgLy/mjILovb1BUEnplJnor6/mmL7npLoNCiAgICAgICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0RlYnVnX0Rpc3BsYXknLCAnQXBpRGVidWdEaXNwbGF5Jyk7DQogICAgICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9aYnBfU2hvd0Vycm9yJywgJ0FwaVNob3dFcnJvcicpOw0KICAgICAgICAgICAgLy/mjILovb1Ub2tlbumqjOivgQ0KICAgICAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fWmJwX1ByZUxvYWQnLCAnQXBpVG9rZW5WZXJpZnknKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOivu+WPluezu+e7n+mihOiuvuaWh+S7tumHjOeahFBvc3RUeXBl6YWN572uDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRQb3N0VHlwZSgpDQogICAgew0KICAgICAgICBmb3JlYWNoIChhcnJheSgwID0+ICdhcnRpY2xlJywgMSA9PiAncGFnZScpIGFzICRwb3N0aWQgPT4gJHBvc3RuYW1lKSB7DQogICAgICAgICAgICAkZmlsZSA9IFpCUF9QQVRIIC4gJ3piX3N5c3RlbS9kZWZlbmQvcG9zdHR5cGVfJyAuICRwb3N0bmFtZSAuICcucGhwJzsNCiAgICAgICAgICAgICR0aGlzLT5Mb2FkUG9zdFR5cGVfRmlsZSgkZmlsZSk7DQogICAgICAgIH0NCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIOivu+WPluaMh+WumuaWh+S7tumHjOeahFBvc3RUeXBl6YWN572uDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRQb3N0VHlwZV9GaWxlKCRmaWxlKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX3JlYWRhYmxlKCRmaWxlKSkgew0KICAgICAgICAgICAgJHBvc3R0eXBlID0gaW5jbHVkZSAkZmlsZTsNCiAgICAgICAgICAgICR0aGlzLT5SZWdQb3N0VHlwZSgkcG9zdHR5cGUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDor7vlj5bns7vnu5/pooTorr7mlofku7bph4znmoTot6/nlLHphY3nva4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZFJvdXRlcygpDQogICAgew0KICAgICAgICBmb3JlYWNoIChhcnJheSgwID0+ICdhcnRpY2xlJywgMSA9PiAncGFnZScpIGFzICRwb3N0aWQgPT4gJHBvc3RuYW1lKSB7DQogICAgICAgICAgICAkZmlsZSA9ICBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vZGVmZW5kL3JvdXRlc19wb3N0XycgLiAkcG9zdG5hbWUgLiAnLnBocCc7DQogICAgICAgICAgICAkdGhpcy0+TG9hZFJvdXRlc19GaWxlKCRmaWxlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOivu+WPluaMh+WumuaWh+S7tumHjOeahOi3r+eUsemFjee9rg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkUm91dGVzX0ZpbGUoJGZpbGUpDQogICAgew0KICAgICAgICBpZiAoaXNfcmVhZGFibGUoJGZpbGUpKSB7DQogICAgICAgICAgICAkcm91dGUgPSBpbmNsdWRlICRmaWxlOw0KICAgICAgICAgICAgZm9yZWFjaCAoJHJvdXRlIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPlJlZ1JvdXRlKCR2YWx1ZSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWcqEluaXRpYWxpemXlkozliqDovb3miYDmnInmj5Lku7ZpbmNsdWRl5LmL5ZCO77yM5ZyoTG9hZOS5i+WJjeeahOi/h+eoi++8jOiiq2Nfc3lzdGVtX2Jhc2XosIPnlKjvvIwxLjfph4zmlrDliqDnmoQNCiAgICAgKg0KICAgICAqIEB0aHJvd3MgRXhjZXB0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUHJlTG9hZCgpDQogICAgew0KICAgICAgICBpZiAoISR0aGlzLT5pc2luaXRpYWxpemVkIHx8ICR0aGlzLT5pc3ByZWxvYWQpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9QcmVMb2FkJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+aXNwcmVsb2FkID0gdHJ1ZTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5LuO5pWw5o2u5bqT6YeM6K+75Y+W5L+h5oGv77yM5ZCv5Yqo5pW05LiqWkJQLg0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkKCkNCiAgICB7DQogICAgICAgIGlmICghJHRoaXMtPmlzaW5pdGlhbGl6ZWQgfHwgISR0aGlzLT5pc3ByZWxvYWQgfHwgJHRoaXMtPmlzbG9hZCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX0xvYWRfUHJlJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWhlYWRlcnNfc2VudCgpKSB7DQogICAgICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtdHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Jyk7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+Q29udmVydFRhYmxlQW5kRGF0YWluZm8oKTsNCiAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ1pDX0xPQURNRU1CRVJTX0xFVkVMJ10gPT0gMCkgew0KICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfTE9BRE1FTUJFUlNfTEVWRUwnXSA9IDE7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPmlzbG9hZG1lbWJlcnMgfHwgJHRoaXMtPkxvYWRNZW1iZXJzKCR0aGlzLT5vcHRpb25bJ1pDX0xPQURNRU1CRVJTX0xFVkVMJ10pOw0KICAgICAgICAkdGhpcy0+aXNsb2FkY2F0ZWdvcmllcyB8fCAkdGhpcy0+TG9hZENhdGVnb3JpZXMoKTsNCiAgICAgICAgLy8kdGhpcy0+aXNsb2FkdGFncyB8fCAkdGhpcy0+TG9hZFRhZ3MoKTsNCiAgICAgICAgJHRoaXMtPmlzbG9hZG1vZHVsZXMgfHwgJHRoaXMtPkxvYWRNb2R1bGVzKCk7DQogICAgICAgICR0aGlzLT5SZWdCdWlsZE1vZHVsZXMoKTsNCg0KICAgICAgICBpZiAoJHRoaXMtPkNoZWNrSXNMb2dnZWRpbigpID09IGZhbHNlKSB7DQogICAgICAgICAgICAkdGhpcy0+VmVyaWZ5KCk7DQogICAgICAgIH0NCg0KICAgICAgICAvL+WIm+W7uuaooeadv+exuw0KICAgICAgICAkdGhpcy0+dGVtcGxhdGUgPSAkdGhpcy0+UHJlcGFyZVRlbXBsYXRlKCk7DQoNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fTG9naW5fSGVhZGVyJywgJ0luY2x1ZGVfQWRkb25BZG1pbkZvbnQnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fT3RoZXJfSGVhZGVyJywgJ0luY2x1ZGVfQWRkb25BZG1pbkZvbnQnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fSGVhZGVyJywgJ0luY2x1ZGVfQWRkb25BZG1pbkZvbnQnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fSGVhZGVyJywgJ0luY2x1ZGVfQWRtaW5fQ2hlY2tNb2JsaWUnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fSGVhZGVyJywgJ0luY2x1ZGVfQWRtaW5fVXBkYXRlQXBwQWZ0ZXInKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQmF0Y2hQb3N0JywgJ0luY2x1ZGVfQmF0Y2hQb3N0X0FydGljbGUnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQmF0Y2hQb3N0JywgJ0luY2x1ZGVfQmF0Y2hQb3N0X1BhZ2UnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fSW5kZXhfRW5kJywgJ0luY2x1ZGVfSW5kZXhfRW5kJyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX1NlYXJjaF9FbmQnLCAnSW5jbHVkZV9JbmRleF9FbmQnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fSW5kZXhfQmVnaW4nLCAnSW5jbHVkZV9JbmRleF9CZWdpbicpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9TZWFyY2hfQmVnaW4nLCAnSW5jbHVkZV9JbmRleF9CZWdpbicpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9GZWVkX0JlZ2luJywgJ0luY2x1ZGVfSW5kZXhfQmVnaW4nKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fWmJwX0NoZWNrUmlnaHRzJywgJ0luY2x1ZGVfRnJvbnRlbmRfQ2hlY2tSaWdodHMnKTsNCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfTG9hZCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwbmFtZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR0aGlzLT5pc21hbmFnZSkgew0KICAgICAgICAgICAgJHRoaXMtPkxvYWRNYW5hZ2UoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8v6L+b5ZCO5Y+w5oiW5byA6LCD6K+V5ZCO55qE5YmN5Y+w55qE6K6/6Zeu6L+b6KGM6Ieq5Yqo5qOA5rWL5qih5p2/5bm26Ieq5Yqo6YeN5bu6DQogICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19NT0RFJ10gfHwgJHRoaXMtPmlzbWFuYWdlKSB7DQogICAgICAgICAgICAkdGhpcy0+Q2hlY2tUZW1wbGF0ZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPlJlZmx1c2hMYW5ndWFnZXMoKTsNCiAgICAgICAgJHRoaXMtPkNvbnZlcnRUYWJsZUFuZERhdGFpbmZvKCk7DQoNCiAgICAgICAgaWYgKCR0aGlzLT51c2VyLT5TdGF0dXMgPT0gWkNfTUVNQkVSX1NUQVRVU19MT0NLRUQpIHsNCiAgICAgICAgICAgICR0aGlzLT5TaG93RXJyb3IoODAsIF9fRklMRV9fLCBfX0xJTkVfXyk7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPkNoZWNrSXNMb2dnZWRpbigpOw0KDQogICAgICAgICR0aGlzLT5pc2xvYWQgPSB0cnVlOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXnrqHnkIYuDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkTWFuYWdlKCkNCiAgICB7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0FkbWluX1BhZ2VNbmdfU3ViTWVudScsICdJbmNsdWRlX0FkbWluX0FkZHBhZ2VzdWJtZW51Jyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0FkbWluX1RhZ01uZ19TdWJNZW51JywgJ0luY2x1ZGVfQWRtaW5fQWRkdGFnc3VibWVudScpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9BZG1pbl9DYXRlZ29yeU1uZ19TdWJNZW51JywgJ0luY2x1ZGVfQWRtaW5fQWRkY2F0ZXN1Ym1lbnUnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fTWVtYmVyTW5nX1N1Yk1lbnUnLCAnSW5jbHVkZV9BZG1pbl9BZGRtZW1zdWJtZW51Jyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0FkbWluX01vZHVsZU1uZ19TdWJNZW51JywgJ0luY2x1ZGVfQWRtaW5fQWRkbW9kc3VibWVudScpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9BZG1pbl9Db21tZW50TW5nX1N1Yk1lbnUnLCAnSW5jbHVkZV9BZG1pbl9BZGRjbXRzdWJtZW51Jyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0FkbWluX1NldHRpbmdNbmdfU3ViTWVudScsICdJbmNsdWRlX0FkbWluX0FkZHNldHRpbmdzdWJtZW51Jyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX1picF9Mb2FkTWFuYWdlJywgJ0luY2x1ZGVfQWRtaW5fVXBkYXRlREInKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fRW5kJywgJ0luY2x1ZGVfQWRtaW5fQ2hlY2tIdHRwMzA0T0snKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fSGludCcsICdJbmNsdWRlX0FkbWluX0NoZWNrV2Vha1Bhc3NXb3JkJyk7DQoNCiAgICAgICAgaWYgKGlzc2V0KCRHTE9CQUxTWyd6YnB2ZXJzJ10pKSB7DQogICAgICAgICAgICAkR0xPQkFMU1snemJwdmVycyddWyRHTE9CQUxTWydibG9ndmVyc2lvbiddXSA9IFpDX1ZFUlNJT05fRElTUExBWSAuICcgQnVpbGQgJyAuICRHTE9CQUxTWydibG9ndmVyc2lvbiddOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX0xvYWRNYW5hZ2UnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcG5hbWUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOe7iOatoui/nuaOpe+8jOmHiuaUvui1hOa6kC4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVGVybWluYXRlKCkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+aXNpbml0aWFsaXplZCkgew0KICAgICAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX1Rlcm1pbmF0ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgICAgICRmcG5hbWUoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHRoaXMtPkNsb3NlQ29ubmVjdCgpOw0KDQogICAgICAgICAgICBpZiAoWkJsb2dFeGNlcHRpb246OiRpc2xvZ2Vycm9yICYmIGlzX2FycmF5KCR0aGlzLT5kYi0+ZXJyb3IpICYmICFlbXB0eSgkdGhpcy0+ZGItPmVycm9yKSkgew0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0aGlzLT5kYi0+ZXJyb3IgYXMgJGUpIHsNCiAgICAgICAgICAgICAgICAgICAgTG9ncygkdGhpcy0+ZGItPnR5cGUgLiAnIGVycm9yIGlkOicgLiBQSFBfRU9MIC4gdmFyX2V4cG9ydCgkZSwgdHJ1ZSksICdFUlJPUicpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdW5zZXQoJHRoaXMtPmRiKTsNCiAgICAgICAgICAgICR0aGlzLT5pc2luaXRpYWxpemVkID0gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDov57mjqXmlbDmja7lupMuDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIE9wZW5Db25uZWN0KCkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+aXNjb25uZWN0ZWQpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBzd2l0Y2ggKCR0aGlzLT5vcHRpb25bJ1pDX0RBVEFCQVNFX1RZUEUnXSkgew0KICAgICAgICAgICAgY2FzZSAnc3FsaXRlJzoNCiAgICAgICAgICAgIGNhc2UgJ3NxbGl0ZTMnOg0KICAgICAgICAgICAgY2FzZSAncGRvX3NxbGl0ZSc6DQogICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfU1FMSVRFX05BTUUnXSA9IEdldE9wdGlvblZhcnNGcm9tRW52KCR0aGlzLT5vcHRpb25bJ1pDX1NRTElURV9OQU1FJ10pOw0KDQogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ1pDX0RBVEFCQVNFX1RZUEUnXSA9PSAnc3FsaXRlJyAmJiB2ZXJzaW9uX2NvbXBhcmUoUEhQX1ZFUlNJT04sICc1LjQuMCcpID49IDApIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbl9sb2FkZWQoJ3NxbGl0ZTMnKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddID0gJ3NxbGl0ZTMnOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoZXh0ZW5zaW9uX2xvYWRlZCgncGRvX3NxbGl0ZScpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10gPSAncGRvX3NxbGl0ZSc7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJHRoaXMtPmRiID0gc2VsZjo6SW5pdGlhbGl6ZURCKCR0aGlzLT5vcHRpb25bJ1pDX0RBVEFCQVNFX1RZUEUnXSk7DQogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5kYi0+T3BlbigNCiAgICAgICAgICAgICAgICAgICAgYXJyYXkoDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+ZGF0YWRpciAuICcnIC4gJHRoaXMtPm9wdGlvblsnWkNfU1FMSVRFX05BTUUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX1NRTElURV9QUkUnXSwNCiAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICkgPT0gZmFsc2UNCiAgICAgICAgICAgICAgICApIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPlNob3dFcnJvcig2OSwgX19GSUxFX18sIF9fTElORV9fKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICdwb3N0Z3Jlc3FsJzoNCiAgICAgICAgICAgIGNhc2UgJ3Bkb19wb3N0Z3Jlc3FsJzoNCiAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9TRVJWRVInXSA9IEdldE9wdGlvblZhcnNGcm9tRW52KCR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX1NFUlZFUiddKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9VU0VSTkFNRSddID0gR2V0T3B0aW9uVmFyc0Zyb21FbnYoJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfVVNFUk5BTUUnXSk7DQogICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfUEFTU1dPUkQnXSA9IEdldE9wdGlvblZhcnNGcm9tRW52KCR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX1BBU1NXT1JEJ10pOw0KICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX05BTUUnXSA9IEdldE9wdGlvblZhcnNGcm9tRW52KCR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX05BTUUnXSk7DQogICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfUE9SVCddID0gR2V0T3B0aW9uVmFyc0Zyb21FbnYoJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfUE9SVCddKTsNCg0KICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10gPT0gJ3Bvc3RncmVzcWwnKSB7DQogICAgICAgICAgICAgICAgICAgIGlmICghZXh0ZW5zaW9uX2xvYWRlZCgncGdzcWwnKSAmJiBleHRlbnNpb25fbG9hZGVkKCdwZG9fcGdzcWwnKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddID0gJ3Bkb19wb3N0Z3Jlc3FsJzsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkdGhpcy0+ZGIgPSBzZWxmOjpJbml0aWFsaXplREIoJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKTsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmRiLT5PcGVuKA0KICAgICAgICAgICAgICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX1NFUlZFUiddLA0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfVVNFUk5BTUUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX1BBU1NXT1JEJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9OQU1FJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9QUkUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX1BPUlQnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX1BHU1FMX1BFUlNJU1RFTlQnXSwNCiAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICkgPT0gZmFsc2UNCiAgICAgICAgICAgICAgICApIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPlNob3dFcnJvcig2NywgX19GSUxFX18sIF9fTElORV9fKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICdteXNxbCc6DQogICAgICAgICAgICBjYXNlICdteXNxbGknOg0KICAgICAgICAgICAgY2FzZSAncGRvX215c3FsJzoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfTVlTUUxfU0VSVkVSJ10gPSBHZXRPcHRpb25WYXJzRnJvbUVudigkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9TRVJWRVInXSk7DQogICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfTVlTUUxfVVNFUk5BTUUnXSA9IEdldE9wdGlvblZhcnNGcm9tRW52KCR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1VTRVJOQU1FJ10pOw0KICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BBU1NXT1JEJ10gPSBHZXRPcHRpb25WYXJzRnJvbUVudigkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9QQVNTV09SRCddKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9OQU1FJ10gPSBHZXRPcHRpb25WYXJzRnJvbUVudigkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9OQU1FJ10pOw0KICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BPUlQnXSA9IEdldE9wdGlvblZhcnNGcm9tRW52KCR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BPUlQnXSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddID09ICdteXNxbCcgJiYgIWV4dGVuc2lvbl9sb2FkZWQoJ215c3FsJykpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbl9sb2FkZWQoJ215c3FsaScpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10gPSAnbXlzcWxpJzsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKGV4dGVuc2lvbl9sb2FkZWQoJ3Bkb19teXNxbCcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10gPSAncGRvX215c3FsJzsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkdGhpcy0+ZGIgPSBzZWxmOjpJbml0aWFsaXplREIoJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKTsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmRiLT5PcGVuKA0KICAgICAgICAgICAgICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1NFUlZFUiddLA0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfTVlTUUxfVVNFUk5BTUUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BBU1NXT1JEJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9OQU1FJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9QUkUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BPUlQnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BFUlNJU1RFTlQnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX0VOR0lORSddLA0KICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgKSA9PSBmYWxzZQ0KICAgICAgICAgICAgICAgICkgew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+U2hvd0Vycm9yKDY3LCBfX0ZJTEVfXywgX19MSU5FX18pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgICAgICAvLyB1dGY4bWI05pSv5oyBDQogICAgICAgIGlmICgkdGhpcy0+ZGItPnR5cGUgPT0gJ215c3FsJyAmJiB2ZXJzaW9uX2NvbXBhcmUoJHRoaXMtPmRiLT52ZXJzaW9uLCAnNS41LjMnKSA8IDApIHsNCiAgICAgICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0RiU3FsX0ZpbHRlcicsICd1dGY4NG1iX2ZpbHRlcicpOw0KICAgICAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fRWRpdF9CZWdpbicsICd1dGY4NG1iX2ZpeEh0bWxTcGVjaWFsQ2hhcnMnKTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+aXNjb25uZWN0ZWQgPSB0cnVlOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWvueihqOWQjeWSjOaVsOaNrue7k+aehOi/m+ihjOmihOi9rOaNoi4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ29udmVydFRhYmxlQW5kRGF0YWluZm8oKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aGlzLT5kYi0+ZGJwcmUpIHsNCiAgICAgICAgICAgICR0aGlzLT50YWJsZSA9IHN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYi0+ZGJwcmUsICR0aGlzLT50YWJsZSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCR0aGlzLT5kYi0+dHlwZSA9PT0gJ3Bvc3RncmVzcWwnKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkdGhpcy0+ZGF0YWluZm8gYXMgJGtleSA9PiAmJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHZhbHVlIGFzICRrMiA9PiAmJHYyKSB7DQogICAgICAgICAgICAgICAgICAgICR2MlswXSA9IHN0cnRvbG93ZXIoJHYyWzBdKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlhbPpl63mlbDmja7lupPov57mjqUuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENsb3NlQ29ubmVjdCgpDQogICAgew0KICAgICAgICBpZiAoJHRoaXMtPmlzY29ubmVjdGVkKSB7DQogICAgICAgICAgICAkdGhpcy0+ZGItPkNsb3NlKCk7DQogICAgICAgICAgICAkdGhpcy0+aXNjb25uZWN0ZWQgPSBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWQr+eUqHNlc3Npb24uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU3RhcnRTZXNzaW9uKCkNCiAgICB7DQogICAgICAgIGlmIChzZXNzaW9uX3N0YXR1cygpID09IDEpIHsNCiAgICAgICAgICAgIHNlc3Npb25fc3RhcnQoKTsNCiAgICAgICAgICAgICR0aGlzLT5pc3Nlc3Npb24gPSB0cnVlOw0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnu4jmraJzZXNzaW9uLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEVuZFNlc3Npb24oKQ0KICAgIHsNCiAgICAgICAgaWYgKHNlc3Npb25fc3RhdHVzKCkgPT0gMikgew0KICAgICAgICAgICAgc2Vzc2lvbl93cml0ZV9jbG9zZSgpOw0KICAgICAgICAgICAgJHRoaXMtPmlzc2Vzc2lvbiA9IGZhbHNlOw0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMb2FkIG9yIFJlTG9hZOaPkuS7tkNvbmZpZ3PooaguDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRDb25maWdzKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5Mb2FkQ29uZmlnc09ubHlTeXN0ZW0odHJ1ZSk7DQogICAgICAgICR0aGlzLT5Mb2FkQ29uZmlnc09ubHlTeXN0ZW0oZmFsc2UpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeaPkuS7tkNvbmZpZ3PooaggT25seSBTeXN0ZW0gT3B0aW9uLg0KICAgICAqLw0KICAgIHByaXZhdGUgJHBydkNvbmZpZ0xpc3QgPSBudWxsOw0KDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRDb25maWdzT25seVN5c3RlbSgkb25seXN5c3RlbW9wdGlvbiA9IHRydWUpDQogICAgew0KICAgICAgICBpZiAoJG9ubHlzeXN0ZW1vcHRpb24gPT0gdHJ1ZSkgew0KICAgICAgICAgICAgJHRoaXMtPmNvbmZpZ3MgPSBhcnJheSgpOw0KICAgICAgICAgICAgJHRoaXMtPnBydkNvbmZpZ0xpc3QgPSBhcnJheSgpOw0KDQogICAgICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPmdldCgpLT5zZWxlY3QoJHRoaXMtPnRhYmxlWydDb25maWcnXSk7DQogICAgICAgICAgICAvKiBAdmFyIENvbmZpZ1tdICRhcnJheSAqLw0KICAgICAgICAgICAgJHRoaXMtPnBydkNvbmZpZ0xpc3QgPSAkdGhpcy0+R2V0TGlzdE9yaWdpbigkc3FsKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNfYXJyYXkoJHRoaXMtPnBydkNvbmZpZ0xpc3QpKSB7DQogICAgICAgICAgICBpZiAoY291bnQoJHRoaXMtPnBydkNvbmZpZ0xpc3QpID09IDEgJiYgJHRoaXMtPnBydkNvbmZpZ0xpc3RbMF0gPT09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJHR5cGUgPSAnQ29uZmlnJzsNCg0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+cHJ2Q29uZmlnTGlzdCBhcyAkYykgew0KICAgICAgICAgICAgJG5hbWUgPSAkY1skdGhpcy0+ZFsnQ29uZmlnJ11bJ05hbWUnXVswXV07DQogICAgICAgICAgICBpZiAoKCRuYW1lID09ICdzeXN0ZW0nICYmICRvbmx5c3lzdGVtb3B0aW9uID09IHRydWUpIHx8ICgkbmFtZSAhPSAnc3lzdGVtJyAmJiAkb25seXN5c3RlbW9wdGlvbiA9PSBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgJGwgPSBuZXcgJHR5cGUoJG5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y29uZmlnc1skbmFtZV0gPSAkbDsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkbCA9ICR0aGlzLT5jb25maWdzWyRuYW1lXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGdldF9jbGFzcygkbCkgIT0gJHR5cGUpIHsNCiAgICAgICAgICAgICAgICAgICAgJGwgPSBuZXcgJHR5cGUoJG5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y29uZmlnc1skbmFtZV0gPSAkbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjWyR0aGlzLT5kWydDb25maWcnXVsnS2V5J11bMF1dKSAmJiAkY1skdGhpcy0+ZFsnQ29uZmlnJ11bJ0tleSddWzBdXSAhPSAnJykgew0KICAgICAgICAgICAgICAgICAgICAkbC0+TG9hZEluZm9CeUFzc29jU2luZ2xlV2l0aFByZSgkYyk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJGwtPkxvYWRJbmZvQnlBc3NvYygkYyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIC8v5bCG6K+75Ye65p2l55qE5pWw57uE5YaN5ou85oiQ5bqP5YiX5YyW5pWw5o2u5YaN5Y+N5bqP5YiX5YyWDQogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5jb25maWdzIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoaXNfb2JqZWN0KCR2YWx1ZSkgJiYgKCRrZXkgPT0gJ3N5c3RlbScgJiYgJG9ubHlzeXN0ZW1vcHRpb24gPT0gdHJ1ZSkgfHwgKCRrZXkgIT0gJ3N5c3RlbScgJiYgJG9ubHlzeXN0ZW1vcHRpb24gPT0gZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgJHZhbHVlLT5Mb2FkSW5mb0J5QXNzb2NTaW5nbGVXaXRoQWZ0ZXIoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkb25seXN5c3RlbW9wdGlvbiA9PSBmYWxzZSkgew0KICAgICAgICAgICAgJHRoaXMtPnBydkNvbmZpZ0xpc3QgPSBhcnJheSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2YQ29uZmlnc+ihqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgQ29uZmlnc+ihqOWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNhdmVDb25maWcoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5jb25maWdzWyRuYW1lXS0+U2F2ZSgpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpENvbmZpZ3PooaguDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIENvbmZpZ3PooajlkI0NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWxDb25maWcoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5jb25maWdzWyRuYW1lXS0+RGVsZXRlKCk7DQogICAgICAgIHVuc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+WQ29uZmlnc+ihqOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSBDb25maWdz6KGo5ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENvbmZpZygkbmFtZSkNCiAgICB7DQogICAgICAgIGlmICghaXNzZXQoJHRoaXMtPmNvbmZpZ3NbJG5hbWVdKSkgew0KICAgICAgICAgICAgJG5hbWUgPSBGaWx0ZXJDb3JyZWN0TmFtZSgkbmFtZSk7DQogICAgICAgICAgICBpZiAoISRuYW1lKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkdGhpcy0+Y29uZmlnc1skbmFtZV0gPSBuZXcgQ29uZmlnKCRuYW1lKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+Y29uZmlnc1skbmFtZV07DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p+l5p+QQ29uZmln5piv5ZCm5a2Y5ZyoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSBDb25maWdz6KGo5ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gSGFzQ29uZmlnKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkgJiYgJHRoaXMtPmNvbmZpZ3NbJG5hbWVdLT5Db3VudEl0ZW0oKSA+IDA7DQogICAgfQ0KDQogICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiAgICAvL0NhY2hl55u45YWzDQogICAgcHJpdmF0ZSAkY2FjaGVfaGFzaCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiDkv53lrZjnvJPlrZguDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2F2ZUNhY2hlKCkNCiAgICB7DQogICAgICAgIC8vJHM9JHRoaXMtPmNhY2hlZGlyIC4gJycgLiAkdGhpcy0+Z3VpZCAuICcuY2FjaGUnOw0KICAgICAgICAvLyRjPXNlcmlhbGl6ZSgkdGhpcy0+Y2FjaGUpOw0KICAgICAgICAvL0BmaWxlX3B1dF9jb250ZW50cygkcywgJGMpOw0KICAgICAgICAvLyR0aGlzLT5jb25maWdzWydjYWNoZSddPSR0aGlzLT5jYWNoZTsNCiAgICAgICAgJG5ld19oYXNoID0gbWQ1KCR0aGlzLT5Db25maWcoJ2NhY2hlJykpOw0KICAgICAgICBpZiAoJHRoaXMtPmNhY2hlX2hhc2ggPT0gJG5ld19oYXNoKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5TYXZlQ29uZmlnKCdjYWNoZScpOw0KICAgICAgICAkdGhpcy0+Y2FjaGVfaGFzaCA9ICRuZXdfaGFzaDsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliqDovb3nvJPlrZguDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZENhY2hlKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5jYWNoZSA9ICR0aGlzLT5Db25maWcoJ2NhY2hlJyk7DQogICAgICAgICR0aGlzLT5jYWNoZV9oYXNoID0gbWQ1KCR0aGlzLT5Db25maWcoJ2NhY2hlJykpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS/neWtmOmFjee9ri4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTYXZlT3B0aW9uKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfQ0xTSUQnXSA9ICR0aGlzLT5ndWlkOw0KDQogICAgICAgIHVuc2V0KCR0aGlzLT5vcHRpb25bJ1pDX1BFUk1BTkVOVF9ET01BSU5fRk9SQ0VEX0RJU0FCTEUnXSk7DQogICAgICAgIHVuc2V0KCR0aGlzLT5vcHRpb25bJ1pDX1BFUk1BTkVOVF9ET01BSU5fRk9SQ0VEX1VSTCddKTsNCiAgICAgICAgdW5zZXQoJHRoaXMtPm9wdGlvblsnWkNfQ0xPU0VfV0hPTEVfU0lURSddKTsNCiAgICAgICAgdW5zZXQoJHRoaXMtPm9wdGlvblsnWkNfSU5TVEFMTF9BRlRFUl9DT05GSUcnXSk7DQoNCiAgICAgICAgJHJlc2VydmVfa2V5cyA9IGV4cGxvZGUoJ3wnLCBzZWxmOjpPUFRJT05fUkVTRVJWRV9LRVlTKTsNCg0KICAgICAgICBpZiAoZmlsZV9leGlzdHMoJHRoaXMtPnVzZXJzZGlyIC4gJ2Nfb3B0aW9uLnBocCcpID09IGZhbHNlKSB7DQogICAgICAgICAgICAkcyA9ICI8IjsNCiAgICAgICAgICAgICRzIC49ICI/cGhwXHJcbiI7DQogICAgICAgICAgICAkcyAuPSAicmV0dXJuICI7DQogICAgICAgICAgICAkb3B0aW9uID0gYXJyYXkoKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCR0aGlzLT5vcHRpb24gYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgICAgICBpZiAoaW5fYXJyYXkoJGtleSwgJHJlc2VydmVfa2V5cykpIHsNCiAgICAgICAgICAgICAgICAgICAgJG9wdGlvblska2V5XSA9ICR2YWx1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkcyAuPSB2YXJfZXhwb3J0KCRvcHRpb24sIHRydWUpOw0KICAgICAgICAgICAgJHMgLj0gIjsiOw0KICAgICAgICAgICAgQGZpbGVfcHV0X2NvbnRlbnRzKCR0aGlzLT51c2Vyc2RpciAuICdjX29wdGlvbi5waHAnLCAkcyk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+b3B0aW9uIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAkdGhpcy0+Q29uZmlnKCdzeXN0ZW0nKS0+JGtleSA9ICR2YWx1ZTsNCiAgICAgICAgfQ0KICAgICAgICBmb3JlYWNoICgkcmVzZXJ2ZV9rZXlzIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAkdGhpcy0+Q29uZmlnKCdzeXN0ZW0nKS0+RGVsS2V5KCR2YWx1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+Q29uZmlnKCdzeXN0ZW0nKS0+WkNfQkxPR19IT1NUID0gY2h1bmtfc3BsaXQoJHRoaXMtPkNvbmZpZygnc3lzdGVtJyktPlpDX0JMT0dfSE9TVCwgMSwgInwiKTsNCg0KICAgICAgICAkdGhpcy0+U2F2ZUNvbmZpZygnc3lzdGVtJyk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl6YWN572uLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRPcHRpb24oKQ0KICAgIHsNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkNvbmZpZygnc3lzdGVtJyktPkdldERhdGEoKTsNCg0KICAgICAgICBpZiAoZW1wdHkoJGFycmF5KSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkcmVzZXJ2ZV9rZXlzID0gZXhwbG9kZSgnfCcsIHNlbGY6Ok9QVElPTl9SRVNFUlZFX0tFWVMpOw0KDQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgaWYgKCRrZXkgPT0gJ1pDX0JMT0dfSE9TVCcpIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSBzdHJfcmVwbGFjZSgnfCcsICcnLCAkdmFsdWUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoaW5fYXJyYXkoJGtleSwgJHJlc2VydmVfa2V5cykpIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHRoaXMtPm9wdGlvblska2V5XSA9ICR2YWx1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWV4dGVuc2lvbl9sb2FkZWQoJ2dkJykpIHsNCiAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0NPTU1FTlRfVkVSSUZZX0VOQUJMRSddID0gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnlKjmiLfnmbvlvZXpqozor4HjgIHmnYPpmZDmo4Dmn6Xlh73mlbAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi4NCiAgICAgKi8NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgeaYr+WQpueZu+W9leaIkOWKny4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja0lzTG9nZ2VkaW4oKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX3N1YmNsYXNzX29mKCR0aGlzLT51c2VyLCAnQmFzZU1lbWJlcicpICYmICR0aGlzLT51c2VyLT5MZXZlbCA+IDAgJiYgIWVtcHR5KCR0aGlzLT51c2VyLT5JRCkpIHsNCiAgICAgICAgICAgICR0aGlzLT5pc2xvZ2luID0gdHJ1ZTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgICR0aGlzLT5pc2xvZ2luID0gZmFsc2U7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4Hmk43kvZzmnYPpmZAuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAkYWN0aW9uIOaTjeS9nA0KICAgICAqIEBwYXJhbSBpbnR8c3RyaW5nICRsZXZlbA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrUmlnaHRzKCRhY3Rpb24sICRsZXZlbCA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoJGxldmVsID09PSBudWxsKSB7DQogICAgICAgICAgICAkbGV2ZWwgPSAkdGhpcy0+dXNlci0+TGV2ZWw7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfQ2hlY2tSaWdodHMnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGFjdGlvbiwgJGxldmVsKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+YWN0aW9uc1skYWN0aW9uXSkpIHsNCiAgICAgICAgICAgIGlmIChpc19udW1lcmljKCRhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICRsZXZlbCA8PSAkYWN0aW9uOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGxldmVsIDw9ICR0aGlzLT5hY3Rpb25zWyRhY3Rpb25dOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOagueaNrueUqOaIt+etiee6p+mqjOivgeaTjeS9nOadg+mZkCAxLjXlvIDlp4vlj4LmlbDmjaLpobrluo8uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhY3Rpb24g5pON5L2cDQogICAgICogQHBhcmFtIGludCAgICAkbGV2ZWwgIOeUqOaIt+etiee6pw0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrUmlnaHRzQnlMZXZlbCgkYWN0aW9uLCAkbGV2ZWwpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkNoZWNrUmlnaHRzKCRhY3Rpb24sICRsZXZlbCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2VLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZlcmlmeSgpDQogICAgew0KICAgICAgICAvLyDlnKjmma7pgJogV2ViIOmhtemdouS4rQ0KICAgICAgICAkdXNlcm5hbWUgPSB0cmltKEdldFZhcnMoJ3VzZXJuYW1lXycgLiBoYXNoKCJjcmMzMmIiLCAkdGhpcy0+Z3VpZCksICdDT09LSUUnKSk7DQogICAgICAgICR0b2tlbiA9IHRyaW0oR2V0VmFycygndG9rZW5fJyAuIGhhc2goImNyYzMyYiIsICR0aGlzLT5ndWlkKSwgJ0NPT0tJRScpKTsNCiAgICAgICAgJHVzZXIgPSAkdGhpcy0+VmVyaWZ5VXNlclRva2VuKCR0b2tlbiwgJHVzZXJuYW1lKTsNCg0KICAgICAgICBpZiAoaXNfb2JqZWN0KCR1c2VyKSkgew0KICAgICAgICAgICAgJHRoaXMtPnVzZXIgPSAkdXNlcjsNCiAgICAgICAgICAgICR0aGlzLT5pc2xvZ2luID0gdHJ1ZTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgICR0aGlzLT51c2VyID0gbmV3IE1lbWJlcigpOw0KICAgICAgICAkdGhpcy0+dXNlci0+R3VpZCA9IEdldEd1aWQoKTsNCiAgICAgICAgJHRoaXMtPmlzbG9naW4gPSBmYWxzZTsNCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L+U5Zue55m75b2V5oiQ5Yqf5ZCO5bqU5L+d5a2Y55qEY29va2ll5L+h5oGvLg0KICAgICAqDQogICAgICogQHBhcmFtIE1lbWJlciAkbSDlt7Lpqozov4fmiJDlip/nmoRtZW1iZXINCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZlcmlmeVJlc3VsdCgkbSkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2VuZXJhdGVVc2VyVG9rZW4oJG0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOeUn+aIkFVzZXIgVG9rZW7vvIznlKjkuo7nmbvlvZXpqozor4ENCiAgICAgKg0KICAgICAqIEBwYXJhbSBNZW1iZXIgJHVzZXINCiAgICAgKiBAcGFyYW0gaW50ICAgICR0aW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZW5lcmF0ZVVzZXJUb2tlbigkdXNlciwgJHRpbWUgPSAwKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aW1lID09PSAwKSB7DQogICAgICAgICAgICAkdGltZSA9ICh0aW1lKCkgKyAzNjAwICogMjQpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIENyZWF0ZVdlYlRva2VuKCR1c2VyLT5JRCwgJHRpbWUsICR1c2VyLT5HdWlkLCAkdXNlci0+UGFzc1dvcmRfTUQ1UGF0aCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55Sf5oiQQXBpIFRva2Vu77yM55So5LqOIEFQSSDmqKHlvI/kuIvnmoTnlKjmiLfpqozor4EuDQogICAgICoNCiAgICAgKiBAcGFyYW0gTWVtYmVyICR1c2VyDQogICAgICogQHBhcmFtIGludCAgICAkdGltZQ0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2VuZXJhdGVBcGlUb2tlbigkdXNlciwgJHRpbWUgPSAwKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGJhc2U2NF9lbmNvZGUoJHVzZXItPk5hbWUgLiAnfHx8JyAuICR0aGlzLT5HZW5lcmF0ZVVzZXJUb2tlbigkdXNlciwgKGludCkgJHRpbWUpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4HnlKjmiLfnmbvlvZVUb2tlbi4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRva2VuDQogICAgICogQHBhcmFtIHN0cmluZyAkdXNlcm5hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gTWVtYmVyfG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5VXNlclRva2VuKCR0b2tlbiwgJHVzZXJuYW1lKQ0KICAgIHsNCiAgICAgICAgJHVzZXIgPSAkdGhpcy0+R2V0TWVtYmVyQnlOYW1lKCR1c2VybmFtZSk7DQogICAgICAgIGlmICgkdXNlci0+SUQgIT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKFZlcmlmeVdlYlRva2VuKCR0b2tlbiwgJHVzZXItPklELCAkdXNlci0+R3VpZCwgJHVzZXItPlBhc3NXb3JkX01ENVBhdGgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICR1c2VyOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIG51bGw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2V77yI5LiA5qyhTUQ15a+G56CB77yJLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSAgIOeUqOaIt+WQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1kNXB3ICBtZDXliqDlr4blkI7nmoTlr4bnoIENCiAgICAgKiBAcGFyYW0gTWVtYmVyICRtZW1iZXIg6L+U5Zue6K+75Y+W5oiQ5Yqf55qEbWVtYmVy5a+56LGhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5X01ENSgkbmFtZSwgJG1kNXB3LCAmJG1lbWJlcikNCiAgICB7DQogICAgICAgIGlmICgkbmFtZSA9PSAnJyB8fCAkbWQ1cHcgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkbWVtYmVyID0gJHRoaXMtPkdldE1lbWJlckJ5TmFtZSgkbmFtZSk7DQogICAgICAgIGlmICgkbWVtYmVyLT5JRCAhPSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPlZlcmlmeV9GaW5hbCgkbmFtZSwgbWQ1KCRtZDVwdyAuICRtZW1iZXItPkd1aWQpLCAkbWVtYmVyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4HnlKjmiLfnmbvlvZXvvIjljp/lp4vmmI7mloflr4bnoIHvvIkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lICAgICAgIOeUqOaIt+WQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG9yaWdpbmFscHcg5a+G56CB5piO5paHDQogICAgICogQHBhcmFtIE1lbWJlciAkbWVtYmVyICAgICDov5Tlm57or7vlj5bmiJDlip/nmoRtZW1iZXLlr7nosaENCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWZXJpZnlfT3JpZ2luYWwoJG5hbWUsICRvcmlnaW5hbHB3LCAmJG1lbWJlciA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoJG5hbWUgPT0gJycgfHwgJG9yaWdpbmFscHcgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWUoJG5hbWUpOw0KICAgICAgICBpZiAoJG0tPklEICE9IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+VmVyaWZ5X01ENSgkbmFtZSwgbWQ1KCRvcmlnaW5hbHB3KSwgJG1lbWJlcik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2V77yI5pWw5o2u5bqT5L+d5a2Y55qE5pyA57uI6L+Q566X5ZCO5a+G56CB77yJLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSAgICAg55So5oi35ZCNDQogICAgICogQHBhcmFtIHN0cmluZyAkcGFzc3dvcmQg5LqM5qyh5Yqg5a+G5ZCO55qE5a+G56CBDQogICAgICogQHBhcmFtIG9iamVjdCAkbWVtYmVyICAg6L+U5Zue6K+75Y+W5oiQ5Yqf55qEbWVtYmVy5a+56LGhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5X0ZpbmFsKCRuYW1lLCAkcGFzc3dvcmQsICYkbWVtYmVyID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmICgkbmFtZSA9PSAnJyB8fCAkcGFzc3dvcmQgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWUoJG5hbWUpOw0KICAgICAgICBpZiAoJG0tPklEICE9IG51bGwpIHsNCiAgICAgICAgICAgIGlmIChoYXNoX2VxdWFscygkbS0+UGFzc3dvcmQsICRwYXNzd29yZCkgPT09IHRydWUpIHsNCiAgICAgICAgICAgICAgICAkbWVtYmVyID0gJG07DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4HnlKjmiLfnmbvlvZXvvIjkvb/nlKhUb2tlbu+8jOabv+S7o+WvhueggeS/neWtmO+8iS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgICDnlKjmiLflkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICR3dCAgICAgV2ViVG9rZW4NCiAgICAgKiBAcGFyYW0gc3RyaW5nICR3dF9pZCAgV2ViVG9rZW7nmoRJROivhuWIq+espg0KICAgICAqIEBwYXJhbSBvYmplY3QgJG1lbWJlciDov5Tlm57or7vlj5bmiJDlip/nmoRtZW1iZXLlr7nosaENCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWZXJpZnlfVG9rZW4oJG5hbWUsICR3dCwgJHd0X2lkLCAmJG1lbWJlciA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoJG5hbWUgPT0gJycgfHwgJHd0ID09ICcnKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgJG0gPSBudWxsOw0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWUoJG5hbWUpOw0KICAgICAgICBpZiAoJG0tPklEICE9IG51bGwpIHsNCiAgICAgICAgICAgIGlmIChWZXJpZnlXZWJUb2tlbigkd3QsICR3dF9pZCwgJHRoaXMtPmd1aWQsICRtLT5JRCwgJG0tPlBhc3N3b3JkKSA9PT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICRtZW1iZXIgPSAkbTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgSBBUEkgVG9rZW4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhcGlfdG9rZW4NCiAgICAgKiBAcmV0dXJuIE1lbWJlcnxudWxsDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZlcmlmeUFQSVRva2VuKCRhcGlfdG9rZW4pDQogICAgew0KICAgICAgICAkYXBpX3Rva2VuID0gYmFzZTY0X2RlY29kZSgkYXBpX3Rva2VuKTsNCg0KICAgICAgICBpZiAoZW1wdHkoJGFwaV90b2tlbikpIHsNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8g6aqM6K+B5a2X56ym5Liy5qC85byP5Li6IHt1c2VybmFtZX18fHx7dG9rZW59DQogICAgICAgICRhcGlfdG9rZW5fYXJyYXkgPSBleHBsb2RlKCd8fHwnLCAkYXBpX3Rva2VuKTsNCiAgICAgICAgaWYgKGNvdW50KCRhcGlfdG9rZW5fYXJyYXkpICE9PSAyKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+VmVyaWZ5VXNlclRva2VuKCRhcGlfdG9rZW5fYXJyYXlbMV0sICRhcGlfdG9rZW5fYXJyYXlbMF0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOezu+e7n+WKoOi9veeUqOaIt+OAgeWIhuexu+etieeahOWHveaVsCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLg0KICAgICAqLw0KDQogICAgLyoqDQogICAgICog6L295YWl55So5oi35YiX6KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIGludCAkbGV2ZWwg55So5oi3562J57qnDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZE1lbWJlcnMoJGxldmVsID0gMCkNCiAgICB7DQogICAgICAgICRsb2FkbWVtYmVyc19sZXZlbCA9ICRsZXZlbDsNCiAgICAgICAgaWYgKCRsb2FkbWVtYmVyc19sZXZlbCA8IDApIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR3aGVyZSA9IG51bGw7DQogICAgICAgIGlmICgkbG9hZG1lbWJlcnNfbGV2ZWwgPiAwKSB7DQogICAgICAgICAgICAkd2hlcmUgPSBhcnJheShhcnJheSgnPD0nLCAnbWVtX0xldmVsJywgJGxvYWRtZW1iZXJzX2xldmVsKSk7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPm1lbWJlcnMgPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+bWVtYmVyc2J5bmFtZSA9IGFycmF5KCk7DQogICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRNZW1iZXJMaXN0KG51bGwsICR3aGVyZSk7DQoNCiAgICAgICAgJHRoaXMtPmlzbG9hZG1lbWJlcnMgPSB0cnVlOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4fliJfooajvvIjmlofnq6Av6K+E6K66L+KApuKApu+8ieS4gOasoeaAp+WwhueUqOaIt+mihOi9veWFpeWIsCBtZW1iZXJzIOmHjC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBhcnJheSAgJGxpc3QgICAgICAgICDmlofnq6Av6K+E6K665YiX6KGo5pWw57uEDQogICAgICogQHBhcmFtIHN0cmluZyAkbWVtX2lkX2ZpZWxkIOeUqOaItyBJRCDlnKjlr7nosaHkuK3nmoTlrZfmrrXlkI0NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbGVhbg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkTWVtYmVyc0luTGlzdCgkbGlzdCwgJG1lbV9pZF9maWVsZCA9ICdBdXRob3JJRCcpDQogICAgew0KICAgICAgICAkbWVtX2lkc19uZWVkX2xvYWQgPSBhcnJheSgpOw0KDQogICAgICAgIGZvcmVhY2ggKCRsaXN0IGFzICRvYmopIHsNCiAgICAgICAgICAgIGlmICghaXNzZXQoJG9iai0+JG1lbV9pZF9maWVsZCkgfHwgKCRvYmotPiRtZW1faWRfZmllbGQgPT0gbnVsbCkpIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8g5bey57uP6L295YWl55qE55So5oi35LiN6YeN5paw6L295YWlDQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPm1lbWJlcnNbJG9iai0+JG1lbV9pZF9maWVsZF0pKSB7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRtZW1faWRzX25lZWRfbG9hZFtdID0gJG9iai0+JG1lbV9pZF9maWVsZDsNCiAgICAgICAgfQ0KDQogICAgICAgICRtZW1faWRzX25lZWRfbG9hZCA9IGFycmF5X3VuaXF1ZSgkbWVtX2lkc19uZWVkX2xvYWQpOw0KDQogICAgICAgIGlmIChjb3VudCgkbWVtX2lkc19uZWVkX2xvYWQpID09PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRNZW1iZXJMaXN0KG51bGwsIGFycmF5KGFycmF5KCdJTicsICdtZW1fSUQnLCAkbWVtX2lkc19uZWVkX2xvYWQpKSk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog56eB5pyJ5pa55rOV5LmL6YCS5b2S5Yqg6L295YiG57G7Lg0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheQ0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gTG9hZENhdGVnb3JpZXNfUmVjdXJzaW9uKCRkZWVwLCAkaWQsICYkbHYsICR0eXBlKQ0KICAgIHsNCiAgICAgICAgaWYgKCgkZGVlcCArIDEpID49ICR0aGlzLT5jYXRlZ29yeV9yZWN1cnNpb25fcmVhbF9kZWVwKSB7DQogICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcnlfcmVjdXJzaW9uX3JlYWxfZGVlcCA9ICgkZGVlcCArIDEpOw0KICAgICAgICB9DQogICAgICAgICRzdWJhcnJheSA9IGFycmF5KCk7DQogICAgICAgIGZvciAoJGkgPSAwOyAkaSA8ICR0aGlzLT5jYXRlZ29yeV9yZWN1cnNpb25fbGV2ZWw7ICRpKyspIHsNCiAgICAgICAgICAgICRuYW1lID0gJ2x2JyAuICRpOw0KICAgICAgICAgICAgJHskbmFtZX0gPSAmJGx2WyRpXTsNCiAgICAgICAgfQ0KICAgICAgICAkbHZkZWVwID0gJ2x2JyAuICRkZWVwOw0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskdHlwZV1bJGlkXSA9ICYkdGhpcy0+Y2F0ZWdvcmllc19hbGxbJGlkXTsNCiAgICAgICAgaWYgKCRkZWVwIDwgKCR0aGlzLT5jYXRlZ29yeV9yZWN1cnNpb25fbGV2ZWwgLSAxKSkgew0KICAgICAgICAgICAgJGRlZXAgKz0gMTsNCiAgICAgICAgICAgICRsdmRlZXBuZXh0ID0gJ2x2JyAuICRkZWVwOw0KICAgICAgICAgICAgaWYgKGlzc2V0KCR7JGx2ZGVlcG5leHR9WyRpZF0pKSB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHskbHZkZWVwbmV4dH1bJGlkXSBhcyAkaWRub3cpIHsNCiAgICAgICAgICAgICAgICAgICAgJHN1YmFycmF5W10gPSAkaWRub3c7DQogICAgICAgICAgICAgICAgICAgICRiID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlWyR0eXBlXVskaWRdLT5TdWJDYXRlZ29yaWVzIGFzICRrZXkyID0+ICR2YWx1ZTIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdmFsdWUyLT5JRCA9PSAkaWRub3cpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYiA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKCRiID09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskdHlwZV1bJGlkXS0+U3ViQ2F0ZWdvcmllc1tdID0gJiR0aGlzLT5jYXRlZ29yaWVzX2FsbFskaWRub3ddOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIC8vJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyWyRpZF0tPkNoaWxkcmVuQ2F0ZWdvcmllc1tdID0gJiR0aGlzLT5jYXRlZ29yaWVzWyRpZG5vd107DQogICAgICAgICAgICAgICAgICAgICRhcnJheSA9ICR0aGlzLT5Mb2FkQ2F0ZWdvcmllc19SZWN1cnNpb24oJGRlZXAsICRpZG5vdywgJGx2LCAkdHlwZSk7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHN1YmFycmF5W10gPSAkdmFsdWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJHN1YmFycmF5ID0gYXJyYXlfdW5pcXVlKCRzdWJhcnJheSk7DQogICAgICAgIGZvcmVhY2ggKCRzdWJhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgJGIgPSBmYWxzZTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlWyR0eXBlXVskaWRdLT5DaGlsZHJlbkNhdGVnb3JpZXMgYXMgJGtleTIgPT4gJHZhbHVlMikgew0KICAgICAgICAgICAgICAgIGlmICgkdmFsdWUyLT5JRCA9PSAkdmFsdWUpIHsNCiAgICAgICAgICAgICAgICAgICAgJGIgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJGIgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskdHlwZV1bJGlkXS0+Q2hpbGRyZW5DYXRlZ29yaWVzW10gPSAmJHRoaXMtPmNhdGVnb3JpZXNfYWxsWyR2YWx1ZV07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICRzdWJhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXliIbnsbvliJfooaguDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZENhdGVnb3JpZXMoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNfYWxsID0gYXJyYXkoKTsNCg0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXIgPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllcyA9ICYkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXI7DQoNCiAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyX3R5cGUgPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc190eXBlID0gYXJyYXkoKTsNCg0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcnlzID0gJiR0aGlzLT5jYXRlZ29yaWVzOw0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcnlzYnlvcmRlciA9ICYkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXI7DQoNCiAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnBvc3R0eXBlIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jYXRlZ29yaWVzX3R5cGVbJGtleV0pKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNfdHlwZVska2V5XSA9IGFycmF5KCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlWyRrZXldKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlWyRrZXldID0gYXJyYXkoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRDYXRlZ29yeUxpc3QobnVsbCwgbnVsbCwgYXJyYXkoJ2NhdGVfT3JkZXInID0+ICdBU0MnKSwgbnVsbCwgbnVsbCk7DQogICAgICAgIGlmIChjb3VudCgkYXJyYXkpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5wb3N0dHlwZSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgJGx2ID0gYXJyYXkoKTsNCiAgICAgICAgICAgIGZvciAoJGkgPSAwOyAkaSA8ICR0aGlzLT5jYXRlZ29yeV9yZWN1cnNpb25fbGV2ZWw7ICRpKyspIHsNCiAgICAgICAgICAgICAgICAkbmFtZSA9ICdsdicgLiAkaTsNCiAgICAgICAgICAgICAgICAkeyRuYW1lfSA9IGFycmF5KCk7DQogICAgICAgICAgICAgICAgJGx2WyRpXSA9ICYkeyRuYW1lfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRjYXRlZ29yaWVzID0gJHRoaXMtPmNhdGVnb3JpZXNfdHlwZVska2V5XTsNCg0KICAgICAgICAgICAgZm9yZWFjaCAoJGNhdGVnb3JpZXMgYXMgJGlkID0+ICRjKSB7DQogICAgICAgICAgICAgICAgJGwgPSAnbHYnIC4gJGMtPkxldmVsOw0KICAgICAgICAgICAgICAgICR7JGx9WyRjLT5QYXJlbnRJRF1bXSA9ICRpZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFpc3NldCgkbHYwWzBdKSkgew0KICAgICAgICAgICAgICAgICRsdjBbMF0gPSBhcnJheSgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmb3JlYWNoICgkbHYwWzBdIGFzICRpZDApIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+TG9hZENhdGVnb3JpZXNfUmVjdXJzaW9uKDAsICRpZDAsICRsdiwgJGtleSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc190eXBlID0gJiR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlOw0KICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXIgPSAmJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyX3R5cGVbMF07DQogICAgICAgICR0aGlzLT5jYXRlZ29yaWVzID0gJiR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcjsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3J5cyA9ICYkdGhpcy0+Y2F0ZWdvcmllczsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3J5c2J5b3JkZXIgPSAmJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyOw0KDQogICAgICAgICR0aGlzLT5pc2xvYWRjYXRlZ29yaWVzID0gdHJ1ZTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl5qCH562+5YiX6KGoLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRUYWdzKCkNCiAgICB7DQogICAgICAgICR0aGlzLT50YWdzX3R5cGUgPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+dGFnc2J5bmFtZV90eXBlID0gYXJyYXkoKTsNCg0KICAgICAgICAkdGhpcy0+dGFncyA9IGFycmF5KCk7DQogICAgICAgICR0aGlzLT50YWdzYnluYW1lID0gYXJyYXkoKTsNCg0KICAgICAgICAkdGhpcy0+dGFnc19hbGwgPSBhcnJheSgpOw0KDQogICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRUYWdMaXN0KCk7DQoNCiAgICAgICAgaXNzZXQoJHRoaXMtPnRhZ3NfdHlwZVswXSkgfHwgJHRoaXMtPnRhZ3NfdHlwZVswXSA9IGFycmF5KCk7DQogICAgICAgIGlzc2V0KCR0aGlzLT50YWdzYnluYW1lX3R5cGVbMF0pIHx8ICR0aGlzLT50YWdzYnluYW1lX3R5cGVbMF0gPSBhcnJheSgpOw0KDQogICAgICAgICR0aGlzLT50YWdzID0gJiR0aGlzLT50YWdzX3R5cGVbMF07DQogICAgICAgICR0aGlzLT50YWdzYnluYW1lID0gJiR0aGlzLT50YWdzYnluYW1lX3R5cGVbMF07DQoNCiAgICAgICAgJHRoaXMtPmlzbG9hZHRhZ3MgPSB0cnVlOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXmqKHlnZfliJfooaguDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZE1vZHVsZXMoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPm1vZHVsZXMgPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+bW9kdWxlc2J5ZmlsZW5hbWUgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TW9kdWxlTGlzdCgpOw0KDQogICAgICAgICRkaXIgPSAkdGhpcy0+dXNlcnNkaXIgLiAndGhlbWUvJyAuICR0aGlzLT50aGVtZSAuICcvaW5jbHVkZS8nOw0KICAgICAgICBpZiAoZmlsZV9leGlzdHMoJGRpcikpIHsNCiAgICAgICAgICAgICRmaWxlcyA9IEdldEZpbGVzSW5EaXIoJGRpciwgJ3BocCcpOw0KICAgICAgICAgICAgZm9yZWFjaCAoJGZpbGVzIGFzICRzb3J0bmFtZSA9PiAkZnVsbG5hbWUpIHsNCiAgICAgICAgICAgICAgICAkbSA9IG5ldyBNb2R1bGUoKTsNCiAgICAgICAgICAgICAgICAkbS0+RmlsZU5hbWUgPSAkc29ydG5hbWU7DQogICAgICAgICAgICAgICAgJG0tPk5hbWUgPSAkc29ydG5hbWU7DQogICAgICAgICAgICAgICAgJG0tPkh0bWxJRCA9ICRzb3J0bmFtZTsNCiAgICAgICAgICAgICAgICAkbS0+Q29udGVudCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRmdWxsbmFtZSk7DQogICAgICAgICAgICAgICAgaWYgKHN0cmlwb3MoJG0tPkNvbnRlbnQsICc8bGknKSAhPT0gZmFsc2UgJiYgc3RyaXBvcygkbS0+Q29udGVudCwgJzwvbGk+JykgIT09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgICAgICRtLT5UeXBlID0gJ3VsJzsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkbS0+VHlwZSA9ICdkaXYnOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkbS0+U291cmNlID0gJ3RoZW1laW5jbHVkZV8nIC4gJHRoaXMtPnRoZW1lOw0KICAgICAgICAgICAgICAgICRtLT5JRCA9ICgwIC0gKGludCkgY3JjMzIoJG0tPlNvdXJjZSAuICRtLT5GaWxlTmFtZSkpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5BZGRDYWNoZSgkbSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+aXNsb2FkbW9kdWxlcyA9IHRydWU7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeS4u+mimOWIl+ihqC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQXBwW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZFRoZW1lcygpDQogICAgew0KICAgICAgICAkYWxsVGhlbWVzID0gYXJyYXkoKTsNCiAgICAgICAgJGRpcnMgPSBHZXREaXJzSW5EaXIoJHRoaXMtPnVzZXJzZGlyIC4gJ3RoZW1lLycpOw0KICAgICAgICBuYXRjYXNlc29ydCgkZGlycyk7DQogICAgICAgIGFycmF5X3Vuc2hpZnQoJGRpcnMsICR0aGlzLT50aGVtZSk7DQogICAgICAgICRkaXJzID0gYXJyYXlfdW5pcXVlKCRkaXJzKTsNCiAgICAgICAgZm9yZWFjaCAoJGRpcnMgYXMgJGlkKSB7DQogICAgICAgICAgICAkYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICAgICAgaWYgKCRhcHAtPkxvYWRJbmZvQnlYbWwoJ3RoZW1lJywgJGlkKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgJGFsbFRoZW1lc1tdID0gJGFwcDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYWxsVGhlbWVzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeaPkuS7tuWIl+ihqC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQXBwW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZFBsdWdpbnMoKQ0KICAgIHsNCiAgICAgICAgJGFsbFBsdWdpbnMgPSBhcnJheSgpOw0KICAgICAgICAkZGlycyA9IEdldERpcnNJbkRpcigkdGhpcy0+dXNlcnNkaXIgLiAncGx1Z2luLycpOw0KICAgICAgICBuYXRjYXNlc29ydCgkZGlycyk7DQoNCiAgICAgICAgZm9yZWFjaCAoJGRpcnMgYXMgJGlkKSB7DQogICAgICAgICAgICAkYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICAgICAgaWYgKCRhcHAtPkxvYWRJbmZvQnlYbWwoJ3BsdWdpbicsICRpZCkgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICRhbGxQbHVnaW5zW10gPSAkYXBwOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhbGxQbHVnaW5zOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeaMh+WumuW6lOeUqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUg5bqU55So57G75Z6LKHRoZW1lfHBsdWdpbikNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZCAgIOW6lOeUqElEDQogICAgICoNCiAgICAgKiBAcmV0dXJuIEFwcA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkQXBwKCR0eXBlLCAkaWQpDQogICAgew0KICAgICAgICAkYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICBpZiAoJGFwcC0+TG9hZEluZm9CeVhtbCgkdHlwZSwgJGlkKSAhPSB0cnVlKSB7DQogICAgICAgICAgICAkYXBwLT5pc2xvYWRlZCA9IGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcHA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5p+l5bqU55So5piv5ZCm5a6J6KOF5bm25ZCv55SoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSDlupTnlKjvvIjmj5Lku7bmiJbkuLvpopjvvInnmoRJRA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrUGx1Z2luKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGluX2FycmF5KCRuYW1lLCAkdGhpcy0+YWN0aXZlZGFwcHMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeW6lOeUqOaYr+WQpuWuieijheW5tuWQr+eUqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUg5bqU55SoSUTvvIjmj5Lku7bmiJbkuLvpopjvvIkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja0FwcCgkbmFtZSkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+Q2hlY2tQbHVnaW4oJG5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPlumihOa/gOa0u+aPkuS7tuWQjeaVsOe7hC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UHJlQWN0aXZlUGx1Z2luKCkNCiAgICB7DQogICAgICAgICRhcCA9IGV4cGxvZGUoInwiLCAkdGhpcy0+b3B0aW9uWydaQ19VU0lOR19QTFVHSU5fTElTVCddKTsNCiAgICAgICAgJGFwID0gYXJyYXlfdW5pcXVlKCRhcCk7DQoNCiAgICAgICAgcmV0dXJuICRhcDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXmjIflrprlupTnlKjor63oqIDljIUuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0eXBlICAgIOW6lOeUqOexu+WeiyhzeXN0ZW18dGhlbWV8cGx1Z2luKQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGlkICAgICAg5bqU55SoSUQNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRkZWZhdWx0IOm7mOiupOivreiogA0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkTGFuZ3VhZ2UoJHR5cGUsICRpZCwgJGRlZmF1bHQgPSAnJykNCiAgICB7DQogICAgICAgICRsYW5ndWFnZVBhdGggPSAkdGhpcy0+cGF0aDsNCiAgICAgICAgJGxhbmd1YWdlUmVnRXggPSAnL14oWzAtOUEtWlwtX10qKVwucGhwJC91aSc7DQogICAgICAgICRsYW5ndWFnZUxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkbGFuZ3VhZ2UgPSAnJzsNCiAgICAgICAgJGRlZmF1bHQgPSBzdHJfcmVwbGFjZShhcnJheSgnLycsICdcXCcpLCAnJywgJGRlZmF1bHQpOw0KICAgICAgICAkbGFuZ3VhZ2VQdHIgPSAmJHRoaXMtPmxhbmc7DQoNCiAgICAgICAgaWYgKCRkZWZhdWx0ID09PSAnJykgew0KICAgICAgICAgICAgJGRlZmF1bHQgPSAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0xBTkdVQUdFUEFDSyddOw0KICAgICAgICB9DQoNCiAgICAgICAgJGRlZmF1bHRMYW5ndWFnZUxpc3QgPSBhcnJheSgkZGVmYXVsdCwgJ3poLWNuJywgJ3poLXR3JywgJ2VuJyk7DQoNCiAgICAgICAgc3dpdGNoICgkdHlwZSkgew0KICAgICAgICAgICAgY2FzZSAnc3lzdGVtJzoNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2VQYXRoIC49ICd6Yl91c2Vycy9sYW5ndWFnZS8nOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAncGx1Z2luJzoNCiAgICAgICAgICAgIGNhc2UgJ3RoZW1lJzoNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2VQYXRoIC49ICd6Yl91c2Vycy8nIC4gJHR5cGUgLiAnLycgLiAkaWQgLiAnL2xhbmd1YWdlLyc7DQogICAgICAgICAgICAgICAgJGxhbmd1YWdlUHRyID0gJiR0aGlzLT5sYW5nWyRpZF07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICRsYW5ndWFnZVBhdGggLj0gJHR5cGUgLiAnL2xhbmd1YWdlLyc7DQogICAgICAgICAgICAgICAgJGxhbmd1YWdlUHRyID0gJiR0aGlzLT5sYW5nWyRpZF07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCg0KICAgICAgICAkaGFuZGxlID0gQG9wZW5kaXIoJGxhbmd1YWdlUGF0aCk7DQogICAgICAgICRtYXRjaCA9IG51bGw7DQogICAgICAgIGlmICgkaGFuZGxlKSB7DQogICAgICAgICAgICB3aGlsZSAoZmFsc2UgIT09ICgkZmlsZSA9IHJlYWRkaXIoJGhhbmRsZSkpKSB7DQogICAgICAgICAgICAgICAgaWYgKHByZWdfbWF0Y2goJGxhbmd1YWdlUmVnRXgsICRmaWxlLCAkbWF0Y2gpKSB7DQogICAgICAgICAgICAgICAgICAgICRsYW5ndWFnZUxpc3RbXSA9ICRtYXRjaFsxXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjbG9zZWRpcigkaGFuZGxlKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIOi/memHjOS4jeS8muaJp+ihjOWIsO+8jOWcqG9wZW5kaXLml7blsLHlt7Lnu4/mipvlh7pFX1dBUk5JTkcNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0Nhbm5vdCBvcGVuZGlyKCcgLiAkbGFuZ3VhZ2VQYXRoIC4gJyknKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjb3VudCgkbGFuZ3VhZ2VMaXN0KSA9PT0gMCkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTm8gbGFuZ3VhZ2UgaW4gJyAuICRsYW5ndWFnZVBhdGgpOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIDwgY291bnQoJGRlZmF1bHRMYW5ndWFnZUxpc3QpOyAkaSsrKSB7DQogICAgICAgICAgICAvLyDlnKjmlYjnjofkuIrvvIxhcnJheV9zZWFyY2jlkozlkb3lkI3mlbDnu4TmsqHmnInmnKzotKjljLrliKvvvIzoh7PlsJHlnKjov5nph4zlpoLmraTjgIINCiAgICAgICAgICAgIGlmIChmYWxzZSAhPT0gYXJyYXlfc2VhcmNoKCRkZWZhdWx0TGFuZ3VhZ2VMaXN0WyRpXSwgJGxhbmd1YWdlTGlzdCkpIHsNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2UgPSAkZGVmYXVsdExhbmd1YWdlTGlzdFskaV07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRsYW5ndWFnZSA9PT0gJycpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0xhbmd1YWdlICcgLiAkZGVmYXVsdCAuICcgaXMgbm90IGZvdW5kIGluICcgLiAkbGFuZ3VhZ2VQYXRoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRsYW5ndWFnZVBhdGggLj0gJGxhbmd1YWdlIC4gJy5waHAnOw0KICAgICAgICAkbGFuZ3VhZ2VQdHIgPSBpbmNsdWRlICRsYW5ndWFnZVBhdGg7DQogICAgICAgICR0aGlzLT5sYW5ncGFja2xpc3RbXSA9IGFycmF5KCR0eXBlLCAkaWQsICRsYW5ndWFnZSk7DQogICAgICAgIGlmICgkdHlwZSA9PSAnc3lzdGVtJykgew0KICAgICAgICAgICAgaWYgKGlzX3JlYWRhYmxlKCR0aGlzLT5zeXN0ZW1kaXIgLiAnZGVmZW5kL2VuLnBocCcpKSB7DQogICAgICAgICAgICAgICAgJGRlZmVuZF9lbiA9IGluY2x1ZGUgJHRoaXMtPnN5c3RlbWRpciAuICdkZWZlbmQvZW4ucGhwJzsNCiAgICAgICAgICAgICAgICAkbm93bGFuZyA9ICRsYW5ndWFnZVB0cjsNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2VQdHIgPSBhcnJheV9yZXBsYWNlX3JlY3Vyc2l2ZSgkZGVmZW5kX2VuLCAkbm93bGFuZyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+bGFuZ3MgPSBuZXcgWmJwTGFuZ3MoJHRoaXMtPmxhbmcsICdsYW5ncycpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVmbHVzaExhbmd1YWdlcygpDQogICAgew0KICAgICAgICAkdGhpcy0+bGFuZ1snZXJyb3InXVsnNzcnXSA9IHN0cl9yZXBsYWNlKGFycmF5KCclbWluJywgJyVtYXgnKSwgYXJyYXkoJHRoaXMtPm9wdGlvblsnWkNfVVNFUk5BTUVfTUlOJ10sICR0aGlzLT5vcHRpb25bJ1pDX1VTRVJOQU1FX01BWCddKSwgJHRoaXMtPmxhbmdbJ2Vycm9yJ11bJzc3J10pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmHjeaWsOivu+WPluivreiogOWMhS4NCiAgICAgKg0KICAgICAqIEB0aHJvd3MgRXhjZXB0aW9uDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFJlbG9hZExhbmd1YWdlcygpDQogICAgew0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+bGFuZ3BhY2tsaXN0Ow0KICAgICAgICAkdGhpcy0+bGFuZyA9ICR0aGlzLT5sYW5ncGFja2xpc3QgPSBhcnJheSgpOw0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJHYpIHsNCiAgICAgICAgICAgICR0aGlzLT5Mb2FkTGFuZ3VhZ2UoJHZbMF0sICR2WzFdLCAkdlsyXSk7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPlJlZmx1c2hMYW5ndWFnZXMoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliJvlu7rmqKHmnb/lr7nosaHvvIzpooTliqDovb3lt7LnvJbor5HmqKHmnb8NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRoZW1lIOaMh+WumuS4u+mimOWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBUZW1wbGF0ZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBQcmVwYXJlVGVtcGxhdGUoJHRoZW1lID0gbnVsbCwgJHRlbXBsYXRlX2Rpcm5hbWUgPSAndGVtcGxhdGUnKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX251bGwoJHRoZW1lKSB8fCBlbXB0eSgkdGhlbWUpKSB7DQogICAgICAgICAgICAkdGhlbWUgPSAmJHRoaXMtPnRoZW1lOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7DQogICAgICAgICR0ZW1wbGF0ZS0+TWFrZVRlbXBsYXRlVGFncygpOw0KDQogICAgICAgIC8v6ICB5o6l5Y+j77yM5Y+q5pS5dGVtcGxhdGVUYWdz55qEDQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9NYWtlVGVtcGxhdGV0YWdzJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBuYW1lKCR0ZW1wbGF0ZS0+dGVtcGxhdGVUYWdzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8v5q2k5aSE5aKe5Yqg5o6l5Y+j5Y+v5Lul5ZyoTG9hZOaXtu+8jOWvuSR0aGVtZSwgJHRlbXBsYXRlX2Rpcm5hbWXlj4LmlbDlj6/ku6Xov5vooYzkv67mlLkNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX1ByZXBhcmVUZW1wbGF0ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwbmFtZSgkdGhlbWUsICR0ZW1wbGF0ZV9kaXJuYW1lKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0ZW1wbGF0ZS0+dGhlbWUgPSAkdGhlbWU7DQogICAgICAgICR0ZW1wbGF0ZS0+dGVtcGxhdGVfZGlybmFtZSA9ICR0ZW1wbGF0ZV9kaXJuYW1lOw0KDQogICAgICAgICR0ZW1wbGF0ZS0+U2V0UGF0aCgpOw0KDQogICAgICAgICR0ZW1wbGF0ZS0+TG9hZFRlbXBsYXRlcygpOw0KDQogICAgICAgIHJldHVybiAkdGVtcGxhdGU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6ZKI5a+55pyJ5ZCM5LiA5Li76aKY5LiL5pyJ5aSa5aWX5qih5p2/55qE6Kej5p6QDQogICAgICog55u05o6l5Zyo5o6l5Y+j5Lit55u05o6l6LCD55SoJHpicC0+QnVpbGRUZW1wbGF0ZU1vcmXov5vooYzph43mlrDnvJbor5HlhbblroPmqKHmnb8NCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQnVpbGRUZW1wbGF0ZSgpDQogICAgew0KICAgICAgICAkdGhpcy0+QnVpbGRUZW1wbGF0ZV9PbmNlKCk7DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX0J1aWxkVGVtcGxhdGVfRW5kJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBuYW1lKCR0aGlzLT50ZW1wbGF0ZSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlv6vmjbfph43mlrDnvJbor5HmjIflrprkuLvpopjmqKHmnb/nm67lvZXlkI3nmoTmqKHmnb8NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBCdWlsZFRlbXBsYXRlTW9yZSgkdGhlbWUgPSBudWxsLCAkdGVtcGxhdGVfZGlybmFtZSA9ICd0ZW1wbGF0ZScpDQogICAgew0KICAgICAgICBpZiAoaXNfbnVsbCgkdGhlbWUpIHx8IGVtcHR5KCR0aGVtZSkpIHsNCiAgICAgICAgICAgICR0aGVtZSA9ICYkdGhpcy0+dGhlbWU7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPnRlbXBsYXRlLT50aGVtZSA9ICR0aGVtZTsNCiAgICAgICAgJHRoaXMtPnRlbXBsYXRlLT50ZW1wbGF0ZV9kaXJuYW1lID0gJHRlbXBsYXRlX2Rpcm5hbWU7DQogICAgICAgICR0aGlzLT50ZW1wbGF0ZS0+U2V0UGF0aCgpOw0KICAgICAgICByZXR1cm4gJHRoaXMtPkJ1aWxkVGVtcGxhdGVfT25jZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaooeadv+ino+aekC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gQnVpbGRUZW1wbGF0ZV9PbmNlKCkNCiAgICB7DQogICAgICAgICR0aGlzLT50ZW1wbGF0ZS0+TG9hZFRlbXBsYXRlcygpOw0KDQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9CdWlsZFRlbXBsYXRlJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBuYW1lKCR0aGlzLT50ZW1wbGF0ZS0+dGVtcGxhdGVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+dGVtcGxhdGUtPkJ1aWxkVGVtcGxhdGUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmm7TmlrDmqKHmnb/nvJPlrZguDQogICAgICoNCiAgICAgKiBAcGFyYW0gYm9vbCAkb25seWNoZWNrICDkuLrnnJ/nmoTor53vvIzlj6rliKTmlq3mmK/lkKbpnIDopoHogIzkuI1CdWlsZA0KICAgICAqIEBwYXJhbSBib29sICRmb3JjZWJ1aWxkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHRydWUgb3IgZmFsc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tUZW1wbGF0ZSgkb25seWNoZWNrID0gZmFsc2UsICRmb3JjZWJ1aWxkID0gZmFsc2UpDQogICAgew0KICAgICAgICAkdGhpcy0+dGVtcGxhdGUtPkxvYWRUZW1wbGF0ZXMoKTsNCiAgICAgICAgJHMgPSBpbXBsb2RlKCR0aGlzLT50ZW1wbGF0ZS0+dGVtcGxhdGVzKTsNCiAgICAgICAgJG1kNSA9IG1kNSgkcyk7DQoNCiAgICAgICAgLy/mnKzlh73mlbDnmoTov5Tlm57lgLzlvojmnInmhI/mgJ3vvIzkuLpmYWxzZeihqOekuumcgOimgXJlYnVpbGQg5Li6dHJ1ZeihqOekuuW3sumHjeW7uuWujOaIkOaIluaYr+S4jemcgOimgXJlYnVpbGQNCiAgICAgICAgLy8kemJwLT5DaGVja1RlbXBsYXRlKHRydWUpID09IGZhbHNlIOeahOaEj+aAne+8jOWwseaYr+WIpOaWreaooeadv+mcgOmcgOimgemHjeWIt+aWsOWQl++8nw0KDQogICAgICAgICRhcnJheV9tZDUgPSB1bnNlcmlhbGl6ZSgkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDVfYXJyYXkpOw0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhcnJheV9tZDUpKSB7DQogICAgICAgICAgICAkYXJyYXlfbWQ1ID0gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRuZXdfbWQ1ID0gR2V0VmFsdWVJbkFycmF5KCRhcnJheV9tZDUsICR0aGlzLT50ZW1wbGF0ZS0+dGVtcGxhdGVfZGlybmFtZSk7DQoNCiAgICAgICAgLy/lpoLmnpzlr7nmr5TkuI3kuIDmoLcsJG9ubHljaGVja+WwseacieeUqOS6hg0KICAgICAgICBpZiAoJG1kNSAhPSAkbmV3X21kNSkgew0KICAgICAgICAgICAgaWYgKCRvbmx5Y2hlY2sgPT0gdHJ1ZSAmJiAkZm9yY2VidWlsZCA9PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5CdWlsZFRlbXBsYXRlKCk7DQogICAgICAgICAgICAkYXJyYXlfbWQ1WyR0aGlzLT50ZW1wbGF0ZS0+dGVtcGxhdGVfZGlybmFtZV0gPSAkbWQ1Ow0KICAgICAgICAgICAgJHRoaXMtPmNhY2hlLT50ZW1wbGF0ZXNfbWQ1X2FycmF5ID0gc2VyaWFsaXplKCRhcnJheV9tZDUpOw0KICAgICAgICAgICAgJHRoaXMtPlNhdmVDYWNoZSgpOw0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICAvL+WmguaenOWvueavlOS4gOagt+eahOivne+8jCRmb3JjZWJ1aWxk5bCx5pyJ55So5LqGDQogICAgICAgIGlmICgkbWQ1ID09ICRuZXdfbWQ1KSB7DQogICAgICAgICAgICBpZiAoJG9ubHljaGVjayA9PSB0cnVlICYmICRmb3JjZWJ1aWxkID09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJGZvcmNlYnVpbGQgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5CdWlsZFRlbXBsYXRlKCk7DQogICAgICAgICAgICAgICAgJGFycmF5X21kNVskdGhpcy0+dGVtcGxhdGUtPnRlbXBsYXRlX2Rpcm5hbWVdID0gJG1kNTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDVfYXJyYXkgPSBzZXJpYWxpemUoJGFycmF5X21kNSk7DQogICAgICAgICAgICAgICAgJHRoaXMtPlNhdmVDYWNoZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQoNCiAgICAgICAgLyoNCiAgICAgICAgLy/lpoLmnpzlr7nmr5TkuI3kuIDmoLcsJG9ubHljaGVja+WwseacieeUqOS6hg0KICAgICAgICBpZiAoJG1kNSAhPSAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDUpIHsNCiAgICAgICAgICAgIGlmICgkb25seWNoZWNrID09IHRydWUgJiYgJGZvcmNlYnVpbGQgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkdGhpcy0+QnVpbGRUZW1wbGF0ZSgpOw0KICAgICAgICAgICAgJHRoaXMtPmNhY2hlLT50ZW1wbGF0ZXNfbWQ1ID0gJG1kNTsNCiAgICAgICAgICAgICR0aGlzLT5TYXZlQ2FjaGUoKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgLy/lpoLmnpzlr7nmr5TkuIDmoLfnmoTor53vvIwkZm9yY2VidWlsZOWwseacieeUqOS6hg0KICAgICAgICBpZiAoJG1kNSA9PSAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDUpIHsNCiAgICAgICAgICAgIGlmICgkZm9yY2VidWlsZCA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPkJ1aWxkVGVtcGxhdGUoKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDUgPSAkbWQ1Ow0KICAgICAgICAgICAgICAgICR0aGlzLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAqLw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOeUn+aIkOaJgOaciei/m1JlYWR5IExpc3TnmoTmqKHlnZfnmoRDb250ZW505YaF5a655bm25L+d5a2YLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBCdWlsZE1vZHVsZSgpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfQnVpbGRNb2R1bGUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcG5hbWUoKTsNCiAgICAgICAgfQ0KICAgICAgICBNb2R1bGVCdWlsZGVyOjpCdWlsZCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluW9k+WJjeaooeadv+WvueWDjw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiAmR2V0VGVtcGxhdGUoKQ0KICAgIHsNCiAgICAgICAgaWYgKElTX0NMSSAmJiAoSVNfV09SS0VSTUFOIHx8IElTX1NXT09MRSkpIHsNCiAgICAgICAgICAgICR0ZW1wbGF0ZSA9IGNsb25lICR0aGlzLT50ZW1wbGF0ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICR0ZW1wbGF0ZSA9ICYkdGhpcy0+dGVtcGxhdGU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJHRlbXBsYXRlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmHjeW7uuaooeWdly4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1vZHVsZUZpbGVOYW1lIOaooeWdl+WQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1vZHVsZUZ1bmN0aW9uIOeUqOaIt+WHveaVsA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWdCdWlsZE1vZHVsZSgkbW9kdWxlRmlsZU5hbWUsICRtb2R1bGVGdW5jdGlvbikNCiAgICB7DQogICAgICAgIE1vZHVsZUJ1aWxkZXI6OlJlZygkbW9kdWxlRmlsZU5hbWUsICRtb2R1bGVGdW5jdGlvbik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog57O757uf6buY6K6k5rOo5YaM5qih5Z2XLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWdCdWlsZE1vZHVsZXMoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdjYXRhbG9nJywgJ01vZHVsZUJ1aWxkZXI6OkNhdGFsb2cnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdjYWxlbmRhcicsICdNb2R1bGVCdWlsZGVyOjpDYWxlbmRhcicpOw0KICAgICAgICAkdGhpcy0+UmVnQnVpbGRNb2R1bGUoJ2NvbW1lbnRzJywgJ01vZHVsZUJ1aWxkZXI6OkNvbW1lbnRzJyk7DQogICAgICAgICR0aGlzLT5SZWdCdWlsZE1vZHVsZSgncHJldmlvdXMnLCAnTW9kdWxlQnVpbGRlcjo6TGF0ZXN0QXJ0aWNsZXMnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdhcmNoaXZlcycsICdNb2R1bGVCdWlsZGVyOjpBcmNoaXZlcycpOw0KICAgICAgICAkdGhpcy0+UmVnQnVpbGRNb2R1bGUoJ25hdmJhcicsICdNb2R1bGVCdWlsZGVyOjpOYXZiYXInKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCd0YWdzJywgJ01vZHVsZUJ1aWxkZXI6OlRhZ0xpc3QnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdzdGF0aXN0aWNzJywgJ01vZHVsZUJ1aWxkZXI6OlN0YXRpc3RpY3MnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdhdXRob3JzJywgJ01vZHVsZUJ1aWxkZXI6OkF1dGhvcnMnKTsNCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfUmVnQnVpbGRNb2R1bGVzJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBuYW1lKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmt7vliqDov5vlhaVCdWlsZCBSZWFkeeWIl+ihqOeahOaooeWdly4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1vZHVsZUZpbGVOYW1lIOaooeWdl+WQjQ0KICAgICAqIEBwYXJhbSBudWxsICAgJHBhcmFtZXRlcnMgICAgIOaooeWdl+WPguaVsA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBBZGRCdWlsZE1vZHVsZSgkbW9kdWxlRmlsZU5hbWUsICRwYXJhbWV0ZXJzID0gbnVsbCkNCiAgICB7DQogICAgICAgICRwID0gZnVuY19nZXRfYXJncygpOw0KICAgICAgICBpZiAoJG1vZHVsZUZpbGVOYW1lID09ICdhcmNoaXZlcycgJiYgJHRoaXMtPm9wdGlvblsnWkNfTEFSR0VfREFUQSddID09IGZhbHNlICYmIGlzc2V0KCR0aGlzLT5tb2R1bGVzYnlmaWxlbmFtZVsnYXJjaGl2ZXMnXSkpIHsNCiAgICAgICAgICAgIGlmICgkdGhpcy0+bW9kdWxlc2J5ZmlsZW5hbWVbJ2FyY2hpdmVzJ10tPkdldFNpZGVCYXJJblVzZWQoKSA9PSBhcnJheSgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhbGxfdXNlcl9mdW5jX2FycmF5KGFycmF5KCdNb2R1bGVCdWlsZGVyJywgJ0FkZCcpLCAkcCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yig6Zmk6L+b5YWlQnVpbGQgUmVhZHnliJfooajmqKHlnZcuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRtb2R1bGVGaWxlTmFtZSDmqKHlnZflkI0NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsQnVpbGRNb2R1bGUoJG1vZHVsZUZpbGVOYW1lKQ0KICAgIHsNCiAgICAgICAgTW9kdWxlQnVpbGRlcjo6RGVsKCRtb2R1bGVGaWxlTmFtZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p+l6K+i5oyH5a6a5pWw5o2u57uT5p6E55qEc3Fs5bm26L+U5ZueQmFzZeWvueixoeWIl+ihqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmd8YXJyYXkgJHRhYmxlICAgIOaVsOaNruihqA0KICAgICAqIEBwYXJhbSBhcnJheSAgICAgICAgJGRhdGFpbmZvIOaVsOaNruWtl+autQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICAgJHNxbCAgICAgIFNRTOaTjeS9nOivreWPpQ0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRMaXN0Q3VzdG9tKCR0YWJsZSwgJGRhdGFpbmZvLCAkc3FsKQ0KICAgIHsNCiAgICAgICAgJGFycmF5ID0gbnVsbDsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgICAgICBpZiAoIWlzc2V0KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgJGwgPSBuZXcgQmFzZSgkdGFibGUsICRkYXRhaW5mbyk7DQogICAgICAgICAgICAkbC0+TG9hZEluZm9CeUFzc29jKCRhKTsNCiAgICAgICAgICAgICRsaXN0W10gPSAkbDsNCiAgICAgICAgICAgIHVuc2V0KCRsKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbGlzdDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmn6Xor6JJROaVsOaNrueahOaMh+WumuaVsOaNrue7k+aehOeahHNxbOW5tui/lOWbnkJhc2Xlr7nosaHliJfooaguDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAgICR0YWJsZSAgICAgIOaVsOaNruihqA0KICAgICAqIEBwYXJhbSBhcnJheSAgICAgICAgJGRhdGFpbmZvICAg5pWw5o2u5a2X5q61DQogICAgICogQHBhcmFtIGFycmF5ICAgICAgICAkYXJyYXkgICAgICBJROaVsOe7hA0KICAgICAqIEBwYXJhbSBzdHJpbmd8YXJyYXkgJGZpZWxkX25hbWUg5a2X5q615ZCNICjlpoLmnpwkYXJyYXnmmK/lr7nosaHmlbDmja7vvIzpgqMkZmllbGRfbmFtZeWwseWPmOS4unN0cmluZ+aVsOe7hCkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldExpc3RDdXN0b21CeUFycmF5KCR0YWJsZSwgJGRhdGFpbmZvLCAkYXJyYXksICRmaWVsZF9uYW1lID0gJ0lEJykNCiAgICB7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGFycmF5KSkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoY291bnQoJGFycmF5KSA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR3aGVyZSA9ICRsaXN0ID0gYXJyYXkoKTsNCiAgICAgICAgJGlzX2FycmF5X29iamVjdCA9IGZhbHNlOw0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGFueSkgew0KICAgICAgICAgICAgaWYgKGlzX29iamVjdCgkYW55KSkgew0KICAgICAgICAgICAgICAgICRpc19hcnJheV9vYmplY3QgPSB0cnVlOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICgkaXNfYXJyYXlfb2JqZWN0KSB7DQogICAgICAgICAgICBpZiAoaXNfYXJyYXkoJGZpZWxkX25hbWUpKSB7DQogICAgICAgICAgICAgICAgaWYgKGNvdW50KCRmaWVsZF9uYW1lKSA9PSAxKSB7DQogICAgICAgICAgICAgICAgICAgICRhcnJheV9maWVsZF9uYW1lID0ga2V5KCRmaWVsZF9uYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgJGZpZWxkX25hbWUgPSAkZmllbGRfbmFtZVskYXJyYXlfZmllbGRfbmFtZV07DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJGFycmF5X2ZpZWxkX25hbWUgPSAkZmllbGRfbmFtZVswXTsNCiAgICAgICAgICAgICAgICAgICAgJGZpZWxkX25hbWUgPSAkZmllbGRfbmFtZVsxXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICRhcnJheV9maWVsZF9uYW1lID0gJGZpZWxkX25hbWU7DQogICAgICAgICAgICAgICAgJGZpZWxkX25hbWUgPSAnSUQnOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGFycmF5MiA9IGFycmF5KCk7DQogICAgICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGFueSkgew0KICAgICAgICAgICAgICAgICRhcnJheTJbXSA9ICRhbnktPiRhcnJheV9maWVsZF9uYW1lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGFycmF5ID0gJGFycmF5MjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChlbXB0eSgkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpc3Q7DQogICAgICAgIH0NCiAgICAgICAgJGFycmF5ID0gYXJyYXlfdW5pcXVlKCRhcnJheSk7DQoNCiAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnSU4nLCAkZGF0YWluZm9bJGZpZWxkX25hbWVdWzBdLCBpbXBsb2RlKCcsJywgJGFycmF5KSk7DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0YWJsZSwgJyonLCAkd2hlcmUpOw0KICAgICAgICAkb2JqZWN0cyA9ICR0aGlzLT5kYi0+UXVlcnkoJHNxbCk7DQogICAgICAgIGlmICghaXNzZXQoJG9iamVjdHMpKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpc3Q7DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJG9iamVjdHMgYXMgJGEpIHsNCiAgICAgICAgICAgICRsID0gbmV3IEJhc2UoJHRhYmxlLCAkZGF0YWluZm8pOw0KICAgICAgICAgICAgJGwtPkxvYWRJbmZvQnlBc3NvYygkYSk7DQogICAgICAgICAgICAkbGlzdFtdID0gJGw7DQogICAgICAgICAgICB1bnNldCgkbCk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGxpc3Q7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5bey5pS55ZCNR2V0TGlzdFR5cGUsMS4154mI5Lit5omU5o6J5pyJ5q2n5LmJ55qER2V0TGlzdC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkY2xhc3NuYW1lDQogICAgICogQHBhcmFtICRzcWwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldExpc3RUeXBlKCRjbGFzc25hbWUsICRzcWwpDQogICAgew0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRzcWwpICYmIGdldF9wYXJlbnRfY2xhc3MoJHNxbCkgPT0gJ1NRTF9fR2xvYmFsJykgew0KICAgICAgICAgICAgJHNxbCA9ICRzcWwtPnNxbDsNCiAgICAgICAgfQ0KICAgICAgICAkYXJyYXkgPSBudWxsOw0KICAgICAgICAkbGlzdCA9IGFycmF5KCk7DQogICAgICAgICRhcnJheSA9ICR0aGlzLT5kYi0+UXVlcnkoJHNxbCk7DQogICAgICAgIGlmICghaXNzZXQoJGFycmF5KSkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGEpIHsNCiAgICAgICAgICAgIGlmIChpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgICAgICAvKiogQHZhciBCYXNlICRsICovDQogICAgICAgICAgICAgICAgJGwgPSBuZXcgJGNsYXNzbmFtZSgpOw0KICAgICAgICAgICAgICAgICRsLT5Mb2FkSW5mb0J5QXNzb2MoJGEpOw0KICAgICAgICAgICAgICAgIGlmIChpc19zdWJjbGFzc19vZigkY2xhc3NuYW1lLCAnQmFzZVBvc3QnKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgICAgICRuZXd0eXBlID0gJHRoaXMtPkdldFBvc3RUeXBlX0NsYXNzTmFtZSgkbC0+VHlwZSk7DQogICAgICAgICAgICAgICAgICAgIGlmICgkbmV3dHlwZSAhPSAkY2xhc3NuYW1lKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkbCk7DQogICAgICAgICAgICAgICAgICAgICAgICAkbCA9IG5ldyAkbmV3dHlwZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICRsLT5Mb2FkSW5mb0J5QXNzb2MoJGEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRpZCA9ICRsLT5HZXRJZE5hbWUoKTsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPkNoZWNrQ2FjaGUoJGNsYXNzbmFtZSwgJGwtPiRpZCkgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkFkZENhY2hlKCRsKTsNCiAgICAgICAgICAgICAgICAgICAgJGxpc3RbXSA9ICRsOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICRuID0gJiR0aGlzLT5HZXRDYWNoZSgkY2xhc3NuYW1lLCAkbC0+JGlkKTsNCiAgICAgICAgICAgICAgICAgICAgJGxpc3RbXSA9ICRuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB1bnNldCgkbCwgJG4pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRsaXN0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldExpc3RPcmlnaW4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHNxbA0KICAgICAqDQogICAgICogQHJldHVybiBCYXNlW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TGlzdE9yaWdpbigkc3FsKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX29iamVjdCgkc3FsKSAmJiBnZXRfcGFyZW50X2NsYXNzKCRzcWwpID09ICdTUUxfX0dsb2JhbCcpIHsNCiAgICAgICAgICAgICRzcWwgPSAkc3FsLT5zcWw7DQogICAgICAgIH0NCiAgICAgICAgJGFycmF5ID0gbnVsbDsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgICAgICBpZiAoIWlzc2V0KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgJGxpc3RbXSA9ICRhOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRsaXN0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOafpeivoklE5pWw5o2u55qE5oyH5a6a57G75Z6L55qEc3Fs5bm26L+U5Zue5oyH5a6a57G75Z6L5a+56LGh5YiX6KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkY2xhc3NuYW1lICDnsbvlnosNCiAgICAgKiBAcGFyYW0gbWl4ZWQgICRhcnJheSBJROaVsOe7hA0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGZpZWxkX25hbWUg5a2X5q615ZCNICjlpoLmnpwkYXJyYXnmmK/lr7nosaHmlbDmja7vvIzpgqMkZmllbGRfbmFtZeWwseWPmOS4unN0cmluZ+aVsOe7hCkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldExpc3RUeXBlQnlBcnJheSgkY2xhc3NuYW1lLCAkYXJyYXksICRmaWVsZF9uYW1lID0gJ0lEJykNCiAgICB7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGFycmF5KSkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoY291bnQoJGFycmF5KSA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR3aGVyZSA9ICRsaXN0ID0gYXJyYXkoKTsNCiAgICAgICAgLy8kYXJyYXnlpoLmnpzmmK9CYXNlT2JqZWN05pWw57uE55qE6K+dLOWPr+S7pemHjee7hOeUn+aIkOaWsCRhcnJheSwkZmllbGRfbmFtZeatpOaXtuWPr+WPmOaIkOaVsOe7hA0KICAgICAgICAvL+WmguaenCRmaWVsZF9uYW1l5piv5pWw57uE77yM6YKj5LmIJGZpZWxkX25hbWVbMF3mmK/mjIckYXJyYXnnmoRmaWVsZF9uYW1lLCRmaWVsZF9uYW1lWzFd5oyH6KaB5p+l5a+755qEZmllbGRfbmFtZQ0KICAgICAgICAkaXNfYXJyYXlfb2JqZWN0ID0gZmFsc2U7DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYW55KSB7DQogICAgICAgICAgICBpZiAoaXNfb2JqZWN0KCRhbnkpKSB7DQogICAgICAgICAgICAgICAgJGlzX2FycmF5X29iamVjdCA9IHRydWU7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRpc19hcnJheV9vYmplY3QpIHsNCiAgICAgICAgICAgIGlmIChpc19hcnJheSgkZmllbGRfbmFtZSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoY291bnQoJGZpZWxkX25hbWUpID09IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgJGFycmF5X2ZpZWxkX25hbWUgPSBrZXkoJGZpZWxkX25hbWUpOw0KICAgICAgICAgICAgICAgICAgICAkZmllbGRfbmFtZSA9ICRmaWVsZF9uYW1lWyRhcnJheV9maWVsZF9uYW1lXTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkYXJyYXlfZmllbGRfbmFtZSA9ICRmaWVsZF9uYW1lWzBdOw0KICAgICAgICAgICAgICAgICAgICAkZmllbGRfbmFtZSA9ICRmaWVsZF9uYW1lWzFdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJGFycmF5X2ZpZWxkX25hbWUgPSAkZmllbGRfbmFtZTsNCiAgICAgICAgICAgICAgICAkZmllbGRfbmFtZSA9ICdJRCc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkYXJyYXkyID0gYXJyYXkoKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYW55KSB7DQogICAgICAgICAgICAgICAgJGFycmF5MltdID0gJGFueS0+JGFycmF5X2ZpZWxkX25hbWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkYXJyYXkgPSAkYXJyYXkyOw0KICAgICAgICB9DQoNCiAgICAgICAgJGFycmF5ID0gYXJyYXlfdW5pcXVlKCRhcnJheSk7DQogICAgICAgICRjYWNoZSA9ICYkdGhpcy0+R2V0Q2FjaGUoJGNsYXNzbmFtZSk7DQogICAgICAgIGZvcmVhY2ggKCRjYWNoZSBhcyAkbykgew0KICAgICAgICAgICAgJHYxID0gJG8tPiRmaWVsZF9uYW1lOw0KICAgICAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRrMiA9PiAkdjIpIHsNCiAgICAgICAgICAgICAgICBpZiAoJHYxID09ICR2Mikgew0KICAgICAgICAgICAgICAgICAgICB1bnNldCgkYXJyYXlbJGsyXSk7DQogICAgICAgICAgICAgICAgICAgICRsaXN0W10gPSAkbzsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChlbXB0eSgkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpc3Q7DQogICAgICAgIH0NCg0KICAgICAgICAkbyA9IG5ldyAkY2xhc3NuYW1lOw0KICAgICAgICAkdGFibGUgPSAmJG8tPkdldFRhYmxlKCk7DQogICAgICAgICRkYXRhaW5mbyA9ICYkby0+R2V0RGF0YUluZm8oKTsNCiAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnSU4nLCAkZGF0YWluZm9bJGZpZWxkX25hbWVdWzBdLCBpbXBsb2RlKCcsJywgJGFycmF5KSk7DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0YWJsZSwgJyonLCAkd2hlcmUpOw0KICAgICAgICAkb2JqZWN0cyA9ICR0aGlzLT5kYi0+UXVlcnkoJHNxbCk7DQogICAgICAgIGlmICghaXNzZXQoJG9iamVjdHMpKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpc3Q7DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJG9iamVjdHMgYXMgJGEpIHsNCiAgICAgICAgICAgIC8qKiBAdmFyIEJhc2UgJGwgKi8NCiAgICAgICAgICAgICRsID0gbmV3ICRjbGFzc25hbWUoKTsNCiAgICAgICAgICAgICRsLT5Mb2FkSW5mb0J5QXNzb2MoJGEpOw0KICAgICAgICAgICAgaWYgKGlzX3N1YmNsYXNzX29mKCRjbGFzc25hbWUsICdCYXNlUG9zdCcpID09IHRydWUpIHsNCiAgICAgICAgICAgICAgICAkbmV3dHlwZSA9ICR0aGlzLT5HZXRQb3N0VHlwZV9DbGFzc05hbWUoJGwtPlR5cGUpOw0KICAgICAgICAgICAgICAgIGlmICgkbmV3dHlwZSAhPSAkY2xhc3NuYW1lKSB7DQogICAgICAgICAgICAgICAgICAgIHVuc2V0KCRsKTsNCiAgICAgICAgICAgICAgICAgICAgJGwgPSBuZXcgJG5ld3R5cGU7DQogICAgICAgICAgICAgICAgICAgICRsLT5Mb2FkSW5mb0J5QXNzb2MoJGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRpZCA9ICRsLT5HZXRJZE5hbWUoKTsNCiAgICAgICAgICAgIGlmICgkdGhpcy0+Q2hlY2tDYWNoZSgkY2xhc3NuYW1lLCAkbC0+JGlkKSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5BZGRDYWNoZSgkbCk7DQogICAgICAgICAgICAgICAgJGxpc3RbXSA9ICRsOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkbiA9ICYkdGhpcy0+R2V0Q2FjaGUoJGNsYXNzbmFtZSwgJGwtPiRpZCk7DQogICAgICAgICAgICAgICAgJGxpc3RbXSA9ICRuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdW5zZXQoJGwsICRuKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbGlzdDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDprZTmnK/mlrnms5XmjIflrprnmoTor7vlj5ZMaXN055qE56eB5pyJ5pa55rOVDQogICAgICovDQogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIEdldExpc3RXaXRoQmFzZU9iamVjdCgkY2xhc3NuYW1lLCAkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRzZWxlY3QpICYmIGdldF9wYXJlbnRfY2xhc3MoJHNlbGVjdCkgPT0gJ1NRTF9fR2xvYmFsJykgew0KICAgICAgICAgICAgJHNxbCA9ICRzZWxlY3QtPnNxbDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRvID0gbmV3ICRjbGFzc25hbWU7DQogICAgICAgICAgICAkdGFibGUgPSAmJG8tPkdldFRhYmxlKCk7DQogICAgICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGFibGUsICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyoqIEB2YXIgQmFzZU9iamVjdHNbXSAkYXJyYXkgKi8NCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCRjbGFzc25hbWUsICRzcWwpOw0KICAgICAgICBpZiAoaXNzZXQoJG9wdGlvblsncGFnZWJhciddKSAmJiBpc19vYmplY3QoJG9wdGlvblsncGFnZWJhciddKSkgew0KICAgICAgICAgICAgJG9wdGlvblsncGFnZWJhciddLT5DdXJyZW50Q291bnQgPSBjb3VudCgkYXJyYXkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDprZTmnK/mlrnms5XmjIflrprnmoTor7vlj5ZMaXN0QnlBcnJheeeahOengeacieaWueazlQ0KICAgICAqLw0KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBHZXRMaXN0QnlBcnJheVdpdGhCYXNlT2JqZWN0KCRjbGFzc25hbWUsICRhcnJheSwgJGZpZWxkX25hbWUgPSAnSUQnKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRMaXN0VHlwZUJ5QXJyYXkoJGNsYXNzbmFtZSwgJGFycmF5LCAkZmllbGRfbmFtZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6a2U5pyv5pa55rOV5oyH5a6a55qE6K+75Y+WU2luZ2xlQnlJROeahOengeacieaWueazlQ0KICAgICAqLw0KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBHZXRTaW5nbGVCeUlEV2l0aEJhc2VPYmplY3QoJGNsYXNzbmFtZSwgJGlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmcoJHRoaXMtPkdldENhY2hlKCRjbGFzc25hbWUpLCAnSUQnLCAkaWQsICRjbGFzc25hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBtaXhlZCAkc2VsZWN0DQogICAgICogQHBhcmFtIG1peGVkICR3aGVyZQ0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3JkZXINCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGxpbWl0DQogICAgICogQHBhcmFtIG1peGVkICRvcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gUG9zdFtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChpc19vYmplY3QoJHNlbGVjdCkgJiYgZ2V0X3BhcmVudF9jbGFzcygkc2VsZWN0KSA9PSAnU1FMX19HbG9iYWwnKSB7DQogICAgICAgICAgICAkc3FsID0gJHNlbGVjdC0+c3FsOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydQb3N0J10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyoqIEB2YXIgUG9zdFtdICRhcnJheSAqLw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ1Bvc3QnLCAkc3FsLCAkb3B0aW9uKTsNCiAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bJ3BhZ2ViYXInXSkgJiYgaXNfb2JqZWN0KCRvcHRpb25bJ3BhZ2ViYXInXSkpIHsNCiAgICAgICAgICAgICRvcHRpb25bJ3BhZ2ViYXInXS0+Q3VycmVudENvdW50ID0gY291bnQoJGFycmF5KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYXJyYXk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG1peGVkICRzZWxlY3QNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHdoZXJlDQogICAgICogQHBhcmFtIG1peGVkICRvcmRlcg0KICAgICAqIEBwYXJhbSBtaXhlZCAkbGltaXQNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9wdGlvbg0KICAgICAqIEBwYXJhbSBtaXhlZCAkcmVhZHRhZ3MNCiAgICAgKg0KICAgICAqIEByZXR1cm4gUG9zdFtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldEFydGljbGVMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCwgJHJlYWR0YWdzID0gdHJ1ZSkNCiAgICB7DQogICAgICAgIGlmIChlbXB0eSgkd2hlcmUpKSB7DQogICAgICAgICAgICAkd2hlcmUgPSBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzX2FycmF5KCR3aGVyZSkpIHsNCiAgICAgICAgICAgIGFycmF5X3Vuc2hpZnQoJHdoZXJlLCBhcnJheSgnPScsICdsb2dfVHlwZScsICcwJykpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzX29iamVjdCgkc2VsZWN0KSAmJiBnZXRfcGFyZW50X2NsYXNzKCRzZWxlY3QpID09ICdTUUxfX0dsb2JhbCcpIHsNCiAgICAgICAgICAgICRzcWwgPSAkc2VsZWN0LT5zcWw7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGhpcy0+dGFibGVbJ1Bvc3QnXSwgJHNlbGVjdCwgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbik7DQogICAgICAgIH0NCg0KDQogICAgICAgIC8qKiBAdmFyIFBvc3RbXSAkYXJyYXkgKi8NCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCdQb3N0JywgJHNxbCwgJG9wdGlvbik7DQogICAgICAgIGlmIChpc3NldCgkb3B0aW9uWydwYWdlYmFyJ10pICYmIGlzX29iamVjdCgkb3B0aW9uWydwYWdlYmFyJ10pKSB7DQogICAgICAgICAgICAkb3B0aW9uWydwYWdlYmFyJ10tPkN1cnJlbnRDb3VudCA9IGNvdW50KCRhcnJheSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHJlYWR0YWdzKSB7DQogICAgICAgICAgICAkdGFnc3RyaW5nID0gJyc7DQogICAgICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGEpIHsNCiAgICAgICAgICAgICAgICAkdGFnc3RyaW5nIC49ICRhLT5UYWc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkdGhpcy0+TG9hZFRhZ3NCeUlEU3RyaW5nKCR0YWdzdHJpbmcpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFBvc3RbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQYWdlTGlzdCgkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoZW1wdHkoJHdoZXJlKSkgew0KICAgICAgICAgICAgJHdoZXJlID0gYXJyYXkoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNfYXJyYXkoJHdoZXJlKSkgew0KICAgICAgICAgICAgYXJyYXlfdW5zaGlmdCgkd2hlcmUsIGFycmF5KCc9JywgJ2xvZ19UeXBlJywgJzEnKSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRzZWxlY3QpICYmIGdldF9wYXJlbnRfY2xhc3MoJHNlbGVjdCkgPT0gJ1NRTF9fR2xvYmFsJykgew0KICAgICAgICAgICAgJHNxbCA9ICRzZWxlY3QtPnNxbDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnUG9zdCddLCAkc2VsZWN0LCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qKiBAdmFyIFBvc3RbXSAkYXJyYXkgKi8NCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCdQb3N0JywgJHNxbCk7DQogICAgICAgIGlmIChpc3NldCgkb3B0aW9uWydwYWdlYmFyJ10pICYmIGlzX29iamVjdCgkb3B0aW9uWydwYWdlYmFyJ10pKSB7DQogICAgICAgICAgICAkb3B0aW9uWydwYWdlYmFyJ10tPkN1cnJlbnRDb3VudCA9IGNvdW50KCRhcnJheSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGFycmF5Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBtaXhlZCAkc2VsZWN0DQogICAgICogQHBhcmFtIG1peGVkICR3aGVyZQ0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3JkZXINCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGxpbWl0DQogICAgICogQHBhcmFtIG1peGVkICRvcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQ29tbWVudFtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENvbW1lbnRMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChpc19vYmplY3QoJHNlbGVjdCkgJiYgZ2V0X3BhcmVudF9jbGFzcygkc2VsZWN0KSA9PSAnU1FMX19HbG9iYWwnKSB7DQogICAgICAgICAgICAkc3FsID0gJHNlbGVjdC0+c3FsOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydDb21tZW50J10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyoqIEB2YXIgQ29tbWVudFtdICRhcnJheSAqLw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ0NvbW1lbnQnLCAkc3FsKTsNCiAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bJ3BhZ2ViYXInXSkgJiYgaXNfb2JqZWN0KCRvcHRpb25bJ3BhZ2ViYXInXSkpIHsNCiAgICAgICAgICAgICRvcHRpb25bJ3BhZ2ViYXInXS0+Q3VycmVudENvdW50ID0gY291bnQoJGFycmF5KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYXJyYXk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG1peGVkICRzZWxlY3QNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHdoZXJlDQogICAgICogQHBhcmFtIG1peGVkICRvcmRlcg0KICAgICAqIEBwYXJhbSBtaXhlZCAkbGltaXQNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBNZW1iZXJbXXxCYXNlW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TWVtYmVyTGlzdCgkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRzZWxlY3QpICYmIGdldF9wYXJlbnRfY2xhc3MoJHNlbGVjdCkgPT0gJ1NRTF9fR2xvYmFsJykgew0KICAgICAgICAgICAgJHNxbCA9ICRzZWxlY3QtPnNxbDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnTWVtYmVyJ10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCdNZW1iZXInLCAkc3FsKTsNCiAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bJ3BhZ2ViYXInXSkgJiYgaXNfb2JqZWN0KCRvcHRpb25bJ3BhZ2ViYXInXSkpIHsNCiAgICAgICAgICAgICRvcHRpb25bJ3BhZ2ViYXInXS0+Q3VycmVudENvdW50ID0gY291bnQoJGFycmF5KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYXJyYXk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG1peGVkICRzZWxlY3QNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHdoZXJlDQogICAgICogQHBhcmFtIG1peGVkICRvcmRlcg0KICAgICAqIEBwYXJhbSBtaXhlZCAkbGltaXQNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBUYWdbXXxCYXNlW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0VGFnTGlzdCgkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRzZWxlY3QpICYmIGdldF9wYXJlbnRfY2xhc3MoJHNlbGVjdCkgPT0gJ1NRTF9fR2xvYmFsJykgew0KICAgICAgICAgICAgJHNxbCA9ICRzZWxlY3QtPnNxbDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnVGFnJ10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCdUYWcnLCAkc3FsKTsNCiAgICAgICAgaWYgKGlzc2V0KCRvcHRpb25bJ3BhZ2ViYXInXSkgJiYgaXNfb2JqZWN0KCRvcHRpb25bJ3BhZ2ViYXInXSkpIHsNCiAgICAgICAgICAgICRvcHRpb25bJ3BhZ2ViYXInXS0+Q3VycmVudENvdW50ID0gY291bnQoJGFycmF5KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYXJyYXk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG1peGVkICRzZWxlY3QNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHdoZXJlDQogICAgICogQHBhcmFtIG1peGVkICRvcmRlcg0KICAgICAqIEBwYXJhbSBtaXhlZCAkbGltaXQNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeVtdfEJhc2VbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRDYXRlZ29yeUxpc3QoJHNlbGVjdCA9IG51bGwsICR3aGVyZSA9IG51bGwsICRvcmRlciA9IG51bGwsICRsaW1pdCA9IG51bGwsICRvcHRpb24gPSBudWxsKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX29iamVjdCgkc2VsZWN0KSAmJiBnZXRfcGFyZW50X2NsYXNzKCRzZWxlY3QpID09ICdTUUxfX0dsb2JhbCcpIHsNCiAgICAgICAgICAgICRzcWwgPSAkc2VsZWN0LT5zcWw7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGhpcy0+dGFibGVbJ0NhdGVnb3J5J10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCdDYXRlZ29yeScsICRzcWwpOw0KICAgICAgICBpZiAoaXNzZXQoJG9wdGlvblsncGFnZWJhciddKSAmJiBpc19vYmplY3QoJG9wdGlvblsncGFnZWJhciddKSkgew0KICAgICAgICAgICAgJG9wdGlvblsncGFnZWJhciddLT5DdXJyZW50Q291bnQgPSBjb3VudCgkYXJyYXkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1vZHVsZVtdfEJhc2VbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRNb2R1bGVMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChpc19vYmplY3QoJHNlbGVjdCkgJiYgZ2V0X3BhcmVudF9jbGFzcygkc2VsZWN0KSA9PSAnU1FMX19HbG9iYWwnKSB7DQogICAgICAgICAgICAkc3FsID0gJHNlbGVjdC0+c3FsOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydNb2R1bGUnXSwgJHNlbGVjdCwgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbik7DQogICAgICAgIH0NCg0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ01vZHVsZScsICRzcWwpOw0KICAgICAgICBpZiAoaXNzZXQoJG9wdGlvblsncGFnZWJhciddKSAmJiBpc19vYmplY3QoJG9wdGlvblsncGFnZWJhciddKSkgew0KICAgICAgICAgICAgJG9wdGlvblsncGFnZWJhciddLT5DdXJyZW50Q291bnQgPSBjb3VudCgkYXJyYXkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFVwbG9hZFtdfEJhc2VbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRVcGxvYWRMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChpc19vYmplY3QoJHNlbGVjdCkgJiYgZ2V0X3BhcmVudF9jbGFzcygkc2VsZWN0KSA9PSAnU1FMX19HbG9iYWwnKSB7DQogICAgICAgICAgICAkc3FsID0gJHNlbGVjdC0+c3FsOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydVcGxvYWQnXSwgJHNlbGVjdCwgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbik7DQogICAgICAgIH0NCg0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ1VwbG9hZCcsICRzcWwpOw0KICAgICAgICBpZiAoaXNzZXQoJG9wdGlvblsncGFnZWJhciddKSAmJiBpc19vYmplY3QoJG9wdGlvblsncGFnZWJhciddKSkgew0KICAgICAgICAgICAgJG9wdGlvblsncGFnZWJhciddLT5DdXJyZW50Q291bnQgPSBjb3VudCgkYXJyYXkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROaVsOe7hOiOt+WPluaWh+eroOWunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBtaXhlZFtdICRhcnJheQ0KICAgICAqDQogICAgICogQHJldHVybiBQb3N0W118QmFzZVtdIFBvc3RzDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RCeUFycmF5KCRhcnJheSwgJGZpZWxkX25hbWUgPSAnSUQnKQ0KICAgIHsNCiAgICAgICAgJHBvc3RzID0gJHRoaXMtPkdldExpc3RUeXBlQnlBcnJheSgnUG9zdCcsICRhcnJheSwgJGZpZWxkX25hbWUpOw0KDQogICAgICAgIHJldHVybiAkcG9zdHM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTmlbDnu4Tojrflj5bor4Torrrlrp7kvosuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENvbW1lbnRCeUFycmF5KCRhcnJheSwgJGZpZWxkX25hbWUgPSAnSUQnKQ0KICAgIHsNCiAgICAgICAgJHBvc3RzID0gJHRoaXMtPkdldExpc3RUeXBlQnlBcnJheSgnQ29tbWVudCcsICRhcnJheSwgJGZpZWxkX25hbWUpOw0KDQogICAgICAgIHJldHVybiAkcG9zdHM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTmlbDnu4Tojrflj5ZNZW1iZXLlrp7kvosuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1lbWJlckJ5QXJyYXkoJGFycmF5LCAkZmllbGRfbmFtZSA9ICdJRCcpDQogICAgew0KICAgICAgICAkcG9zdHMgPSAkdGhpcy0+R2V0TGlzdFR5cGVCeUFycmF5KCdNZW1iZXInLCAkYXJyYXksICRmaWVsZF9uYW1lKTsNCg0KICAgICAgICByZXR1cm4gJHBvc3RzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0lE5pWw57uE6I635Y+WQ2F0ZWdvcnnlrp7kvosuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlBcnJheSgkYXJyYXksICRmaWVsZF9uYW1lID0gJ0lEJykNCiAgICB7DQogICAgICAgICRwb3N0cyA9ICR0aGlzLT5HZXRMaXN0VHlwZUJ5QXJyYXkoJ0NhdGVnb3J5JywgJGFycmF5LCAkZmllbGRfbmFtZSk7DQoNCiAgICAgICAgcmV0dXJuICRwb3N0czsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROaVsOe7hOiOt+WPllRhZ+WunuS+iy4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0VGFnQnlBcnJheSgkYXJyYXksICRmaWVsZF9uYW1lID0gJ0lEJykNCiAgICB7DQogICAgICAgICRwb3N0cyA9ICR0aGlzLT5HZXRMaXN0VHlwZUJ5QXJyYXkoJ1RhZycsICRhcnJheSwgJGZpZWxkX25hbWUpOw0KDQogICAgICAgIHJldHVybiAkcG9zdHM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTmlbDnu4Tojrflj5ZNb2R1bGXlrp7kvosuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1vZHVsZUJ5QXJyYXkoJGFycmF5LCAkZmllbGRfbmFtZSA9ICdJRCcpDQogICAgew0KICAgICAgICAkcG9zdHMgPSAkdGhpcy0+R2V0TGlzdFR5cGVCeUFycmF5KCdNb2R1bGUnLCAkYXJyYXksICRmaWVsZF9uYW1lKTsNCg0KICAgICAgICByZXR1cm4gJHBvc3RzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0lE5pWw57uE6I635Y+WVXBsb2Fk5a6e5L6LLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRVcGxvYWRCeUFycmF5KCRhcnJheSwgJGZpZWxkX25hbWUgPSAnSUQnKQ0KICAgIHsNCiAgICAgICAgJHBvc3RzID0gJHRoaXMtPkdldExpc3RUeXBlQnlBcnJheSgnVXBsb2FkJywgJGFycmF5LCAkZmllbGRfbmFtZSk7DQoNCiAgICAgICAgcmV0dXJuICRwb3N0czsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHNxbA0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRfcmVzdWx0cygkc3FsKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5kYi0+UXVlcnkoJHNxbCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qC55o2u5Yir5ZCN5b6X5Yiw55u45bqU5pWw5o2uLg0KICAgICAqDQogICAgICogQHBhcmFtIEJhc2VbXXxzdHJpbmcgJiRvYmplY3QgICDnvJPlrZjlr7nosaENCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAgICAkY2xhc3NOYW1lDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgICAgJHZhbA0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICAgICRiYWNrQXR0ciAg5oyH5a6a5a2X5q6177yM5aaC5p6c5Li6bnVsbO+8jOWwseeUqG9wdGlvblsnWkNfQUxJQVNfQkFDS19BVFRSJ10NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZXxudWxsDQogICAgICovDQogICAgcHJpdmF0ZSBmdW5jdGlvbiBHZXRTb21lVGhpbmdCeUFsaWFzT3JOYW1lKCRvYmplY3QsICRjbGFzc05hbWUsICR2YWwsICRiYWNrQXR0ciA9IG51bGwpDQogICAgew0KICAgICAgICAkcmV0ID0gJHRoaXMtPkdldFNvbWVUaGluZygkb2JqZWN0LCAnQWxpYXMnLCAkdmFsLCAkY2xhc3NOYW1lKTsNCg0KICAgICAgICBpZiAoIWlzX251bGwoJHJldCkpIHsNCiAgICAgICAgICAgIHJldHVybiAkcmV0Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYgKGlzX251bGwoJGJhY2tBdHRyKSkgew0KICAgICAgICAgICAgICAgICRiYWNrQXR0ciA9ICR0aGlzLT5vcHRpb25bJ1pDX0FMSUFTX0JBQ0tfQVRUUiddOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygkb2JqZWN0LCAkYmFja0F0dHIsICR2YWwsICRjbGFzc05hbWUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qC55o2uSUTlvpfliLDnm7jlupTmlbDmja4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gQmFzZVtdICAgICAmJG9iamVjdCAgIOe8k+WtmOWvueixoQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICRjbGFzc05hbWUg5om+5LiN5YiwSUTml7bliJ3lp4vljJblr7nosaHnmoTnsbvlkI0NCiAgICAgKiBAcGFyYW0gaW50fHN0cmluZyAkaWQgICAgICAgIOS4juatpOexu+ebuOWFs+eahElEDQogICAgICoNCiAgICAgKiBAcmV0dXJuIEJhc2V8bnVsbA0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gR2V0U29tZVRoaW5nQnlJZCgmJG9iamVjdCwgJGNsYXNzTmFtZSwgJGlkKQ0KICAgIHsNCiAgICAgICAgaWYgKGVtcHR5KCRpZCkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCRpZCwgJG9iamVjdCkpIHsNCiAgICAgICAgICAgIHJldHVybiAkb2JqZWN0WyRpZF07DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkcCA9IG5ldyAkY2xhc3NOYW1lKCk7DQogICAgICAgICAgICBpZiAoJHAtPkxvYWRJbmZvQnlJRCgkaWQpKSB7DQogICAgICAgICAgICAgICAgaWYgKGlzX3N1YmNsYXNzX29mKCRjbGFzc05hbWUsICdCYXNlUG9zdCcpID09IHRydWUpIHsNCiAgICAgICAgICAgICAgICAgICAgJG5ld3R5cGUgPSAkdGhpcy0+R2V0UG9zdFR5cGVfQ2xhc3NOYW1lKCRwLT5UeXBlKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRuZXd0eXBlICE9ICRjbGFzc05hbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRwID0gJHAtPkNsb25lZCh0cnVlLCAkbmV3dHlwZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJHRoaXMtPkFkZENhY2hlKCRwKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICRwOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qC55o2u5bGe5oCn5YC85b6X5Yiw55u45bqU5pWw5o2uLg0KICAgICAqDQogICAgICogQHBhcmFtIEJhc2VbXSAmJG9iamVjdCDnvJPlrZjlr7nosaENCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAgICAkY2xhc3NOYW1lIOWvueixoeacquaJvuWIsOaXtu+8jOWIneWni+WMluexu+WQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGF0dHIgICAg5bGe5oCn5ZCNDQogICAgICogQHBhcmFtIG1peGVkICAkdmFsICAgICDopoHmn6Xmib7nmoTlgLwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbA0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gR2V0U29tZVRoaW5nQnlBdHRyKCYkb2JqZWN0LCAkY2xhc3NOYW1lLCAkYXR0ciwgJHZhbCkNCiAgICB7DQogICAgICAgICRjYWNoZU9iamVjdCA9IG51bGw7DQogICAgICAgIGlmIChpc19hcnJheSgkb2JqZWN0KSkgew0KICAgICAgICAgICAgJGNhY2hlT2JqZWN0ID0gJiRvYmplY3Q7DQogICAgICAgIH0gZWxzZWlmICgkY2xhc3NOYW1lICE9ICcnKSB7DQogICAgICAgICAgICAkY2FjaGVPYmplY3QgPSAmJHRoaXMtPkdldENhY2hlKCRjbGFzc05hbWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy/lpoLmnpzmmK/lpJrph43lsZ7mgKflkozlgLzmn6Xor6INCiAgICAgICAgaWYgKGlzX2FycmF5KCRhdHRyKSAmJiBpc19hcnJheSgkdmFsKSkgew0KICAgICAgICAgICAgJHZhbDEgPSB0cmltKCR2YWxbMF0pOw0KICAgICAgICAgICAgJHZhbDIgPSB0cmltKCR2YWxbMV0pOw0KICAgICAgICAgICAgJHZhbDMgPSBpc3NldCgkdmFsWzJdKSA/ICR2YWxbMl0gOiBudWxsOw0KICAgICAgICAgICAgJGF0dHIxID0gJGF0dHJbMF07DQogICAgICAgICAgICAkYXR0cjIgPSAkYXR0clsxXTsNCiAgICAgICAgICAgICRhdHRyMyA9IGlzc2V0KCRhdHRyWzJdKSA/ICRhdHRyWzJdIDogbnVsbDsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRjYWNoZU9iamVjdCBhcyAka2V5ID0+ICYkdmFsdWUpIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNfbnVsbCgkdmFsdWUpKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoJGF0dHIzICE9PSBudWxsICYmICR2YWx1ZS0+JGF0dHIxID09ICR2YWwxICYmICR2YWx1ZS0+JGF0dHIyID09ICR2YWwyICYmICR2YWx1ZS0+JGF0dHIzID09ICR2YWwzKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdmFsdWU7DQogICAgICAgICAgICAgICAgfSBlbHNlaWYgKCR2YWx1ZS0+JGF0dHIxID09ICR2YWwxICYmICR2YWx1ZS0+JGF0dHIyID09ICR2YWwyKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdmFsdWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHZhbCA9IHRyaW0oJHZhbCk7DQogICAgICAgICAgICBmb3JlYWNoICgkY2FjaGVPYmplY3QgYXMgJGtleSA9PiAmJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgaWYgKGlzX251bGwoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKCR2YWx1ZS0+JGF0dHIgPT0gJHZhbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHZhbHVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluaVsOaNrumAmueUqOWHveaVsC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBCYXNlW118c3RyaW5nICRvYmplY3QgICAg57yT5a2Y5a+56LGh77yIc3RyaW5nIC8gb2JqZWN077yJDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgICAgJGF0dHIgICAgICDmrLLmn6Xmib7nmoTlsZ7mgKcNCiAgICAgKiBAcGFyYW0gbWl4ZWQgICAgICAgICAkdmFsICAgICAgIOimgeafpeaJvuWGheWuuQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICAgICRjbGFzc05hbWUg5a+56LGh5pyq5om+5Yiw5pe277yM5Yid5aeL5YyW57G75ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIEJhc2V8bnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRTb21lVGhpbmcoJG9iamVjdCwgJGF0dHIsICR2YWwsICRjbGFzc05hbWUpDQogICAgew0KICAgICAgICAkY2FjaGVPYmplY3QgPSBudWxsOw0KICAgICAgICBpZiAoaXNfYXJyYXkoJG9iamVjdCkpIHsNCiAgICAgICAgICAgICRjYWNoZU9iamVjdCA9ICYkb2JqZWN0Ow0KICAgICAgICB9IGVsc2VpZiAocHJvcGVydHlfZXhpc3RzKCR0aGlzLCAkb2JqZWN0KSkgew0KICAgICAgICAgICAgJGNhY2hlT2JqZWN0ID0gJiR0aGlzLT4kb2JqZWN0Ow0KICAgICAgICB9IGVsc2VpZiAoJGNsYXNzTmFtZSAhPSAnJykgew0KICAgICAgICAgICAgJGNhY2hlT2JqZWN0ID0gJiR0aGlzLT5HZXRDYWNoZSgkY2xhc3NOYW1lKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJGF0dHIgPT0gJ0lEJykgew0KICAgICAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmdCeUlkKCRjYWNoZU9iamVjdCwgJGNsYXNzTmFtZSwgJHZhbCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkcmV0ID0gJHRoaXMtPkdldFNvbWVUaGluZ0J5QXR0cigkY2FjaGVPYmplY3QsICRjbGFzc05hbWUsICRhdHRyLCAkdmFsKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJHJldCA9PT0gbnVsbCAmJiAhaXNfbnVsbCgkY2xhc3NOYW1lKSkgew0KICAgICAgICAgICAgLyoqIEB2YXIgQmFzZSAkcmV0ICovDQogICAgICAgICAgICAkcmV0ID0gbmV3ICRjbGFzc05hbWUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkcmV0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0lE6I635Y+W5paH56ug5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIGludCAkaWQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gUG9zdHxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RCeUlEKCRpZCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0U29tZVRoaW5nKCR0aGlzLT5HZXRDYWNoZSgnUG9zdCcpLCAnSUQnLCAkaWQsICdQb3N0Jyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTojrflj5bliIbnsbvlrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gaW50ICRpZA0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeXxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlJRCgkaWQpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygkdGhpcy0+R2V0Q2FjaGUoJ0NhdGVnb3J5JyksICdJRCcsICRpZCwgJ0NhdGVnb3J5Jyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H5YiG57G75ZCN6I635Y+W5YiG57G75a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeXxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlOYW1lKCRuYW1lLCAkdHlwZSA9IDApDQogICAgew0KICAgICAgICBpZiAoJHR5cGUgPT09IG51bGwpIHsNCiAgICAgICAgICAgICRjYXRlZ29yeXMgPSAmJHRoaXMtPmNhdGVnb3JpZXNfYWxsOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJGNhdGVnb3J5cyA9ICYkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskdHlwZV07DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJGNhdGVnb3J5cyBhcyAka2V5ID0+ICRjKSB7DQogICAgICAgICAgICBpZiAoJG5hbWUgPT0gJGMtPk5hbWUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJGM7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5ldyBDYXRlZ29yeTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4fliIbnsbvliKvlkI3ojrflj5bliIbnsbvlrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIG51bGwgICAkYmFja0tleQ0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeXxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlBbGlhcygkbmFtZSwgJHR5cGUgPSAwKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0eXBlID09PSBudWxsKSB7DQogICAgICAgICAgICAkY2F0ZWdvcnlzID0gJiR0aGlzLT5jYXRlZ29yaWVzX2FsbDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRjYXRlZ29yeXMgPSAmJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyX3R5cGVbJHR5cGVdOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRjYXRlZ29yeXMgYXMgJGtleSA9PiAkYykgew0KICAgICAgICAgICAgaWYgKCRuYW1lID09ICRjLT5BbGlhcykgew0KICAgICAgICAgICAgICAgIHJldHVybiAkYzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbmV3IENhdGVnb3J5Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS4juiAgeeJiOacrOS/neaMgeWFvOWuueWHveaVsC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQ2F0ZWdvcnkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0Q2F0ZWdvcnlCeUFsaWFzT3JOYW1lKCRuYW1lLCAkdHlwZSA9IDApDQogICAgew0KICAgICAgICBpZiAoJHR5cGUgPT09IG51bGwpIHsNCiAgICAgICAgICAgICRjYXRlZ29yeXMgPSAmJHRoaXMtPmNhdGVnb3JpZXNfYWxsOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJGNhdGVnb3J5cyA9ICYkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskdHlwZV07DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJGNhdGVnb3J5cyBhcyAka2V5ID0+ICRjKSB7DQogICAgICAgICAgICBpZiAoJG5hbWUgPT0gJGMtPkFsaWFzIHx8ICRuYW1lID09ICRjLT5OYW1lKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICRjOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBuZXcgQ2F0ZWdvcnk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTojrflj5bmqKHlnZflrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gaW50ICRpZA0KICAgICAqDQogICAgICogQHJldHVybiBNb2R1bGV8QmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRNb2R1bGVCeUlEKCRpZCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0U29tZVRoaW5nKCR0aGlzLT5HZXRDYWNoZSgnTW9kdWxlJyksICdJRCcsICRpZCwgJ01vZHVsZScpOyAvLyBXaGF0IHRoZSBmdWNrPw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0ZpbGVOYW1l6I635Y+W5qih5Z2X5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkZm4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gTW9kdWxlfEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TW9kdWxlQnlGaWxlTmFtZSgkZm4pDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygnbW9kdWxlc2J5ZmlsZW5hbWUnLCAnRmlsZU5hbWUnLCAkZm4sICdNb2R1bGUnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPlueUqOaIt+WunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcnxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1lbWJlckJ5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgLyoqIEB2YXIgTWVtYmVyICRyZXQgKi8NCiAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmcoJHRoaXMtPkdldENhY2hlKCdNZW1iZXInKSwgJ0lEJywgJGlkLCAnTWVtYmVyJyk7DQogICAgICAgIGlmICgkcmV0LT5JRCA9PSBudWxsKSB7DQogICAgICAgICAgICAkcmV0LT5HdWlkID0gR2V0R3VpZCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRyZXQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H55So5oi35ZCN6I635Y+W55So5oi35a6e5L6LKOS4jeWMuuWIhuWkp+Wwj+WGmSkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcnxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1lbWJlckJ5TmFtZSgkbmFtZSkNCiAgICB7DQogICAgICAgICRuYW1lID0gdHJpbSgkbmFtZSk7DQogICAgICAgIGlmICghJG5hbWUgfHwgIUNoZWNrUmVnRXhwKCRuYW1lLCAnW3VzZXJuYW1lXScpKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IE1lbWJlcigpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5tZW1iZXJzYnluYW1lWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+bWVtYmVyc2J5bmFtZVskbmFtZV07DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkYXJyYXkgPSBhcnJheV9rZXlzKCR0aGlzLT5tZW1iZXJzYnluYW1lKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkayA9PiAkdikgew0KICAgICAgICAgICAgICAgIGlmIChzdHJjYXNlY21wKCRuYW1lLCAkdikgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPm1lbWJlcnNieW5hbWVbJHZdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRsaWtlID0gKCR0aGlzLT5kYi0+dHlwZSA9PSAncGdzcWwnKSA/ICdJTElLRScgOiAnTElLRSc7DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnTWVtYmVyJ10sICcqJywgYXJyYXkoYXJyYXkoJGxpa2UsICdtZW1fTmFtZScsICRuYW1lKSksIGFycmF5KCdtZW1fSUQnID0+ICdBU0MnKSwgMSwgbnVsbCk7DQoNCiAgICAgICAgLyoqIEB2YXIgTWVtYmVyW10gJGFtICovDQogICAgICAgICRhbSA9ICR0aGlzLT5HZXRMaXN0VHlwZSgnTWVtYmVyJywgJHNxbCk7DQogICAgICAgIGlmIChjb3VudCgkYW0pID4gMCkgew0KICAgICAgICAgICAgJG0gPSAkYW1bMF07DQoNCiAgICAgICAgICAgIHJldHVybiAkbTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBuZXcgTWVtYmVyKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H6I635Y+W55So5oi35ZCN5oiW5Yir5ZCN5a6e5L6LKOS4jeWMuuWIhuWkp+Wwj+WGmSkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcnxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1lbWJlckJ5TmFtZU9yQWxpYXMoJG5hbWUpDQogICAgew0KICAgICAgICAkbmFtZSA9IHRyaW0oJG5hbWUpOw0KICAgICAgICBpZiAoISRuYW1lIHx8ICEoQ2hlY2tSZWdFeHAoJG5hbWUsICdbdXNlcm5hbWVdJykgfHwgQ2hlY2tSZWdFeHAoJG5hbWUsICdbbmlja25hbWVdJykpKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IE1lbWJlcigpOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yZWFjaCAoJHRoaXMtPm1lbWJlcnMgYXMgJGtleSA9PiAmJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoc3RyY2FzZWNtcCgkdmFsdWUtPk5hbWUsICRuYW1lKSA9PSAwIHx8IHN0cmNhc2VjbXAoJHZhbHVlLT5BbGlhcywgJG5hbWUpID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHZhbHVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJGxpa2UgPSAoJHRoaXMtPmRiLT50eXBlID09ICdwZ3NxbCcpID8gJ0lMSUtFJyA6ICdMSUtFJzsNCg0KICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPmdldCgpLT5zZWxlY3QoJHRoaXMtPnRhYmxlWydNZW1iZXInXSktPndoZXJlKA0KICAgICAgICAgICAgYXJyYXkoDQogICAgICAgICAgICAgICAgIiRsaWtlIGFycmF5IiwgYXJyYXkoDQogICAgICAgICAgICAgICAgICAgIGFycmF5KCdtZW1fTmFtZScsICRuYW1lKSwNCiAgICAgICAgICAgICAgICAgICAgYXJyYXkoJ21lbV9BbGlhcycsICRuYW1lKSwNCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICApDQogICAgICAgICktPm9yZGVyQnkoYXJyYXkoJ21lbV9JRCcgPT4gJ2FzYycpKS0+bGltaXQoMSktPnNxbDsNCg0KICAgICAgICAvKiogQHZhciBNZW1iZXJbXSAkYW0gKi8NCiAgICAgICAgJGFtID0gJHRoaXMtPkdldExpc3RUeXBlKCdNZW1iZXInLCAkc3FsKTsNCiAgICAgICAgaWYgKGNvdW50KCRhbSkgPiAwKSB7DQogICAgICAgICAgICAkbSA9ICRhbVswXTsNCg0KICAgICAgICAgICAgcmV0dXJuICRtOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIG5ldyBNZW1iZXIoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4fojrflj5bnlKjmiLfnmoTliKvlkI3nmoTlrp7kvoso5LiN5Yy65YiG5aSn5bCP5YaZKS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gTWVtYmVyfEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TWVtYmVyQnlBbGlhcygkbmFtZSkNCiAgICB7DQogICAgICAgICRuYW1lID0gdHJpbSgkbmFtZSk7DQogICAgICAgIGlmICghJG5hbWUgfHwgIShDaGVja1JlZ0V4cCgkbmFtZSwgJ1tuaWNrbmFtZV0nKSkpIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgTWVtYmVyKCk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+bWVtYmVycyBhcyAka2V5ID0+ICYkdmFsdWUpIHsNCiAgICAgICAgICAgIGlmIChzdHJjYXNlY21wKCR2YWx1ZS0+QWxpYXMsICRuYW1lKSA9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICR2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRsaWtlID0gKCR0aGlzLT5kYi0+dHlwZSA9PSAncGdzcWwnKSA/ICdJTElLRScgOiAnTElLRSc7DQoNCiAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5nZXQoKS0+c2VsZWN0KCR0aGlzLT50YWJsZVsnTWVtYmVyJ10pLT53aGVyZSgNCiAgICAgICAgICAgIGFycmF5KA0KICAgICAgICAgICAgICAgIGFycmF5KCc9JywgJ21lbV9BbGlhcycsICRuYW1lKQ0KICAgICAgICAgICAgKQ0KICAgICAgICApLT5vcmRlckJ5KGFycmF5KCdtZW1fSUQnID0+ICdhc2MnKSktPmxpbWl0KDEpLT5zcWw7DQoNCiAgICAgICAgLyoqIEB2YXIgTWVtYmVyW10gJGFtICovDQogICAgICAgICRhbSA9ICR0aGlzLT5HZXRMaXN0VHlwZSgnTWVtYmVyJywgJHNxbCk7DQogICAgICAgIGlmIChjb3VudCgkYW0pID4gMCkgew0KICAgICAgICAgICAgJG0gPSAkYW1bMF07DQoNCiAgICAgICAgICAgIHJldHVybiAkbTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBuZXcgTWVtYmVyKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H6YKu566x5ZCN6I635Y+W55So5oi35a6e5L6LKOS4jeWMuuWIhuWkp+Wwj+WGmSkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRlbWFpbA0KICAgICAqDQogICAgICogQHJldHVybiBNZW1iZXINCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TWVtYmVyQnlFbWFpbCgkZW1haWwpDQogICAgew0KICAgICAgICAkZW1haWwgPSBzdHJ0b2xvd2VyKHRyaW0oJGVtYWlsKSk7DQogICAgICAgIGlmICghJGVtYWlsIHx8ICFDaGVja1JlZ0V4cCgkZW1haWwsICdbZW1haWxdJykpIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgTWVtYmVyKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGhpcy0+dGFibGVbJ01lbWJlciddLCAnKicsIGFycmF5KGFycmF5KCdMSUtFJywgJ21lbV9FbWFpbCcsICRlbWFpbCkpLCBudWxsLCAxLCBudWxsKTsNCiAgICAgICAgLyoqIEB2YXIgTWVtYmVyW10gJGFtICovDQogICAgICAgICRhbSA9ICR0aGlzLT5HZXRMaXN0VHlwZSgnTWVtYmVyJywgJHNxbCk7DQogICAgICAgIGlmIChjb3VudCgkYW0pID4gMCkgew0KICAgICAgICAgICAgJG0gPSAkYW1bMF07DQoNCiAgICAgICAgICAgIHJldHVybiAkbTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBuZXcgTWVtYmVyKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5p+l5oyH5a6a5ZCN56ew55qE55So5oi35piv5ZCm5a2Y5ZyoKOS4jeWMuuWIhuWkp+Wwj+WGmSkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gJG5hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja01lbWJlck5hbWVFeGlzdCgkbmFtZSkNCiAgICB7DQogICAgICAgICRtID0gJHRoaXMtPkdldE1lbWJlckJ5TmFtZSgkbmFtZSk7DQoNCiAgICAgICAgcmV0dXJuICRtLT5JRCAhPSBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeaMh+WumuWQjeensOaIluWIq+WQjeeahOeUqOaIt+aYr+WQpuWtmOWcqCjkuI3ljLrliIblpKflsI/lhpkpLg0KICAgICAqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tNZW1iZXJCeU5hbWVPckFsaWFzRXhpc3QoJG5hbWUpDQogICAgew0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWVPckFsaWFzKCRuYW1lKTsNCg0KICAgICAgICByZXR1cm4gJG0tPklEID4gMDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmo4Dmn6XmjIflrprpgq7nrrHnmoTnlKjmiLfmmK/lkKblrZjlnKgo5LiN5Yy65YiG5aSn5bCP5YaZKS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkZW1haWwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja01lbWJlckJ5RW1haWxFeGlzdCgkZW1haWwpDQogICAgew0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeUVtYWlsKCRlbWFpbCk7DQoNCiAgICAgICAgcmV0dXJuICRtLT5JRCA+IDA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTojrflj5bor4Torrrlrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gaW50ICRpZA0KICAgICAqDQogICAgICogQHJldHVybiBDb21tZW50fEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0Q29tbWVudEJ5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmcoJHRoaXMtPkdldENhY2hlKCdDb21tZW50JyksICdJRCcsICRpZCwgJ0NvbW1lbnQnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPlumZhOS7tuWunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFVwbG9hZHxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFVwbG9hZEJ5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmcoJHRoaXMtPkdldENhY2hlKCdVcGxvYWQnKSwgJ0lEJywgJGlkLCAnVXBsb2FkJyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HdGFn5Yir5ZCN6I635Y+WdGFn5a6e5L6LLijlhYjotbBjYWNoZW9iamVjdOWGjei1sOafpeaVsOaNruW6kykNCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKiBAcGFyYW0gbnVsbCAgICRiYWNrS2V5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIFRhZ3xCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFRhZ0J5QWxpYXMoJG5hbWUsICR0eXBlID0gMCkNCiAgICB7DQogICAgICAgICRyZXQgPSAkdGhpcy0+R2V0U29tZVRoaW5nQnlBdHRyKCR0aGlzLT50YWdzX2FsbCwgJ1RhZycsIGFycmF5KCdBbGlhcycsICdUeXBlJyksIGFycmF5KCRuYW1lLCAkdHlwZSkpOw0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRyZXQpICYmICRyZXQtPklEID49IDApIHsNCiAgICAgICAgICAgIHJldHVybiAkcmV0Ow0KICAgICAgICB9DQoNCiAgICAgICAgJGEgPSBhcnJheSgpOw0KICAgICAgICAkYVtdID0gYXJyYXkoJz0nLCAndGFnX0FsaWFzJywgJG5hbWUpOw0KICAgICAgICAkYVtdID0gYXJyYXkoJz0nLCAndGFnX1R5cGUnLCAkdHlwZSk7DQogICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRUYWdMaXN0KCcqJywgYXJyYXkoJGEpLCAnJywgMSwgJycpOw0KICAgICAgICBpZiAoY291bnQoJGFycmF5KSA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IFRhZygpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuICRhcnJheVswXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h3RhZ+WQjeiOt+WPlnRhZ+WunuS+iy4o5YWI6LWwY2FjaGVvYmplY3Tlho3otbDmn6XmlbDmja7lupMpDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIG51bGwgICAkYmFja0tleQ0KICAgICAqDQogICAgICogQHJldHVybiBUYWd8QmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRUYWdCeU5hbWUoJG5hbWUsICR0eXBlID0gMCkNCiAgICB7DQogICAgICAgICRyZXQgPSAkdGhpcy0+R2V0U29tZVRoaW5nQnlBdHRyKCR0aGlzLT50YWdzX2FsbCwgJ1RhZycsIGFycmF5KCdOYW1lJywgJ1R5cGUnKSwgYXJyYXkoJG5hbWUsICR0eXBlKSk7DQogICAgICAgIGlmIChpc19vYmplY3QoJHJldCkgJiYgJHJldC0+SUQgPj0gMCkgew0KICAgICAgICAgICAgcmV0dXJuICRyZXQ7DQogICAgICAgIH0NCg0KICAgICAgICAkYSA9IGFycmF5KCk7DQogICAgICAgICRhW10gPSBhcnJheSgnPScsICd0YWdfTmFtZScsICRuYW1lKTsNCiAgICAgICAgJGFbXSA9IGFycmF5KCc9JywgJ3RhZ19UeXBlJywgJHR5cGUpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0VGFnTGlzdCgnKicsIGFycmF5KCRhKSwgJycsIDEsICcnKTsNCiAgICAgICAgaWYgKGNvdW50KCRhcnJheSkgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBUYWcoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAkYXJyYXlbMF07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4d0YWfnmoTliKvlkI3miJbmmK/lkI3np7Dojrflj5Z0YWflrp7kvosuKOafpeaVsOaNruW6k+mdnui1sGNhY2hlb2JqZWN0KQ0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBUYWd8QmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRUYWdCeUFsaWFzT3JOYW1lKCRuYW1lLCAkdHlwZSA9IDApDQogICAgew0KICAgICAgICAvL3JldHVybiAkdGhpcy0+R2V0VGFnQnlBbGlhcygkbmFtZSwgJ05hbWUnKTsNCiAgICAgICAgJGEgPSBhcnJheSgpOw0KICAgICAgICAkYVtdID0gYXJyYXkoJ3RhZ19BbGlhcycsICRuYW1lKTsNCiAgICAgICAgJGFbXSA9IGFycmF5KCd0YWdfTmFtZScsICRuYW1lKTsNCiAgICAgICAgJGIgPSBhcnJheSgnPScsICd0YWdfVHlwZScsICR0eXBlKTsNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldFRhZ0xpc3QoJyonLCBhcnJheShhcnJheSgnYXJyYXknLCAkYSksICRiKSwgJycsIDEsICcnKTsNCiAgICAgICAgaWYgKGNvdW50KCRhcnJheSkgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBUYWcoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAkYXJyYXlbMF07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPlnRhZ+WunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFRhZ3xCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFRhZ0J5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmcoJHRoaXMtPkdldENhY2hlKCdUYWcnKSwgJ0lEJywgJGlkLCAnVGFnJyk7DQoNCiAgICAgICAgcmV0dXJuICRyZXQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H57G75Ly8J3sxfXsyfXszfXs0fSfovb3lhaV0YWdzLg0KICAgICAqDQogICAgICogQHBhcmFtICRzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGFycmF5DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRUYWdzQnlJRFN0cmluZygkcykNCiAgICB7DQogICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgIGlmICgkcyA9PT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHMgPSBzdHJfcmVwbGFjZSgnfXsnLCAnfCcsICRzKTsNCiAgICAgICAgJHMgPSBzdHJfcmVwbGFjZShhcnJheSgneycsICd9JyksICcnLCAkcyk7DQogICAgICAgICRhID0gZXhwbG9kZSgnfCcsICRzKTsNCiAgICAgICAgJGIgPSBhcnJheSgpOw0KICAgICAgICBmb3JlYWNoICgkYSBhcyAmJHZhbHVlKSB7DQogICAgICAgICAgICAkdmFsdWUgPSB0cmltKCR2YWx1ZSk7DQogICAgICAgICAgICBpZiAoJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgJGJbXSA9ICR2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkdCA9IGFycmF5X3VuaXF1ZSgkYik7DQoNCiAgICAgICAgaWYgKGNvdW50KCR0KSA9PT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICAkYyA9IGFycmF5KCk7DQogICAgICAgICRkID0gYXJyYXkoKTsNCiAgICAgICAgZm9yZWFjaCAoJHQgYXMgJHYpIHsNCiAgICAgICAgICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCR2LCAkdGhpcy0+dGFnc19hbGwpID09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgJGNbXSA9ICR2Ow0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkZFskdl0gPSAmJHRoaXMtPnRhZ3NfYWxsWyR2XTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjb3VudCgkYykgPT09IDApIHsNCiAgICAgICAgICAgIHJldHVybiAkZDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICR0ID0gYXJyYXkoKTsNCiAgICAgICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRUYWdMaXN0KCcnLCBhcnJheShhcnJheSgnSU4nLCAndGFnX0lEJywgJGMpKSwgJycsICcnLCAnJyk7DQogICAgICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJHYpIHsNCiAgICAgICAgICAgICAgICAkdFskdi0+SURdID0gJiR0aGlzLT50YWdzX2FsbFskdi0+SURdOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gYXJyYXlfbWVyZ2UoJGQsICR0KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h+exu+S8vCdhYWEsYmJiLGNjYyxkZGQn6L295YWldGFncy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHMg5qCH562+5ZCN5a2X56ym5Liy77yM5aaCJ2FhYSxiYmIsY2NjLGRkZA0KICAgICAqIEBwYXJhbSBpbnQgJHBvc3R0eXBlIHR5cGUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZFRhZ3NCeU5hbWVTdHJpbmcoJHMsICRwb3N0dHlwZSA9IDApDQogICAgew0KICAgICAgICAkcyA9IHRyaW0oJHMpOw0KICAgICAgICAkcyA9IHN0cl9yZXBsYWNlKGFycmF5KCc7JywgJ++8jCcsICfjgIEnKSwgJywnLCAkcyk7DQogICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgICRzID0gc3RyaXBfdGFncygkcyk7DQogICAgICAgIGlmICgkcyA9PT0gJycgfHwgJHMgPT09ICcsJykgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCiAgICAgICAgJHMgPSBleHBsb2RlKCcsJywgJHMpOw0KICAgICAgICAkdCA9IGFycmF5X3VuaXF1ZSgkcyk7DQogICAgICAgIGlmIChjb3VudCgkdCkgPT09IDApIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHVubG9hZF90YWdzID0gYXJyYXkoKTsNCiAgICAgICAgJGV4aXN0X3RhZ3MgPSBhcnJheSgpOw0KICAgICAgICBmb3JlYWNoICgkdCBhcyAkbmFtZSkgew0KICAgICAgICAgICAgJG5hbWUgPSB0cmltKCRuYW1lKTsNCiAgICAgICAgICAgIGlmIChpc3NldCgkdGhpcy0+dGFnc2J5bmFtZV90eXBlWyRwb3N0dHlwZV1bJG5hbWVdKSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgICR1bmxvYWRfdGFnc1tdID0gYXJyYXkoJ3RhZ19OYW1lJywgJG5hbWUpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkZXhpc3RfdGFnc1skbmFtZV0gPSAmJHRoaXMtPnRhZ3NieW5hbWVfdHlwZVskcG9zdHR5cGVdWyRuYW1lXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjb3VudCgkdW5sb2FkX3RhZ3MpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiAkZXhpc3RfdGFnczsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRUYWdMaXN0KCcnLCBhcnJheShhcnJheSgnPScsICd0YWdfVHlwZScsICRwb3N0dHlwZSksIGFycmF5KCdhcnJheScsICR1bmxvYWRfdGFncykpLCAnJywgJycsICcnKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkdGFnKSB7DQogICAgICAgICAgICAgICAgJGV4aXN0X3RhZ3NbJHRhZy0+TmFtZV0gPSAmJHRoaXMtPnRhZ3NieW5hbWVfdHlwZVskcG9zdHR5cGVdWyR0YWctPk5hbWVdOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuICRleGlzdF90YWdzOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H5pWw57uEYXJyYXlbMTExLDMzMyw0NDQsNTU1LDY2Nl3ovazmjaLmiJDlrZjlgqjkuLIuDQogICAgICoNCiAgICAgKiBAcGFyYW0gYXJyYXkgJGFycmF5IOagh+etvklE5pWw57uEDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDb252ZXJ0VGFnSUR0b1N0cmluZygkYXJyYXkpDQogICAgew0KICAgICAgICAkcyA9ICcnOw0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGEpIHsNCiAgICAgICAgICAgICRzIC49ICd7JyAuICRhIC4gJ30nOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRUb3BBcnRpY2xlKCR0eXBlID0gMCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0VG9wUG9zdCgkdHlwZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W5YWo6YOo572u6aG25paH56ug77yI5LyY5YWI5LuOY2FjaGXph4zor7vmlbDnu4TvvIkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gaW50ICR0eXBlDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGFycmF5DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFRvcFBvc3QoJHR5cGUgPSAwKQ0KICAgIHsNCiAgICAgICAgJHZhcm5hbWUgPSAndG9wX3Bvc3RfYXJyYXlfJyAuICR0eXBlOw0KICAgICAgICBpZiAoJHRoaXMtPmNhY2hlLT5IYXNLZXkoJHZhcm5hbWUpID09IGZhbHNlKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWlzX3N0cmluZygkdGhpcy0+Y2FjaGUtPiR2YXJuYW1lKSkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICBAJGFydGljbGVzX3RvcF9ub3RvcmRlcl9pZGFycmF5ID0gdW5zZXJpYWxpemUoJHRoaXMtPmNhY2hlLT4kdmFybmFtZSk7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGFydGljbGVzX3RvcF9ub3RvcmRlcl9pZGFycmF5KSkgew0KICAgICAgICAgICAgQ291bnRUb3BQb3N0KCR0eXBlLCBudWxsLCBudWxsKTsNCiAgICAgICAgICAgIEAkYXJ0aWNsZXNfdG9wX25vdG9yZGVyX2lkYXJyYXkgPSB1bnNlcmlhbGl6ZSgkdGhpcy0+Y2FjaGUtPiR2YXJuYW1lKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRhcnRpY2xlc190b3Bfbm90b3JkZXIgPSBhcnJheSgpOw0KICAgICAgICBpZiAoaXNfYXJyYXkoJGFydGljbGVzX3RvcF9ub3RvcmRlcl9pZGFycmF5KSkgew0KICAgICAgICAgICAgJGFydGljbGVzX3RvcF9ub3RvcmRlciA9ICR0aGlzLT5HZXRQb3N0QnlBcnJheSgkYXJ0aWNsZXNfdG9wX25vdG9yZGVyX2lkYXJyYXkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnRpY2xlc190b3Bfbm90b3JkZXI7DQogICAgfQ0KDQogICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiAgICAvL+mqjOivgeebuOWFsw0KDQogICAgLyoqDQogICAgICog6I635Y+W6K+E6K66a2V5Lg0KICAgICAqDQogICAgICogQHBhcmFtICRpZA0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0Q210S2V5KCRpZCkNCiAgICB7DQogICAgICAgIHJldHVybiBtZDUoJHRoaXMtPmd1aWQgLiAkaWQgLiBkYXRlKCdZbWRoJykpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgeivhOiuumtleS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkaWQNCiAgICAgKiBAcGFyYW0gJGtleQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZhbGlkQ210S2V5KCRpZCwgJGtleSkNCiAgICB7DQogICAgICAgICRub3drZXkgPSBtZDUoJHRoaXMtPmd1aWQgLiAkaWQgLiBkYXRlKCdZbWRoJykpOw0KICAgICAgICAkbm93a2V5MiA9IG1kNSgkdGhpcy0+Z3VpZCAuICRpZCAuIGRhdGUoJ1ltZGgnLCAodGltZSgpIC0gKDM2MDAgKiAxKSkpKTsNCg0KICAgICAgICByZXR1cm4gJGtleSA9PSAkbm93a2V5IHx8ICRrZXkgPT0gJG5vd2tleTI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+WQ1NSRiBUb2tlbi4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGlkIOW6lOeUqElE77yM5Y+v5Lul5L+d6K+B5q+P5Liq5bqU55So6I635Y+W5LiN5ZCM55qEVG9rZW4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENTUkZUb2tlbigkaWQgPSAnJykNCiAgICB7DQogICAgICAgICRvbGRab25lID0gZGF0ZV9kZWZhdWx0X3RpbWV6b25lX2dldCgpOw0KICAgICAgICBkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCR0aGlzLT5vcHRpb25bJ1pDX1RJTUVfWk9ORV9OQU1FJ10pOw0KDQogICAgICAgICR0aW1lID0gZGF0ZSgnWW1kaCcpOw0KICAgICAgICAkcyA9ICR0aGlzLT51c2VyLT5JRCAuICR0aGlzLT51c2VyLT5QYXNzd29yZCAuICR0aGlzLT51c2VyLT5TdGF0dXM7DQoNCiAgICAgICAgZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgkb2xkWm9uZSk7DQogICAgICAgIHJldHVybiBtZDUoJHRoaXMtPmd1aWQgLiAkcyAuICRpZCAuICR0aW1lKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4FDU1JGIFRva2VuLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdG9rZW4NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZCAgICDlupTnlKhJRO+8jOWPr+S4uuavj+S4quW6lOeUqOeUn+aIkOS4gOS4quS4k+WxnnRva2VuDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5Q1NSRlRva2VuKCR0b2tlbiwgJGlkID0gJycpDQogICAgew0KICAgICAgICAkb2xkWm9uZSA9IGRhdGVfZGVmYXVsdF90aW1lem9uZV9nZXQoKTsNCiAgICAgICAgZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgkdGhpcy0+b3B0aW9uWydaQ19USU1FX1pPTkVfTkFNRSddKTsNCg0KICAgICAgICAkdXNlclN0cmluZyA9ICR0aGlzLT51c2VyLT5JRCAuICR0aGlzLT51c2VyLT5QYXNzd29yZCAuICR0aGlzLT51c2VyLT5TdGF0dXM7DQogICAgICAgICR0b2tlblN0cmluZyA9ICR0aGlzLT5ndWlkIC4gJHVzZXJTdHJpbmcgLiAkaWQ7DQoNCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIDw9ICR0aGlzLT5jc3JmRXhwaXJhdGlvbjsgJGkrKykgew0KICAgICAgICAgICAgaWYgKCR0b2tlbiA9PT0gbWQ1KCR0b2tlblN0cmluZyAuIGRhdGUoJ1ltZGgnLCAodGltZSgpIC0gKDM2MDAgKiAkaSkpKSkpIHsNCiAgICAgICAgICAgICAgICBkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCRvbGRab25lKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGRhdGVfZGVmYXVsdF90aW1lem9uZV9zZXQoJG9sZFpvbmUpOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5pi+56S66aqM6K+B56CBDQogICAgICoNCiAgICAgKiBAYXBpIEZpbHRlcl9QbHVnaW5fWmJwX1Nob3dWYWxpZENvZGUg5aaC6K+l5o6l5Y+j5pyq6KKr5oyC6L295YiZ5pi+56S66buY6K6k6aqM6K+B5Zu+54mHDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZCDlkb3lkI3kuovku7YNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTaG93VmFsaWRDb2RlKCRpZCA9ICcnKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX1Nob3dWYWxpZENvZGUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgIHJldHVybiAkZnBuYW1lKCRpZCk7IC8vKg0KICAgICAgICB9DQoNCiAgICAgICAgJF92YyA9IG5ldyBWYWxpZGF0ZUNvZGUoKTsNCiAgICAgICAgJF92Yy0+R2V0SW1nKCk7DQogICAgICAgIHNldGNvb2tpZSgnY2FwdGNoYV8nIC4gY3JjMzIoJHRoaXMtPmd1aWQgLiAkaWQpLCBtZDUoJHRoaXMtPmd1aWQgLiBkYXRlKCJZbWRoIikgLiAkX3ZjLT5HZXRDb2RlKCkpLCBudWxsLCAkdGhpcy0+Y29va2llc3BhdGgpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOavlOWvuemqjOivgeeggQ0KICAgICAqDQogICAgICogQGFwaSBGaWx0ZXJfUGx1Z2luX1picF9DaGVja1ZhbGlkQ29kZSDlpoLor6XmjqXlj6PmnKrooqvmjILovb3liJnmr5Tlr7npu5jorqTpqozor4HnoIENCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHZlcmlmeUNvZGUg6aqM6K+B56CB5pWw5YC8DQogICAgICogQHBhcmFtIHN0cmluZyAkaWQgICAgICAgICDlkb3lkI3kuovku7YNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja1ZhbGlkQ29kZSgkdmVyaWZ5Q29kZSwgJGlkID0gJycpDQogICAgew0KICAgICAgICAkdmVyaWZ5Q29kZSA9IHN0cnRvbG93ZXIoJHZlcmlmeUNvZGUpOw0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfQ2hlY2tWYWxpZENvZGUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgIHJldHVybiAkZnBuYW1lKCR2ZXJpZnlDb2RlLCAkaWQpOyAvLyoNCiAgICAgICAgfQ0KDQogICAgICAgICRvcmlnaW5hbCA9IEdldFZhcnMoJ2NhcHRjaGFfJyAuIGNyYzMyKCR0aGlzLT5ndWlkIC4gJGlkKSwgJ0NPT0tJRScpOw0KICAgICAgICBzZXRjb29raWUoJ2NhcHRjaGFfJyAuIGNyYzMyKCR0aGlzLT5ndWlkIC4gJGlkKSwgJycsICh0aW1lKCkgLSAzNjAwKSwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCg0KICAgICAgICByZXR1cm4gbWQ1KCR0aGlzLT5ndWlkIC4gZGF0ZSgiWW1kaCIpIC4gc3RydG9sb3dlcigkdmVyaWZ5Q29kZSkpID09ICRvcmlnaW5hbA0KICAgICAgICAgICAgfHwNCiAgICAgICAgICAgIG1kNSgkdGhpcy0+Z3VpZCAuIGRhdGUoIlltZGgiLCAodGltZSgpIC0gKDM2MDAgKiAxKSkpIC4gc3RydG9sb3dlcigkdmVyaWZ5Q29kZSkpID09ICRvcmlnaW5hbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlkJHlr7zoiKroj5zljZXmt7vliqDnm7jlupTmnaHnm64uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0eXBlICR0eXBlPWNhdGVnb3J5LHRhZyxwYWdlLGl0ZW0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZA0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR1cmwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQWRkSXRlbVRvTmF2YmFyKCR0eXBlLCAkaWQsICRuYW1lLCAkdXJsKQ0KICAgIHsNCiAgICAgICAgaWYgKCEkdHlwZSkgew0KICAgICAgICAgICAgJHR5cGUgPSAnaXRlbSc7DQogICAgICAgIH0NCg0KICAgICAgICAkbSA9ICR0aGlzLT5tb2R1bGVzYnlmaWxlbmFtZVsnbmF2YmFyJ107DQogICAgICAgICRzID0gJG0tPkNvbnRlbnQ7DQoNCiAgICAgICAgJGEgPSAnPGxpIGlkPSJuYXZiYXItJyAuICR0eXBlIC4gJy0nIC4gJGlkIC4gJyI+PGEgaHJlZj0iJyAuICR1cmwgLiAnIj4nIC4gJG5hbWUgLiAnPC9hPjwvbGk+JzsNCg0KICAgICAgICBpZiAoJHRoaXMtPkNoZWNrSXRlbVRvTmF2YmFyKCR0eXBlLCAkaWQpKSB7DQogICAgICAgICAgICAkcyA9IHByZWdfcmVwbGFjZSgnLzxsaSBpZD0ibmF2YmFyLScgLiAkdHlwZSAuICctJyAuICRpZCAuICciPi4qPzxcL2xpPi8nLCAkYSwgJHMpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHMgLj0gJzxsaSBpZD0ibmF2YmFyLScgLiAkdHlwZSAuICctJyAuICRpZCAuICciPjxhIGhyZWY9IicgLiAkdXJsIC4gJyI+JyAuICRuYW1lIC4gJzwvYT48L2xpPic7DQogICAgICAgIH0NCg0KICAgICAgICAkbS0+Q29udGVudCA9ICRzOw0KICAgICAgICAkbS0+U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpOWvvOiIquiPnOWNleS4reebuOW6lOadoeebri4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUNCiAgICAgKiBAcGFyYW0gJGlkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbEl0ZW1Ub05hdmJhcigkdHlwZSwgJGlkKQ0KICAgIHsNCiAgICAgICAgaWYgKCEkdHlwZSkgew0KICAgICAgICAgICAgJHR5cGUgPSAnaXRlbSc7DQogICAgICAgIH0NCg0KICAgICAgICAkbSA9ICR0aGlzLT5tb2R1bGVzYnlmaWxlbmFtZVsnbmF2YmFyJ107DQogICAgICAgICRzID0gJG0tPkNvbnRlbnQ7DQoNCiAgICAgICAgJHMgPSBwcmVnX3JlcGxhY2UoJy88bGkgaWQ9Im5hdmJhci0nIC4gJHR5cGUgLiAnLScgLiAkaWQgLiAnIj4uKj88XC9saT4vJywgJycsICRzKTsNCg0KICAgICAgICAkbS0+Q29udGVudCA9ICRzOw0KICAgICAgICAkbS0+U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeadoeebruaYr+WQpuWcqOWvvOiIquiPnOWNleS4rS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUNCiAgICAgKiBAcGFyYW0gJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tJdGVtVG9OYXZiYXIoJHR5cGUsICRpZCkNCiAgICB7DQogICAgICAgIGlmICghJHR5cGUpIHsNCiAgICAgICAgICAgICR0eXBlID0gJ2l0ZW0nOw0KICAgICAgICB9DQoNCiAgICAgICAgJG0gPSAkdGhpcy0+bW9kdWxlc2J5ZmlsZW5hbWVbJ25hdmJhciddOw0KICAgICAgICAkcyA9ICRtLT5Db250ZW50Ow0KDQogICAgICAgIHJldHVybiAoYm9vbCkgc3RycG9zKCRzLCAnaWQ9Im5hdmJhci0nIC4gJHR5cGUgLiAnLScgLiAkaWQgLiAnIicpOw0KICAgIH0NCg0KICAgIC8vJHNpZ25hbCA9IGdvb2QsYmFkLHRpcHMNCiAgICBwcml2YXRlICRoaW50cyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiDorr7nva7mj5DnpLrmtojmga/lubblrZjlhaVDb29raWUuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRzaWduYWwgIOaPkOekuuexu+Wei++8iGdvb2R8YmFkfHRpcHPvvIkNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjb250ZW50IOaPkOekuuWGheWuuQ0KICAgICAqIEBwYXJhbSBpbnQgJGRlbGF5IOW7tuaXtuaXtumXtA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTZXRIaW50KCRzaWduYWwsICRjb250ZW50ID0gJycsICRkZWxheSA9IDEwKQ0KICAgIHsNCiAgICAgICAgaWYgKCRjb250ZW50ID09ICcnKSB7DQogICAgICAgICAgICBpZiAoc3Vic3RyKCRzaWduYWwsIDAsIDQpID09ICdnb29kJykgew0KICAgICAgICAgICAgICAgICRjb250ZW50ID0gJHRoaXMtPmxhbmdbJ21zZyddWydvcGVyYXRpb25fc3VjY2VlZCddOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoc3Vic3RyKCRzaWduYWwsIDAsIDMpID09ICdiYWQnKSB7DQogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdGhpcy0+bGFuZ1snbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkY29udGVudCA9IHN1YnN0cigkY29udGVudCwgMCwgMjU1KTsNCiAgICAgICAgZm9yICgkaSA9IDE7ICRpIDw9IDEwOyAkaSsrKSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPmhpbnRzWyRpXSkpIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRoaW50ID0gbmV3IHN0ZENsYXNzOw0KICAgICAgICAgICAgJGhpbnQtPnNpZ25hbCA9ICRzaWduYWw7DQogICAgICAgICAgICAkaGludC0+Y29udGVudCA9ICRjb250ZW50Ow0KICAgICAgICAgICAgJGhpbnQtPmRlbGF5ID0gJGRlbGF5Ow0KICAgICAgICAgICAgJHRoaXMtPmhpbnRzWyRpXSA9ICRoaW50Ow0KICAgICAgICAgICAgc2V0Y29va2llKCJoaW50X3NpZ25hbCIgLiAkaSwganNvbl9lbmNvZGUoJGhpbnQpLCAwLCAkdGhpcy0+Y29va2llc3BhdGgpOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmj5Dlj5ZDb29raWXkuK3nmoTmj5DnpLrmtojmga8uDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldEhpbnQoKQ0KICAgIHsNCiAgICAgICAgZm9yICgkaSA9IDE7ICRpIDw9IDEwOyAkaSsrKSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPmhpbnRzWyRpXSkgJiYgaXNfb2JqZWN0KCR0aGlzLT5oaW50c1skaV0pKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPlNob3dIaW50KCR0aGlzLT5oaW50c1skaV0pOw0KICAgICAgICAgICAgICAgIHNldGNvb2tpZSgiaGludF9zaWduYWwiIC4gJGksICcnLCAodGltZSgpIC0gMzYwMCksICR0aGlzLT5jb29raWVzcGF0aCk7DQogICAgICAgICAgICAgICAgdW5zZXQoJF9DT09LSUVbImhpbnRfc2lnbmFsIiAuICRpXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZm9yICgkaSA9IDE7ICRpIDw9IDEwOyAkaSsrKSB7DQogICAgICAgICAgICAkc2lnbmFsID0gR2V0VmFycygnaGludF9zaWduYWwnIC4gJGksICdDT09LSUUnKTsNCiAgICAgICAgICAgICRoaW50ID0gKGVtcHR5KCRzaWduYWwpKSA/IG51bGwgOiBqc29uX2RlY29kZSgkc2lnbmFsKTsNCiAgICAgICAgICAgIGlmICgkaGludCAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5TaG93SGludCgkaGludCk7DQogICAgICAgICAgICAgICAgc2V0Y29va2llKCJoaW50X3NpZ25hbCIgLiAkaSwgJycsICh0aW1lKCkgLSAzNjAwKSwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgICAgICAgICB1bnNldCgkX0NPT0tJRVsiaGludF9zaWduYWwiIC4gJGldKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOeUseaPkOekuua2iOaBr+i+k+WHukhUTUwuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRzaWduYWwgIOaPkOekuuexu+Wei++8iGdvb2R8YmFkfHRpcHPvvIkNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjb250ZW50IOaPkOekuuWGheWuuQ0KICAgICAqIEBwYXJhbSBpbnQgJGRlbGF5IOW7tuaXtuaXtumXtA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTaG93SGludCgkc2lnbmFsLCAkY29udGVudCA9ICcnLCAkZGVsYXkgPSAxMCkNCiAgICB7DQogICAgICAgIC8vMS435aKe5YqgJHNpZ25hbOS4umpzb27nsbvlnosNCiAgICAgICAgJGhpbnQgPSAkc2lnbmFsOw0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRoaW50KSkgew0KICAgICAgICAgICAgJHNpZ25hbCA9ICRoaW50LT5zaWduYWw7DQogICAgICAgICAgICAkY29udGVudCA9ICRoaW50LT5jb250ZW50Ow0KICAgICAgICAgICAgJGRlbGF5ID0gJGhpbnQtPmRlbGF5Ow0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCRjb250ZW50ID09ICcnKSB7DQogICAgICAgICAgICBpZiAoc3Vic3RyKCRzaWduYWwsIDAsIDQpID09ICdnb29kJyB8fCBzdWJzdHIoJHNpZ25hbCwgMCwgNykgPT0gJ3N1Y2NlZWQnKSB7DQogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdGhpcy0+bGFuZ1snbXNnJ11bJ29wZXJhdGlvbl9zdWNjZWVkJ107DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzdWJzdHIoJHNpZ25hbCwgMCwgMykgPT0gJ2JhZCcgfHwgc3Vic3RyKCRzaWduYWwsIDAsIDYpID09ICdmYWlsZWQnKSB7DQogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdGhpcy0+bGFuZ1snbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkZGVsYXkgPSAoJGRlbGF5ICogMTAwMCk7DQogICAgICAgIGVjaG8gIjxkaXYgY2xhc3M9XCJoaW50XCI+PHAgY2xhc3M9XCJoaW50IGhpbnRfJHNpZ25hbFwiIGRhdGEtZGVsYXk9XCIkZGVsYXlcIj4kY29udGVudDwvcD48L2Rpdj4iOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaPkOekuua2iOaBryBKU+eJiC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHNpZ25hbCAg5o+Q56S657G75Z6L77yIZ29vZHxiYWR8dGlwc++8iQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvbnRlbnQg5o+Q56S65YaF5a65DQogICAgICogQHBhcmFtIGludCAkZGVsYXkg5bu25pe25pe26Ze0DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNob3dIaW50X0pTKCRzaWduYWwsICRjb250ZW50ID0gJycsICRkZWxheSA9IDEwKQ0KICAgIHsNCiAgICAgICAgLy8xLjflop7liqAkc2lnbmFs5Li6anNvbuexu+Weiw0KICAgICAgICAkaGludCA9ICRzaWduYWw7DQogICAgICAgIGlmIChpc19vYmplY3QoJGhpbnQpKSB7DQogICAgICAgICAgICAkc2lnbmFsID0gJGhpbnQtPnNpZ25hbDsNCiAgICAgICAgICAgICRjb250ZW50ID0gJGhpbnQtPmNvbnRlbnQ7DQogICAgICAgICAgICAkZGVsYXkgPSAkaGludC0+ZGVsYXk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJGNvbnRlbnQgPT0gJycpIHsNCiAgICAgICAgICAgIGlmIChzdWJzdHIoJHNpZ25hbCwgMCwgNCkgPT0gJ2dvb2QnIHx8IHN1YnN0cigkc2lnbmFsLCAwLCA3KSA9PSAnc3VjY2VlZCcpIHsNCiAgICAgICAgICAgICAgICAkY29udGVudCA9ICR0aGlzLT5sYW5nWydtc2cnXVsnb3BlcmF0aW9uX3N1Y2NlZWQnXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHN1YnN0cigkc2lnbmFsLCAwLCAzKSA9PSAnYmFkJyB8fCBzdWJzdHIoJHNpZ25hbCwgMCwgNikgPT0gJ2ZhaWxlZCcpIHsNCiAgICAgICAgICAgICAgICAkY29udGVudCA9ICR0aGlzLT5sYW5nWydtc2cnXVsnb3BlcmF0aW9uX2ZhaWxlZCddOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICRkZWxheSA9ICgkZGVsYXkgKiAxMDAwMCk7DQogICAgICAgIGVjaG8gIjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4kKCcubWFpbicpLnByZXBlbmQoJzxkaXYgY2xhc3M9XCJoaW50XCI+PHAgY2xhc3M9XCJoaW50IGhpbnRfIiAuICRzaWduYWwgLiAiXCIgZGF0YS1kZWxheT1cIiIgLiAkZGVsYXkgLiAiXCI+IjsNCiAgICAgICAgZWNobyBzdHJfcmVwbGFjZSgiJyIsICJcJyIsICRjb250ZW50KTsNCiAgICAgICAgZWNobyAiPC9wPjwvZGl2PicpOzwvc2NyaXB0PiI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5pi+56S66ZSZ6K+v5L+h5oGvLg0KICAgICAqDQogICAgICogQGFwaSBGaWx0ZXJfUGx1Z2luX1picF9TaG93RXJyb3INCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcvaW50ICRlcnJvclRleHQNCiAgICAgKiBAcGFyYW0gbnVsbCAgICAgICAkZmlsZQ0KICAgICAqIEBwYXJhbSBudWxsICAgICAgICRsaW5lDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTaG93RXJyb3IoJGVycm9yVGV4dCwgJGZpbGUgPSBudWxsLCAkbGluZSA9IG51bGwsICRtb3JlaW5mbyA9IG51bGwpDQogICAgew0KICAgICAgICAkYXJncyA9IGZ1bmNfZ2V0X2FyZ3MoKTsNCiAgICAgICAgJGVycm9yQ29kZSA9IDA7DQogICAgICAgIGlmIChpc19udW1lcmljKCRlcnJvclRleHQpKSB7DQogICAgICAgICAgICAkZXJyb3JDb2RlID0gKGludCkgJGVycm9yVGV4dDsNCiAgICAgICAgICAgICRlcnJvclRleHQgPSAkdGhpcy0+bGFuZ1snZXJyb3InXVskZXJyb3JUZXh0XTsNCiAgICAgICAgfQ0KDQogICAgICAgICR6YmUgPSBaQmxvZ0V4Y2VwdGlvbjo6R2V0SW5zdGFuY2UoKTsNCiAgICAgICAgJHpiZS0+bWVzc2FnZSA9ICRlcnJvclRleHQ7DQogICAgICAgICR6YmUtPm1lc3NhZ2VmdWxsID0gJGVycm9yVGV4dCAuICcgKHNldF9leGNlcHRpb25faGFuZGxlcikgJzsNCiAgICAgICAgJHpiZS0+dHlwZSA9ICRlcnJvckNvZGU7DQogICAgICAgICR6YmUtPmNvZGUgPSAkZXJyb3JDb2RlOw0KICAgICAgICAkemJlLT5maWxlID0gJGZpbGU7DQogICAgICAgICR6YmUtPmxpbmUgPSAkbGluZTsNCiAgICAgICAgJHpiZS0+bW9yZWluZm8gPSAkbW9yZWluZm87DQoNCiAgICAgICAgaWYgKHN0cmlwb3MoJ3snIC4gc2hhMSgnbXVzdHNob3dlcnJvcicpIC4gJ30nLCAkZXJyb3JUZXh0KSA9PT0gMCkgew0KICAgICAgICAgICAgJGVycm9yVGV4dCA9IHN0cl9yZXBsYWNlKCd7JyAuIHNoYTEoJ211c3RzaG93ZXJyb3InKSAuICd9JywgJycsICRlcnJvclRleHQpOw0KICAgICAgICAgICAgJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fRGVidWdfRGlzcGxheSddID0gYXJyYXkoKTsNCiAgICAgICAgICAgICRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0RlYnVnX0hhbmRsZXInXSA9IGFycmF5KCk7DQoNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJGVycm9yVGV4dCk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfU2hvd0Vycm9yJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICBhcnJheV9zaGlmdCgkYXJncyk7DQogICAgICAgICAgICBhcnJheV91bnNoaWZ0KCRhcmdzLCAkZXJyb3JUZXh0KTsNCiAgICAgICAgICAgIGFycmF5X3Vuc2hpZnQoJGFyZ3MsICRlcnJvckNvZGUpOw0KICAgICAgICAgICAgLy8kZnByZXR1cm4gPSAkZnBuYW1lKCRlcnJvckNvZGUsICRlcnJvclRleHQsICRmaWxlLCAkbGluZSwgJG1vcmVpbmZvKTsNCiAgICAgICAgICAgICRmcHJldHVybiA9IGNhbGxfdXNlcl9mdW5jX2FycmF5KCRmcG5hbWUsICRhcmdzKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJGVycm9yQ29kZSA9PSAyKSB7DQogICAgICAgICAgICBIdHRwNDA0KCk7DQogICAgICAgIH0NCg0KICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCRlcnJvclRleHQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOa1i+e9keermeWFs+mXre+8jOWmguaenOWFs+mXre+8jOWImeaKm+WHuumUmeivry4NCiAgICAgKg0KICAgICAqIEB0aHJvd3MgRXhjZXB0aW9uDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrU2l0ZUNsb3NlZCgpDQogICAgew0KICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfQ0xPU0VfU0lURSddKSB7DQogICAgICAgICAgICBIdHRwNTAzKCk7DQogICAgICAgICAgICAkdGhpcy0+U2hvd0Vycm9yKDgyLCBfX0ZJTEVfXywgX19MSU5FX18pOw0KICAgICAgICAgICAgZXhpdDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi3s+i9rOWIsOWuieijhemhtemdoi4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVkaXJlY3RJbnN0YWxsKCkNCiAgICB7DQogICAgICAgIGlmICghJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKSB7DQogICAgICAgICAgICAkcyA9ICRfU0VSVkVSWydRVUVSWV9TVFJJTkcnXTsNCiAgICAgICAgICAgICRzID0gZW1wdHkoJHMpID8gJycgOiAnPycgLiAkczsNCiAgICAgICAgICAgIFJlZGlyZWN0MzAyKCcuL3piX2luc3RhbGwvaW5kZXgucGhwJyAuICRzKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPm9wdGlvblsnWkNfSU5TVEFMTF9BRlRFUl9DT05GSUcnXSkgJiYgJHRoaXMtPm9wdGlvblsnWkNfSU5TVEFMTF9BRlRFUl9DT05GSUcnXSA9PSB0cnVlKSB7DQogICAgICAgICAgICAkciA9ICR0aGlzLT5kYi0+RXhpc3RUYWJsZSgkR0xPQkFMU1sndGFibGUnXVsnQ29uZmlnJ10pOw0KICAgICAgICAgICAgaWYgKCRyID09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgUmVkaXJlY3QzMDIoJy4vemJfaW5zdGFsbC9pbmRleC5waHAnKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOazqOWGjFBvc3RUeXBlLg0KICAgICAqDQogICAgICogQHBhcmFtICR0eXBlSWQNCiAgICAgKiBAcGFyYW0gJG5hbWUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR1cmxSdWxlICAgICAg6buY6K6k5pivYXJyYXkoKSDkuLpVcmwgUnVsZee7hOWQiOeahOaVsOe7hA0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRlbXBsYXRlICAgICDpu5jorqTmqKHmnb/lkI3mmK9hcnJheSgpIOS4uuS4gOS4que7hOWQiOaVsOe7hA0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGNsYXNzTmFtZSAgICDpu5jorqTnsbvlkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhY3Rpb25zICAgICAg6buY6K6kQWN0aW9ucyDlupTmmK9hcnJheSgpDQogICAgICogQHBhcmFtIHN0cmluZyAkcm91dGVzICAgICAgIOm7mOiupFJvdXRlcyDlupTmmK9hcnJheSgpDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWdQb3N0VHlwZSgkdHlwZUlkLCAkbmFtZSA9ICcnLCAkdXJsUnVsZSA9IGFycmF5KCksICR0ZW1wbGF0ZSA9IGFycmF5KCksICRjbGFzc05hbWUgPSAnUG9zdCcsICRhY3Rpb25zID0gYXJyYXkoKSwgJHJvdXRlcyA9IGFycmF5KCkpDQogICAgew0KICAgICAgICAvKiDov5nkuKTkuKrlj4LmlbDlnKgxLjfph4zlt7Lnu4/lup/lvIMNCiAgICAgICAgKiBAcGFyYW0gc3RyaW5nICRjYXRlZ29yeVR5cGUg5b2T5YmN5paH56ug57G755qE5YiG57G7VHlwZSAvL+W3suW6n+W8gw0KICAgICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhZ1R5cGUgICAgICDlvZPliY3mlofnq6DnsbvnmoTmoIfnrb5UeXBlIC8v5bey5bqf5byDDQogICAgICAgICovDQoNCiAgICAgICAgLy/lpoLmnpzlj6rmnInkuIDkuKrlj4LmlbDvvIzkuJTnrKzkuIDkuKrlj4LmlbDmmK9hcnJheSgp55qE6K+d77yM6YKj5bCx55u05o6l6LWL5YC8DQogICAgICAgIGlmIChpc19hcnJheSgkdHlwZUlkKSkgew0KICAgICAgICAgICAgJGlkID0gJHR5cGVJZFsnaWQnXTsNCiAgICAgICAgICAgIGlmICghaXNzZXQoJHR5cGVJZFsnY2xhc3NuYW1lJ10pIHx8ICR0eXBlSWRbJ2NsYXNzbmFtZSddID09ICcnKSB7DQogICAgICAgICAgICAgICAgJHR5cGVJZFsnY2xhc3NuYW1lJ10gPSAnUG9zdCc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkdHlwZUlkWyduYW1lJ10gPSBzdHJ0b2xvd2VyKHRyaW0oJHR5cGVJZFsnbmFtZSddKSk7DQogICAgICAgICAgICAkdGhpcy0+cG9zdHR5cGVbJGlkXSA9ICR0eXBlSWQ7DQogICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT50YWdzX3R5cGVbJGlkXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+dGFnc190eXBlWyRpZF0gPSBhcnJheSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+dGFnc2J5bmFtZV90eXBlWyRpZF0pKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPnRhZ3NieW5hbWVfdHlwZVskaWRdID0gYXJyYXkoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghaXNzZXQoJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyX3R5cGVbJGlkXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskaWRdID0gYXJyYXkoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCg0KICAgICAgICAkdXJzID0gYXJyYXkoKTsNCiAgICAgICAgJHVyc1snc2luZ2xlX3VybHJ1bGUnXSA9ICR0aGlzLT5vcHRpb25bJ1pDX1BBR0VfUkVHRVgnXTsNCiAgICAgICAgJHVyc1snbGlzdF91cmxydWxlJ10gPSAnJzsNCiAgICAgICAgJHVyc1snbGlzdF9jYXRlZ29yeV91cmxydWxlJ10gPSAnJzsNCiAgICAgICAgJHVyc1snbGlzdF9hdXRob3JfdXJscnVsZSddID0gJyc7DQogICAgICAgICR1cnNbJ2xpc3RfZGF0ZV91cmxydWxlJ10gPSAnJzsNCiAgICAgICAgJHVyc1snbGlzdF90YWdfdXJscnVsZSddID0gJyc7DQogICAgICAgICR1cnNbJ3NlYXJjaF91cmxydWxlJ10gPSAnJzsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkdXJsUnVsZSkpIHsNCiAgICAgICAgICAgIGlmIChpc19zdHJpbmcoJHVybFJ1bGUpICYmICR1cmxSdWxlICE9ICcnKSB7DQogICAgICAgICAgICAgICAgJHVyc1snc2luZ2xlX3VybHJ1bGUnXSA9ICR1cmxSdWxlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHVycyA9IGFycmF5X21lcmdlKCR1cnMsICR1cmxSdWxlKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0eXBlSWQgPSAoaW50KSAkdHlwZUlkOw0KICAgICAgICAkbmFtZSA9IHN0cnRvbG93ZXIodHJpbSgkbmFtZSkpOw0KICAgICAgICBpZiAoJHR5cGVJZCA+IDk5KSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlSWRdKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5TaG93RXJyb3IoODcsIF9fRklMRV9fLCBfX0xJTkVfXyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJHRwcyA9IGFycmF5KCk7DQogICAgICAgICR0cHNbJ3RlbXBsYXRlJ10gPSAkdGhpcy0+b3B0aW9uWydaQ19QT1NUX0RFRkFVTFRfVEVNUExBVEUnXTsNCiAgICAgICAgJHRwc1snbGlzdF90ZW1wbGF0ZSddID0gJHRoaXMtPm9wdGlvblsnWkNfSU5ERVhfREVGQVVMVF9URU1QTEFURSddOw0KICAgICAgICAkdHBzWydjYXRlZ29yeV90ZW1wbGF0ZSddID0gJHRoaXMtPm9wdGlvblsnWkNfSU5ERVhfREVGQVVMVF9URU1QTEFURSddOw0KICAgICAgICAkdHBzWyd0YWdfdGVtcGxhdGUnXSA9ICR0aGlzLT5vcHRpb25bJ1pDX0lOREVYX0RFRkFVTFRfVEVNUExBVEUnXTsNCiAgICAgICAgJHRwc1snYXV0aG9yX3RlbXBsYXRlJ10gPSAkdGhpcy0+b3B0aW9uWydaQ19JTkRFWF9ERUZBVUxUX1RFTVBMQVRFJ107DQogICAgICAgICR0cHNbJ2RhdGVfdGVtcGxhdGUnXSA9ICR0aGlzLT5vcHRpb25bJ1pDX0lOREVYX0RFRkFVTFRfVEVNUExBVEUnXTsNCiAgICAgICAgJHRwc1snc2VhcmNoX3RlbXBsYXRlJ10gPSAkdGhpcy0+b3B0aW9uWydaQ19TRUFSQ0hfREVGQVVMVF9URU1QTEFURSddOw0KDQogICAgICAgIGlmICghaXNfYXJyYXkoJHRlbXBsYXRlKSkgew0KICAgICAgICAgICAgaWYgKGlzX3N0cmluZygkdGVtcGxhdGUpICYmICR0ZW1wbGF0ZSAhPSAnJykgew0KICAgICAgICAgICAgICAgICR0cHNbJ3RlbXBsYXRlJ10gPSAkdGVtcGxhdGU7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkdHBzID0gYXJyYXlfbWVyZ2UoJHRwcywgJHRlbXBsYXRlKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5wb3N0dHlwZVskdHlwZUlkXSA9IGFycmF5KCduYW1lJyA9PiAkbmFtZSwgJ2NsYXNzbmFtZScgPT4gJGNsYXNzTmFtZSk7DQogICAgICAgICR0aGlzLT5wb3N0dHlwZVskdHlwZUlkXSA9IGFycmF5X21lcmdlKCR0aGlzLT5wb3N0dHlwZVskdHlwZUlkXSwgJHRwcywgJHVycyk7DQoNCiAgICAgICAgJHBvc3RfYWN0aW9ucyA9IGFycmF5KCduZXcnID0+ICdBcnRpY2xlTmV3JywgJ2VkaXQnID0+ICdBcnRpY2xlRWR0JywgJ2RlbCcgPT4gJ0FydGljbGVEZWwnLCAncG9zdCcgPT4gJ0FydGljbGVQc3QnLCAncHVibGlzaCcgPT4gJ0FydGljbGVQdWInLCAnbWFuYWdlJyA9PiAnQXJ0aWNsZU1uZycsICdhbGwnID0+ICdBcnRpY2xlQWxsJywgJ3ZpZXcnID0+ICd2aWV3JywgJ3NlYXJjaCcgPT4gJ3NlYXJjaCcpOw0KDQogICAgICAgIGlmIChlbXB0eSgkYWN0aW9ucykgfHwgaXNfYXJyYXkoJGFjdGlvbnMpID09IGZhbHNlKSB7DQogICAgICAgICAgICAkYWN0aW9ucyA9ICRwb3N0X2FjdGlvbnM7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkcG9zdF9hY3Rpb25zIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoIWlzc2V0KCRhY3Rpb25zWyRrZXldKSkgew0KICAgICAgICAgICAgICAgICRhY3Rpb25zWyRrZXldID0gJHZhbHVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICR0aGlzLT5wb3N0dHlwZVskdHlwZUlkXVsnYWN0aW9ucyddID0gJGFjdGlvbnM7DQoNCiAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+dGFnc190eXBlWyR0eXBlSWRdKSkgew0KICAgICAgICAgICAgJHRoaXMtPnRhZ3NfdHlwZVskdHlwZUlkXSA9IGFycmF5KCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+dGFnc2J5bmFtZV90eXBlWyR0eXBlSWRdKSkgew0KICAgICAgICAgICAgJHRoaXMtPnRhZ3NieW5hbWVfdHlwZVskdHlwZUlkXSA9IGFycmF5KCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJfdHlwZVskdHlwZUlkXSkpIHsNCiAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlcl90eXBlWyR0eXBlSWRdID0gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiuvue9rlBvc3RUeXBlLg0KICAgICAqDQogICAgICogQHBhcmFtICR0eXBlSWQNCiAgICAgKiBAcGFyYW0gJG5hbWUNCiAgICAgKiBAcGFyYW0gJHZhbHVlDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTZXRQb3N0VHlwZSgkdHlwZWlkLCAkbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWyRuYW1lXSA9ICR2YWx1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5ZQb3N0VHlwZeS/oeaBryjlpoLmnpzmmK/kv67mlLnnmoTor53or7fnm7TmjqXnvJbovpEkemJwLT5wb3N0dHlwZSkNCiAgICAgKg0KICAgICAqIEBwYXJhbSAka2V5DQogICAgICoNCiAgICAgKiBAcGFyYW0gJHR5cGVpZA0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGUoJHR5cGVpZCwgJGtleSkNCiAgICB7DQogICAgICAgIGlmICgka2V5ID09IG51bGwgfHwgZW1wdHkoJGtleSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF07DQogICAgICAgIH0NCiAgICAgICAgaWYgKCduYW1lJyA9PSAka2V5KSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWyduYW1lJ10pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHN0cnRvbG93ZXIoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWyduYW1lJ10pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gJyc7DQogICAgICAgIH0gZWxzZWlmICgnc2luZ2xlX3VybHJ1bGUnID09ICRrZXkpIHsNCiAgICAgICAgICAgIGlmIChpc3NldCgkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJ3NpbmdsZV91cmxydWxlJ10pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVsnc2luZ2xlX3VybHJ1bGUnXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5vcHRpb25bJ1pDX1BBR0VfUkVHRVgnXTsNCiAgICAgICAgfSBlbHNlaWYgKCdjbGFzc25hbWUnID09ICRrZXkpIHsNCiAgICAgICAgICAgIGlmIChpc3NldCgkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJ2NsYXNzbmFtZSddKSAmJiAhZW1wdHkoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWydjbGFzc25hbWUnXSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWydjbGFzc25hbWUnXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICdQb3N0JzsNCiAgICAgICAgfSBlbHNlaWYgKCdhY3Rpb25zJyA9PSAka2V5KSB7DQogICAgICAgICAgICAkYWN0aW9ucyA9IGFycmF5KCk7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWydhY3Rpb25zJ10pKSB7DQogICAgICAgICAgICAgICAgJGFjdGlvbnMgPSAkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJ2FjdGlvbnMnXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRwb3N0X2FjdGlvbnMgPSAkdGhpcy0+cG9zdHR5cGVbMF1bJ2FjdGlvbnMnXTsNCiAgICAgICAgICAgIGlmIChpc19hcnJheSgkYWN0aW9ucykgJiYgZW1wdHkoJGFjdGlvbnMpID09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHBvc3RfYWN0aW9ucyBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRhY3Rpb25zWyRrZXldKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGFjdGlvbnNbJGtleV0gPSAkdmFsdWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICRhY3Rpb25zOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuICRwb3N0X2FjdGlvbnM7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWyRrZXldKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJGtleV07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDorr7nva5Qb3N0VHlwZeS4i0FycmF56aG555uu5L+h5oGvDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNldFBvc3RUeXBlX1N1YigkdHlwZWlkLCAkbmFtZSwgJHN1Ym5hbWUsICR2YWx1ZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVskbmFtZV1bJHN1Ym5hbWVdID0gJHZhbHVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPllBvc3RUeXBl5LiLQXJyYXnpobnnm67kv6Hmga8NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGVfU3ViKCR0eXBlaWQsICRuYW1lLCAkc3VibmFtZSkNCiAgICB7DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJG5hbWVdWyRzdWJuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJG5hbWVdWyRzdWJuYW1lXTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHR5cGVpZA0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGVfTmFtZSgkdHlwZWlkKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF1bJ25hbWUnXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAnJzsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGVfQ2xhc3NOYW1lKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVsnY2xhc3NuYW1lJ107DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJ1Bvc3QnOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQb3N0VHlwZV9VcmxSdWxlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVsnc2luZ2xlX3VybHJ1bGUnXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+b3B0aW9uWydaQ19QQUdFX1JFR0VYJ107DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RUeXBlX1RlbXBsYXRlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVsndGVtcGxhdGUnXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+b3B0aW9uWydaQ19QT1NUX0RFRkFVTFRfVEVNUExBVEUnXTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGVfQ2F0ZWdvcnlUeXBlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0eXBlaWQ7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGVfVGFnVHlwZSgkdHlwZWlkKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdHlwZWlkOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5rOo5YaMQWN0aW9uLg0KICAgICAqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHBhcmFtICRsZXZlbA0KICAgICAqIEBwYXJhbSAkdGl0bGUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVnQWN0aW9uKCRuYW1lLCAkbGV2ZWwsICR0aXRsZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5hY3Rpb25zWyRuYW1lXSA9ICRsZXZlbDsNCiAgICAgICAgJHRoaXMtPmxhbmdbJ2FjdGlvbnMnXVskbmFtZV0gPSAkdGl0bGU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635b6XQWN0aW9u5p2D6ZmQ5rOo6YeKLg0KICAgICAqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldEFjdGlvbk5hbWUoJG5hbWUpDQogICAgew0KICAgICAgICByZXR1cm4gR2V0VmFsdWVJbkFycmF5KCR0aGlzLT5sYW5nWydhY3Rpb25zJ10sICRuYW1lLCAkbmFtZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5rOo5YaM6Lev55Sx5Ye95pWwDQogICAgICoNCiAgICAgKiBAcGFyYW0gJGFycmF5IOaVsOaNruaVsOe7hCjor6bnu4bnu5PmnoTlnKjliJ3lp4vljJbkuK3mnInor7TmmI4pDQogICAgICogQHBhcmFtICRwcmVwZW5kIOazqOWGjOi3r+eUseaXtuaPkumYn+WcqOWJjei+uQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWdSb3V0ZSgkYXJyYXksICRwcmVwZW5kID0gZmFsc2UpDQogICAgew0KICAgICAgICAkcm91dGVzID0gJiR0aGlzLT5yb3V0ZXM7DQogICAgICAgICRuZXdfbmFtZSA9ICRhcnJheVsndHlwZSddIC4gJ18nIC4gJGFycmF5WyduYW1lJ107DQoNCiAgICAgICAgJHBvc3RpZCA9IEdldFZhbHVlSW5BcnJheSgkYXJyYXksICdwb3N0dHlwZScsIDApOw0KICAgICAgICAkcG9zdG5hbWUgPSAkdGhpcy0+R2V0UG9zdFR5cGUoJHBvc3RpZCwgJ25hbWUnKTsNCiAgICAgICAgaWYgKCFpc19udWxsKCRwb3N0aWQpICYmIGVtcHR5KCRhcnJheVsndXJscnVsZSddKSkgew0KICAgICAgICAgICAgJHByZWZpeF9uYW1lID0gJ3Bvc3RfJyAuICRwb3N0bmFtZSAuICdfJzsNCiAgICAgICAgICAgICRwcmVmaXhfcnVsZW5hbWUgPSBzdHJfaXJlcGxhY2UoJHByZWZpeF9uYW1lLCAnJywgJGFycmF5WyduYW1lJ10pOw0KICAgICAgICAgICAgJHJ1bGVuYW1lID0gJHByZWZpeF9ydWxlbmFtZSAuICdfdXJscnVsZSc7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyRwb3N0aWRdWyRydWxlbmFtZV0pKSB7DQogICAgICAgICAgICAgICAgJGFycmF5Wyd1cmxydWxlJ10gPSAkdGhpcy0+cG9zdHR5cGVbJHBvc3RpZF1bJHJ1bGVuYW1lXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkcHJlcGVuZCA9PSBmYWxzZSkgew0KICAgICAgICAgICAgJHJvdXRlc1skbmV3X25hbWVdID0gJGFycmF5Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdW5zZXQoJHJvdXRlc1skbmV3X25hbWVdKTsNCiAgICAgICAgICAgICRuZXdfYXJyYXkgPSBhcnJheSgkbmV3X25hbWUgPT4gJGFycmF5KTsNCiAgICAgICAgICAgICRyb3V0ZXMgPSBhcnJheV9tZXJnZSgkbmV3X2FycmF5LCAkcm91dGVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8v5bCG6Lev55Sx6KeE5YiZ5YaZ5YWlUG9zdFR5cGXmlbDnu4Tph4wgLy/ov5jpnIDopoHliKTmlq3mnaHku7bpgInmi6nlhpnlhaUNCiAgICAgICAgaWYgKCFpc19udWxsKCRwb3N0aWQpKSB7DQogICAgICAgICAgICAkYiA9IGZhbHNlOw0KICAgICAgICAgICAgaWYgKCRhcnJheVsndHlwZSddICE9ICdkZWZhdWx0Jykgew0KICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19TVEFUSUNfTU9ERSddID09ICdSRVdSSVRFJyAmJiAkYXJyYXlbJ3R5cGUnXSA9PSAncmV3cml0ZScpIHsNCiAgICAgICAgICAgICAgICAgICAgJGIgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfU1RBVElDX01PREUnXSA9PSAnQUNUSVZFJyAmJiAkYXJyYXlbJ3R5cGUnXSA9PSAnYWN0aXZlJykgew0KICAgICAgICAgICAgICAgICAgICAkYiA9IHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGFycmF5Wydvbmx5X2FjdGl2ZSddKSAmJiAkYXJyYXlbJ29ubHlfYWN0aXZlJ10gPT0gdHJ1ZSAmJiAkdGhpcy0+b3B0aW9uWydaQ19TVEFUSUNfTU9ERSddID09ICdBQ1RJVkUnKSB7DQogICAgICAgICAgICAgICAgICAgICRiID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJGFycmF5Wydvbmx5X3Jld3JpdGUnXSkgJiYgJGFycmF5Wydvbmx5X3Jld3JpdGUnXSA9PSB0cnVlICYmICR0aGlzLT5vcHRpb25bJ1pDX1NUQVRJQ19NT0RFJ10gPT0gJ1JFV1JJVEUnKSB7DQogICAgICAgICAgICAgICAgICAgICRiID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkYiA9IHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCRiKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPlNldFBvc3RUeXBlX1N1YigkcG9zdGlkLCAncm91dGVzJywgJGFycmF5WyduYW1lJ10sIGFycmF5KCRhcnJheVsndHlwZSddID0+ICRhcnJheVsnbmFtZSddKSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoIWVtcHR5KCRhcnJheVsndXJscnVsZSddKSkgeyAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAkcHJlZml4X25hbWUgPSAncG9zdF8nIC4gJHBvc3RuYW1lIC4gJ18nOw0KICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3J1bGVuYW1lID0gc3RyX2lyZXBsYWNlKCRwcmVmaXhfbmFtZSwgJycsICRhcnJheVsnbmFtZSddKTsNCiAgICAgICAgICAgICAgICAgICAgJHJ1bGVuYW1lID0gJHByZWZpeF9ydWxlbmFtZSAuICdfdXJscnVsZSc7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5TZXRQb3N0VHlwZSgkcG9zdGlkLCAkcnVsZW5hbWUsICRhcnJheVsndXJscnVsZSddKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W6Lev55Sx5Ye95pWwDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHR5cGUg6Lev55Sx57G75Z6LDQogICAgICogQHBhcmFtICRuYW1lIOWQjeensA0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRSb3V0ZSgkdHlwZSwgJG5hbWUgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgJHJvdXRlcyA9ICYkdGhpcy0+cm91dGVzOw0KICAgICAgICBpZiAoaXNfYXJyYXkoJHR5cGUpKSB7DQogICAgICAgICAgICAkbmFtZSA9IGN1cnJlbnQoJHR5cGUpOw0KICAgICAgICAgICAgJHR5cGUgPSBrZXkoJHR5cGUpOw0KICAgICAgICB9DQogICAgICAgIGlmIChpc3NldCgkcm91dGVzWyR0eXBlIC4gJ18nIC4gJG5hbWVdKSkgew0KICAgICAgICAgICAgcmV0dXJuICRyb3V0ZXNbJHR5cGUgLiAnXycgLiAkbmFtZV07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKDpmaTot6/nlLHlh73mlbANCiAgICAgKg0KICAgICAqIEBwYXJhbSAkdHlwZSDot6/nlLHnsbvlnosNCiAgICAgKiBAcGFyYW0gJG5hbWUg5ZCN56ewDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFJlbW92ZVJvdXRlKCR0eXBlLCAkbmFtZSA9IG51bGwpDQogICAgew0KICAgICAgICAkcm91dGVzID0gJiR0aGlzLT5yb3V0ZXM7DQogICAgICAgIGlmIChpc19hcnJheSgkdHlwZSkpIHsNCiAgICAgICAgICAgICRuYW1lID0gY3VycmVudCgkdHlwZSk7DQogICAgICAgICAgICAkdHlwZSA9IGtleSgkdHlwZSk7DQogICAgICAgIH0NCiAgICAgICAgdW5zZXQoJHJvdXRlc1skdHlwZSAuICdfJyAuICRuYW1lXSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOa4heepuuaVtOS4qui3r+eUsSDmiJYg5oyH5a6a6Lev55Sx57G75Z6L55qEDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENsZWFyUm91dGUoJHJvdXRlX3R5cGUgPSAnJykNCiAgICB7DQogICAgICAgIGlmICghZW1wdHkoJHJvdXRlX3R5cGUpKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkdGhpcy0+cm91dGVzIGFzICRuYW1lID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgIGlmIChzdHJpcG9zKCRuYW1lLCAkcm91dGVfdHlwZSAuICdfJykgPT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHRoaXMtPnJvdXRlc1skbmFtZV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICR0aGlzLT5yb3V0ZXMgPSBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLy/kuL7kvovvvJpiYWNrZW5kLXVpLCwsDQogICAgcHJvdGVjdGVkICRwcm90ZWN0X2V4Y2x1c2l2ZSA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiDpgJrnn6Xns7vnu5/mjqfliLbmnYMuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNldEV4Y2x1c2l2ZSgkZnVuY3Rpb24sICRhcHBpZCkNCiAgICB7DQogICAgICAgIGlmICgkYXBwaWQgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+cHJvdGVjdF9leGNsdXNpdmVbJGZ1bmN0aW9uXSA9ICRhcHBpZDsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmn6Xor6Lns7vnu5/mjqfliLbmnYMuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIElzRXhjbHVzaXZlKCRmdW5jdGlvbikNCiAgICB7DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+cHJvdGVjdF9leGNsdXNpdmVbJGZ1bmN0aW9uXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cHJvdGVjdF9leGNsdXNpdmVbJGZ1bmN0aW9uXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDnu5Hlrpp6YnDkuYvliY3ni6znq4vnmoTmnYLkubHnmoTlhajlsYDlr7nosaHmlbDnu4TliLDmgLvnvJPlrZjlr7nosaHkuIouDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEJpbmRpbmdDYWNoZSgpDQogICAgew0KICAgICAgICAkY2FjaGVvYmplY3QgPSAmJHRoaXMtPmNhY2hlb2JqZWN0Ow0KICAgICAgICAvL3Bvc3Tnsbvlj4rlhbbmtL7nlJ/nsbvpg73lkIznlKjov5nkuIDkuKrnvJPlrZgNCiAgICAgICAgJGNhY2hlb2JqZWN0WydQb3N0J10gPSAmJHRoaXMtPnBvc3RzOw0KICAgICAgICAkY2FjaGVvYmplY3RbJ01lbWJlciddID0gJiR0aGlzLT5tZW1iZXJzOw0KICAgICAgICAvL+WQjOexu+e8k+WtmO+8miR0aGlzLT5tZW1iZXJzYnluYW1lDQogICAgICAgICRjYWNoZW9iamVjdFsnQ2F0ZWdvcnknXSA9ICYkdGhpcy0+Y2F0ZWdvcmllc19hbGw7DQogICAgICAgIC8v5ZCM57G757yT5a2Y77yaJHRoaXMtPmNhdGVnb3JpZXNfdHlwZQ0KICAgICAgICAkY2FjaGVvYmplY3RbJ1RhZyddID0gJiR0aGlzLT50YWdzX2FsbDsNCiAgICAgICAgLy/lkIznsbvnvJPlrZjvvJokdGhpcy0+dGFnc190eXBlDQogICAgICAgIC8v5ZCM57G757yT5a2Y77yaJHRoaXMtPnRhZ3NieW5hbWVfdHlwZQ0KICAgICAgICAkY2FjaGVvYmplY3RbJ01vZHVsZSddID0gJiR0aGlzLT5tb2R1bGVzOw0KICAgICAgICAvL+WQjOexu+e8k+WtmO+8miR0aGlzLT5tb2R1bGVzYnlmaWxlbmFtZQ0KICAgICAgICAkY2FjaGVvYmplY3RbJ0NvbW1lbnQnXSA9ICYkdGhpcy0+Y29tbWVudHM7DQogICAgICAgICRjYWNoZW9iamVjdFsnVXBsb2FkJ10gPSBhcnJheSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuWvueixoemZhOWKoOWIsOaAu+e8k+WtmOWvueixoeS4ii4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQWRkQ2FjaGUoJiRvYmplY3QpDQogICAgew0KICAgICAgICAkY2xhc3NuYW1lID0gZ2V0X2NsYXNzKCRvYmplY3QpOw0KICAgICAgICBpZiAoaXNfc3ViY2xhc3Nfb2YoJG9iamVjdCwgJ0Jhc2UnKSA9PSBmYWxzZSAmJiAkY2xhc3NuYW1lICE9ICdCYXNlJykgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgICRjYWNoZW9iamVjdCA9ICYkdGhpcy0+Y2FjaGVvYmplY3Q7DQogICAgICAgIGlmIChpc19zdWJjbGFzc19vZigkY2xhc3NuYW1lLCAnQmFzZVBvc3QnKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAkY2xhc3NuYW1lID0gJ1Bvc3QnOw0KICAgICAgICB9DQogICAgICAgIGlmICghaXNzZXQoJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdKSkgew0KICAgICAgICAgICAgJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdID0gYXJyYXkoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZW1wdHkoJG9iamVjdC0+SUQpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkY2FjaGVvYmplY3RbJGNsYXNzbmFtZV1bJG9iamVjdC0+SURdID0gJG9iamVjdDsNCg0KICAgICAgICBzd2l0Y2ggKCRjbGFzc25hbWUpIHsNCiAgICAgICAgICAgIGNhc2UgJ01vZHVsZSc6DQogICAgICAgICAgICAgICAgJHRoaXMtPm1vZHVsZXNieWZpbGVuYW1lWyRvYmplY3QtPkZpbGVOYW1lXSA9ICYkY2FjaGVvYmplY3RbJGNsYXNzbmFtZV1bJG9iamVjdC0+SURdOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAnVGFnJzoNCiAgICAgICAgICAgICAgICAvL2lzc2V0KCR0aGlzLT50YWdzX3R5cGVbJG9iamVjdC0+VHlwZV0pIHx8ICR0aGlzLT50YWdzX3R5cGVbJG9iamVjdC0+VHlwZV0gPSBhcnJheSgpOw0KICAgICAgICAgICAgICAgICR0aGlzLT50YWdzX3R5cGVbJG9iamVjdC0+VHlwZV1bJG9iamVjdC0+SURdID0gJiRjYWNoZW9iamVjdFskY2xhc3NuYW1lXVskb2JqZWN0LT5JRF07DQogICAgICAgICAgICAgICAgLy9pc3NldCgkdGhpcy0+dGFnc2J5bmFtZV90eXBlWyRvYmplY3QtPlR5cGVdKSB8fCAkdGhpcy0+dGFnc2J5bmFtZV90eXBlWyRvYmplY3QtPlR5cGVdID0gYXJyYXkoKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+dGFnc2J5bmFtZV90eXBlWyRvYmplY3QtPlR5cGVdWyRvYmplY3QtPk5hbWVdID0gJiRjYWNoZW9iamVjdFskY2xhc3NuYW1lXVskb2JqZWN0LT5JRF07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICdDYXRlZ29yeSc6DQogICAgICAgICAgICAgICAgLy9pc3NldCgkdGhpcy0+Y2F0ZWdvcmllc190eXBlWyRvYmplY3QtPlR5cGVdKSB8fCAkdGhpcy0+Y2F0ZWdvcmllc190eXBlWyRvYmplY3QtPlR5cGVdID0gYXJyYXkoKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc190eXBlWyRvYmplY3QtPlR5cGVdWyRvYmplY3QtPklEXSA9ICYkY2FjaGVvYmplY3RbJGNsYXNzbmFtZV1bJG9iamVjdC0+SURdOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAnTWVtYmVyJzoNCiAgICAgICAgICAgICAgICAkdGhpcy0+bWVtYmVyc2J5bmFtZVskb2JqZWN0LT5OYW1lXSA9ICYkY2FjaGVvYmplY3RbJGNsYXNzbmFtZV1bJG9iamVjdC0+SURdOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuWvueixoemZhOS7juaAu+e8k+WtmOWvueixoeS4iuWIoOmZpOaOiS4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVtb3ZlQ2FjaGUoJiRvYmplY3QpDQogICAgew0KICAgICAgICAkY2xhc3NuYW1lID0gZ2V0X2NsYXNzKCRvYmplY3QpOw0KICAgICAgICBpZiAoaXNfc3ViY2xhc3Nfb2YoJG9iamVjdCwgJ0Jhc2UnKSA9PSBmYWxzZSAmJiAkY2xhc3NuYW1lICE9ICdCYXNlJykgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgICRjYWNoZW9iamVjdCA9ICYkdGhpcy0+Y2FjaGVvYmplY3Q7DQogICAgICAgIGlmIChpc19zdWJjbGFzc19vZigkY2xhc3NuYW1lLCAnQmFzZVBvc3QnKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAkY2xhc3NuYW1lID0gJ1Bvc3QnOw0KICAgICAgICB9DQogICAgICAgIGlmICghaXNzZXQoJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdKSkgew0KICAgICAgICAgICAgJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdID0gYXJyYXkoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZW1wdHkoJG9iamVjdC0+SUQpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBzd2l0Y2ggKCRjbGFzc25hbWUpIHsNCiAgICAgICAgICAgIGNhc2UgJ01vZHVsZSc6DQogICAgICAgICAgICAgICAgdW5zZXQoJHRoaXMtPm1vZHVsZXNieWZpbGVuYW1lWyRvYmplY3QtPkZpbGVOYW1lXSk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICdNZW1iZXInOg0KICAgICAgICAgICAgICAgIHVuc2V0KCR0aGlzLT5tZW1iZXJzYnluYW1lWyRvYmplY3QtPk5hbWVdKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgJ1RhZyc6DQogICAgICAgICAgICAgICAgdW5zZXQoJHRoaXMtPnRhZ3NfdHlwZVskb2JqZWN0LT5UeXBlXVskb2JqZWN0LT5JRF0pOw0KICAgICAgICAgICAgICAgIHVuc2V0KCR0aGlzLT50YWdzYnluYW1lX3R5cGVbJG9iamVjdC0+VHlwZV1bJG9iamVjdC0+TmFtZV0pOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAnQ2F0ZWdvcnknOg0KICAgICAgICAgICAgICAgIHVuc2V0KCR0aGlzLT5jYXRlZ29yaWVzX3R5cGVbJG9iamVjdC0+VHlwZV1bJG9iamVjdC0+SURdKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgICAgICB1bnNldCgkY2FjaGVvYmplY3RbJGNsYXNzbmFtZV1bJG9iamVjdC0+SURdKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlsIZQb3N057G75a+56LGh6ZmE5Yqg5YiwUG9zdOe8k+WtmOWvueixoeS4ii4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQWRkUG9zdENhY2hlKCYkb2JqZWN0KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5BZGRDYWNoZSgkb2JqZWN0KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlsIZQb3N057G75a+56LGh6ZmE5LuOUG9zdOe8k+WtmOWvueixoeS4iuWIoOmZpOaOiS4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVtb3ZlUG9zdENhY2hlKCYkb2JqZWN0KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5SZW1vdmVDYWNoZSgkb2JqZWN0KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmn6Xor6Llr7nosaHnmoRJROeahOWAvOaYr+WQpuWtmOWcqOS6juaAu+e8k+WtmOWvueixoeS4ii4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tDYWNoZSgkY2xhc3NuYW1lLCAkaWR2YWx1ZSA9IG51bGwpDQogICAgew0KICAgICAgICAvL+WmguaenOWPque7meS6huesrOS4gOS4quWPguaVsO+8jOS4lOaYr29iamVjdOeahOivnQ0KICAgICAgICBpZiAoaXNfb2JqZWN0KCRjbGFzc25hbWUpKSB7DQogICAgICAgICAgICBpZiAoaXNfc3ViY2xhc3Nfb2YoJGNsYXNzbmFtZSwgJ0Jhc2UnKSA9PSBmYWxzZSAmJiBnZXRfY2xhc3MoJGNsYXNzbmFtZSkgIT0gJ0Jhc2UnKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGlkbmFtZSA9ICRjbGFzc25hbWUtPkdldElkTmFtZSgpOw0KICAgICAgICAgICAgJGlkdmFsdWUgPSAkY2xhc3NuYW1lLT4kaWRuYW1lOw0KICAgICAgICAgICAgJGNsYXNzbmFtZSA9IGdldF9jbGFzcygkY2xhc3NuYW1lKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNfc3ViY2xhc3Nfb2YoJGNsYXNzbmFtZSwgJ0Jhc2UnKSA9PSBmYWxzZSAmJiAkY2xhc3NuYW1lICE9ICdCYXNlJykgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgICRjYWNoZW9iamVjdCA9ICYkdGhpcy0+Y2FjaGVvYmplY3Q7DQogICAgICAgIGlmIChpc19zdWJjbGFzc19vZigkY2xhc3NuYW1lLCAnQmFzZVBvc3QnKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAkY2xhc3NuYW1lID0gJ1Bvc3QnOw0KICAgICAgICB9DQogICAgICAgIGlmICghaXNzZXQoJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGFycmF5X2tleV9leGlzdHMoJGlkdmFsdWUsICRjYWNoZW9iamVjdFskY2xhc3NuYW1lXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W5oyH5a6aY2xhc3NuYW1l55qE57yT5a2Y5pWw57uE77yM5oyH5a6a5LqGJGlkdmFsdWXlsLHov5Tlm57ljZXkuKrnmoRvYmplY3TvvIzkuI3mjIflrprlsLHov5Tlm55vYmplY3RzDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uICZHZXRDYWNoZSgkY2xhc3NuYW1lLCAkaWR2YWx1ZSA9IG51bGwpDQogICAgew0KICAgICAgICAkY2FjaGVvYmplY3QgPSAmJHRoaXMtPmNhY2hlb2JqZWN0Ow0KICAgICAgICBpZiAoaXNfc3ViY2xhc3Nfb2YoJGNsYXNzbmFtZSwgJ0Jhc2VQb3N0JykgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgJGNsYXNzbmFtZSA9ICdQb3N0JzsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWlzc2V0KCRjYWNoZW9iamVjdFskY2xhc3NuYW1lXSkpIHsNCiAgICAgICAgICAgICRjYWNoZW9iamVjdFskY2xhc3NuYW1lXSA9IGFycmF5KCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFpc19udWxsKCRpZHZhbHVlKSkgew0KICAgICAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoJGlkdmFsdWUsICRjYWNoZW9iamVjdFskY2xhc3NuYW1lXSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdWyRpZHZhbHVlXTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJG51bGwgPSBudWxsOw0KICAgICAgICAgICAgICAgIHJldHVybiAkbnVsbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gJGNhY2hlb2JqZWN0WyRjbGFzc25hbWVdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS7peS4i+mDqOWIhuS4uuW3suW6n+W8g++8jOS9huiAg+iZkeWIsOWFvOWuueaAp+S/neeVmeeahOS7o+eggSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLg0KICAgICAqLw0KDQogICAgLyoqDQogICAgICog5qOA5rWL5b2T5YmNdXJs77yM5aaC5p6c5LiN56ym5ZCI6K6+572u5bCx6Lez6L2s5Yiw5Zu65a6a5Z+f5ZCN55qE6ZO+5o6lLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWRpcmVjdFBlcm1hbmVudERvbWFpbigpDQogICAgew0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeW5tuW8gOWQr0d6aXDljovnvKkuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrR3ppcCgpDQogICAgew0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWQr+eUqEd6aXAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFN0YXJ0R3ppcCgpDQogICAgew0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgeeUqOaIt+eZu+W9le+8iE1ENeWKoHpicC0+Z3VpZOebkOWQjueahOWvhuegge+8iS4NCiAgICAgKg0KICAgICAqIEBkZXByZWNhdGVkDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lICAgICAgICAg55So5oi35ZCNDQogICAgICogQHBhcmFtIHN0cmluZyAkcHNfcGF0aF9oYXNoIE1ENeWKoHpicC0+Z3VpZOebkOWQjueahOWvhueggQ0KICAgICAqIEBwYXJhbSBvYmplY3QgJG1lbWJlciAgICAgICDov5Tlm57or7vlj5bmiJDlip/nmoRtZW1iZXLlr7nosaENCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWZXJpZnlfTUQ1UGF0aCgkbmFtZSwgJHBzX3BhdGhfaGFzaCwgJiRtZW1iZXIgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgaWYgKCRuYW1lID09ICcnIHx8ICRwc19wYXRoX2hhc2ggPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWUoJG5hbWUpOw0KICAgICAgICBpZiAoJG0tPklEICE9IG51bGwpIHsNCiAgICAgICAgICAgIGlmICgkbS0+UGFzc1dvcmRfTUQ1UGF0aCA9PSAkcHNfcGF0aF9oYXNoKSB7DQogICAgICAgICAgICAgICAgJG1lbWJlciA9ICRtOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+WQ1NSRiBUb2tlbueahOmUmeivr+WIq+WQjS4NCiAgICAgKg0KICAgICAqIEBkZXByZWNhdGVkIFVzZSBgYEdldENTUkZUb2tlbmBgDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZCDlupTnlKhJRO+8jOWPr+S7peS/neivgeavj+S4quW6lOeUqOiOt+WPluS4jeWQjOeahFRva2VuDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRUb2tlbigkaWQgPSAnJykNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0Q1NSRlRva2VuKCRpZCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+BQ1NSRiBUb2tlbueahOmUmeivr+WIq+WQjS4NCiAgICAgKg0KICAgICAqIEBkZXByZWNhdGVkIFVzZSBgYFZlcmlmeUNTUkZUb2tlbmBgDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHQNCiAgICAgKiBAcGFyYW0gJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmFsaWRUb2tlbigkdCwgJGlkID0gJycpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPlZlcmlmeUNTUkZUb2tlbigkdCwgJGlkKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAZGVwcmVjYXRlZA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRDYXRlZ29yeXMoKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5Mb2FkQ2F0ZWdvcmllcygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBkZXByZWNhdGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldEFjdGlvbkRlc2NyaXB0aW9uKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRBY3Rpb25OYW1lKCRuYW1lKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bkvJror51XZWJUb2tlbi4NCiAgICAgKg0KICAgICAqIEBkZXByZWNhdGVkIOavq+aXoOaEj+S5ie+8jOWNs+WwhuW6n+W8gw0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkd3RfaWQNCiAgICAgKiBAcGFyYW0gaW50ICAgICRkYXkgICDpu5jorqQx5aSp5pyJ5pWI5pyf77yMMeWwj+aXtuS4ujEvMjTvvIwx5YiG6ZKf5Li6MS8oMjQqNjApDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRXZWJUb2tlbigkd3RfaWQgPSAnJywgJGRheSA9IDEpDQogICAgew0KICAgICAgICAkdCA9IChpbnR2YWwoJGRheSAqIDI0ICogMzYwMCkgKyB0aW1lKCkpOw0KDQogICAgICAgIHJldHVybiBDcmVhdGVXZWJUb2tlbigkd3RfaWQsICR0LCAkdGhpcy0+Z3VpZCwgJHRoaXMtPnVzZXItPlN0YXR1cywgJHRoaXMtPnVzZXItPklELCAkdGhpcy0+dXNlci0+UGFzc3dvcmQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgeS8muivnVdlYlRva2VuLg0KICAgICAqDQogICAgICogQGRlcHJlY2F0ZWQg5q+r5peg5oSP5LmJ77yM5Y2z5bCG5bqf5byDDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHd0DQogICAgICogQHBhcmFtICR3dF9pZA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZhbGlkV2ViVG9rZW4oJHd0LCAkd3RfaWQgPSAnJykNCiAgICB7DQogICAgICAgIGlmIChWZXJpZnlXZWJUb2tlbigkd3QsICR3dF9pZCwgJHRoaXMtPmd1aWQsICR0aGlzLT51c2VyLT5TdGF0dXMsICR0aGlzLT51c2VyLT5JRCwgJHRoaXMtPnVzZXItPlBhc3N3b3JkKSA9PT0gdHJ1ZSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQp9DQo=</file>
	<file name='zb_system\function\lib\zbplangs.php' crc32='A3F801D8'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQpjbGFzcyBaYnBMYW5ncyBpbXBsZW1lbnRzIEl0ZXJhdG9yQWdncmVnYXRlDQp7DQoNCiAgICBwcml2YXRlICRpdGVtID0gbnVsbDsNCg0KICAgIHByaXZhdGUgJGFycmF5ID0gYXJyYXkoKTsNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgmJGFycmF5LCAkbmFtZSA9ICcnKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX2FycmF5KCRhcnJheSkpIHsNCiAgICAgICAgICAgICR0aGlzLT5hcnJheSA9ICYkYXJyYXk7DQogICAgICAgICAgICAkdGhpcy0+aXRlbSA9ICRuYW1lOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHRoaXMtPml0ZW0gPSAkYXJyYXk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b1N0cmluZygpDQogICAgew0KICAgICAgICByZXR1cm4gKHN0cmluZykgJHRoaXMtPml0ZW07DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIF9fZ2V0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoJG5hbWUsICR0aGlzLT5hcnJheSkpIHsNCiAgICAgICAgICAgIGlmIChpc19hcnJheSgkdGhpcy0+YXJyYXlbJG5hbWVdKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgWmJwTGFuZ3MoJHRoaXMtPmFycmF5WyRuYW1lXSwgJG5hbWUpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPmFycmF5WyRuYW1lXTsNCiAgICAgICAgICAgICAgICAvL3JldHVybiBuZXcgWmJwTGFuZ3MoJHRoaXMtPmFycmF5WyRuYW1lXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IFpicExhbmdzKCRuYW1lKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2lzc2V0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGFycmF5X2tleV9leGlzdHMoJG5hbWUsICR0aGlzLT5hcnJheSk7DQogICAgfQ0KDQogICAgI1tcUmV0dXJuVHlwZVdpbGxDaGFuZ2VdDQogICAgcHVibGljIGZ1bmN0aW9uIGdldEl0ZXJhdG9yKCkgew0KICAgICAgICAkbmV3YXJyYXkgPSBhcnJheSgpOw0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+YXJyYXkgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgIGlmICghaXNfYXJyYXkoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICRuZXdhcnJheVska2V5XSA9ICR2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3IoJG5ld2FycmF5KTsNCiAgICB9DQoNCn0NCg==</file>
	<file name='zb_system\function\lib\database\mysql.php' crc32='B877A40C'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\mysqli.php' crc32='2D566540'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\pdo_mysql.php' crc32='DAE70299'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\pdo_postgresql.php' crc32='930C3473'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\pdo_sqlite.php' crc32='A01863C6'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\postgresql.php' crc32='D98ECA1C'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\sqlite.php' crc32='B6D21972'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBTUUxpdGUy5pWw5o2u5bqT5pON5L2c57G7Lg0KICovDQpjbGFzcyBEYXRhYmFzZV9fU1FMaXRlIGltcGxlbWVudHMgRGF0YWJhc2VfX0ludGVyZmFjZQ0Kew0KDQogICAgcHVibGljICR0eXBlID0gJ3NxbGl0ZSc7DQoNCiAgICBwdWJsaWMgJHZlcnNpb24gPSAnMic7DQoNCiAgICBwdWJsaWMgJGVycm9yID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nfG51bGwg5pWw5o2u5bqT5ZCN5YmN57yADQogICAgICovDQogICAgcHVibGljICRkYnByZSA9IG51bGw7DQoNCiAgICBwcml2YXRlICRkYiA9IG51bGw7IC8v5pWw5o2u5bqT6L+e5o6l5a6e5L6LDQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZ3xudWxsIOaVsOaNruW6k+WQjQ0KICAgICAqLw0KICAgIHB1YmxpYyAkZGJuYW1lID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgRGJTcWx8bnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyAkc3FsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIg5a2X56ym6ZuGDQogICAgICovDQogICAgcHVibGljICRjaGFyc2V0ID0gJ3V0ZjgnOw0KDQogICAgLyoqDQogICAgICogQHZhciDlrZfnrKbmjpLluo8NCiAgICAgKi8NCiAgICBwdWJsaWMgJGNvbGxhdGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICog5p6E6YCg5Ye95pWw77yM5a6e5L6L5YyWJHNxbOWPguaVsC4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnNxbCA9IG5ldyBEYlNxbCgkdGhpcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFc2NhcGVTdHJpbmcoJHMpDQogICAgew0KICAgICAgICByZXR1cm4gc3FsaXRlX2VzY2FwZV9zdHJpbmcoJHMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkYXJyYXkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBPcGVuKCRhcnJheSkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+ZGIgPSBzcWxpdGVfb3BlbigkYXJyYXlbMF0sIDA2NjYsICRzcWxpdGVlcnJvcikpIHsNCiAgICAgICAgICAgICR0aGlzLT5kYnByZSA9ICRhcnJheVsxXTsNCiAgICAgICAgICAgICR0aGlzLT5kYm5hbWUgPSAkYXJyYXlbMF07DQogICAgICAgICAgICAkdGhpcy0+dmVyc2lvbiA9IHNxbGl0ZV9saWJ2ZXJzaW9uKCk7DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5YWz6Zet5pWw5o2u5bqT6L+e5o6lLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDbG9zZSgpDQogICAgew0KICAgICAgICBzcWxpdGVfY2xvc2UoJHRoaXMtPmRiKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHMNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnlNdWxpdCgkcykNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+UXVlcnlNdWx0aSgkcyk7DQogICAgfQ0KDQogICAgLy/plJnliKvlrZflh73mlbDvvIzljoblj7Lljp/lm6Dkv53nlZnkuIvmnaUNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBRdWVyeU11bHRpKCRzKQ0KICAgIHsNCiAgICAgICAgLy8kYT1leHBsb2RlKCc7JyxzdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRzKSk7DQogICAgICAgICRhID0gZXhwbG9kZSgnOycsICRzKTsNCiAgICAgICAgZm9yZWFjaCAoJGEgYXMgJHMpIHsNCiAgICAgICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgICAgICBpZiAoJHMgIT0gJycpIHsNCiAgICAgICAgICAgICAgICBzcWxpdGVfcXVlcnkoJHRoaXMtPmRiLCAkdGhpcy0+c3FsLT5GaWx0ZXIoJHMpKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGFycmF5DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFF1ZXJ5KCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgLy8g6YGN5Y6G5Ye65p2lDQogICAgICAgICRyZXN1bHRzID0gQHNxbGl0ZV9xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJGUgPSBzcWxpdGVfbGFzdF9lcnJvcigkdGhpcy0+ZGIpOw0KICAgICAgICBpZiAoJGUgIT0gMCkgew0KICAgICAgICAgICAgdHJpZ2dlcl9lcnJvcigkZSAuIHNxbGl0ZV9lcnJvcl9zdHJpbmcoJGUpLCBFX1VTRVJfTk9USUNFKTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgICRkYXRhID0gYXJyYXkoKTsNCiAgICAgICAgaWYgKGlzX3Jlc291cmNlKCRyZXN1bHRzKSkgew0KICAgICAgICAgICAgd2hpbGUgKCRyb3cgPSBzcWxpdGVfZmV0Y2hfYXJyYXkoJHJlc3VsdHMpKSB7DQogICAgICAgICAgICAgICAgJGRhdGFbXSA9ICRyb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZGF0YVtdID0gJHJlc3VsdHM7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGRhdGE7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRxdWVyeQ0KICAgICAqDQogICAgICogQHJldHVybiBTUUxpdGVSZXN1bHQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVXBkYXRlKCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgJHIgPSBzcWxpdGVfcXVlcnkoJHRoaXMtPmRiLCAkdGhpcy0+c3FsLT5GaWx0ZXIoJHF1ZXJ5KSk7DQogICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgcmV0dXJuICRyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gU1FMaXRlUmVzdWx0DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbGV0ZSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgICRyID0gc3FsaXRlX3F1ZXJ5KCR0aGlzLT5kYiwgJHRoaXMtPnNxbC0+RmlsdGVyKCRxdWVyeSkpOw0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgIHJldHVybiAkcjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbnNlcnQoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgIHNxbGl0ZV9xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCg0KICAgICAgICByZXR1cm4gc3FsaXRlX2xhc3RfaW5zZXJ0X3Jvd2lkKCR0aGlzLT5kYik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICR0YWJsZQ0KICAgICAqIEBwYXJhbSAkZGF0YWluZm8NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8sICRlbmdpbmUgPSBudWxsLCAkY2hhcnNldCA9IG51bGwsICRjb2xsYXRlID0gbnVsbCkNCiAgICB7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkNyZWF0ZVRhYmxlKCR0YWJsZSwgJGRhdGFpbmZvKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICR0YWJsZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWxUYWJsZSgkdGFibGUpDQogICAgew0KICAgICAgICAkdGFibGUgPSBzdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICR0YWJsZSk7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkRlbFRhYmxlKCR0YWJsZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkdGFibGUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFeGlzdFRhYmxlKCR0YWJsZSkNCiAgICB7DQogICAgICAgICR0YWJsZSA9IHN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHRhYmxlKTsNCiAgICAgICAgJGEgPSAkdGhpcy0+UXVlcnkoJHRoaXMtPnNxbC0+RXhpc3RUYWJsZSgkdGFibGUpKTsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRiID0gY3VycmVudCgkYSk7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGIpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkYyA9IChpbnQpIGN1cnJlbnQoJGIpOw0KICAgICAgICBpZiAoJGMgPiAwKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgZnVuY3Rpb24gTG9nc0Vycm9yKCkNCiAgICB7DQogICAgICAgICRlID0gc3FsaXRlX2xhc3RfZXJyb3IoJHRoaXMtPmRiKTsNCiAgICAgICAgaWYgKCRlICE9IDApIHsNCiAgICAgICAgICAgICR0aGlzLT5lcnJvcltdID0gYXJyYXkoJGUsIHNxbGl0ZV9lcnJvcl9zdHJpbmcoJGUpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS6i+WKoeWkhOeQhg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkcXVlcnkg5oyH5LukDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVHJhbnNhY3Rpb24oJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5RdWVyeSgkdGhpcy0+c3FsLT5UcmFuc2FjdGlvbigkcXVlcnkpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKTmlq3mlbDmja7ooajnmoTlrZfmrrXmmK/lkKblrZjlnKguDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0YWJsZSDooajlkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRmaWVsZCDlrZfmrrXlkI0NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFeGlzdENvbHVtbigkdGFibGUsICRmaWVsZCkNCiAgICB7DQogICAgICAgICRyID0gbnVsbDsNCiAgICAgICAgWkJsb2dFeGNlcHRpb246OlN1c3BlbmRFcnJvckhvb2soKTsNCiAgICAgICAgJHIgPSBAJHRoaXMtPlF1ZXJ5KCJQUkFHTUEgdGFibGVfaW5mbyhbJHRhYmxlXSkiKTsNCiAgICAgICAgWkJsb2dFeGNlcHRpb246OlJlc3VtZUVycm9ySG9vaygpOw0KICAgICAgICAkciA9IHNlcmlhbGl6ZSgkcik7DQogICAgICAgIGlmIChzdHJpcG9zKCRyLCAnIicgLiAkZmllbGQgLiAnIicpICE9PSBmYWxzZSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCn0NCg==</file>
	<file name='zb_system\function\lib\database\sqlite3.php' crc32='10E0C243'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBTUUxpdGUz5pWw5o2u5bqT5pON5L2c57G7Lg0KICovDQpjbGFzcyBEYXRhYmFzZV9fU1FMaXRlMyBpbXBsZW1lbnRzIERhdGFiYXNlX19JbnRlcmZhY2UNCnsNCg0KICAgIHB1YmxpYyAkdHlwZSA9ICdzcWxpdGUnOw0KDQogICAgcHVibGljICR2ZXJzaW9uID0gJzMnOw0KDQogICAgcHVibGljICRlcnJvciA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZ3xudWxsIOaVsOaNruW6k+WQjeWJjee8gA0KICAgICAqLw0KICAgIHB1YmxpYyAkZGJwcmUgPSBudWxsOw0KDQogICAgcHJpdmF0ZSAkZGIgPSBudWxsOyAvL+aVsOaNruW6k+i/nuaOpeWunuS+iw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmd8bnVsbCDmlbDmja7lupPlkI0NCiAgICAgKi8NCiAgICBwdWJsaWMgJGRibmFtZSA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIERiU3FsfG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHNxbCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIOWtl+espumbhg0KICAgICAqLw0KICAgIHB1YmxpYyAkY2hhcnNldCA9ICd1dGY4JzsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIg5a2X56ym5o6S5bqPDQogICAgICovDQogICAgcHVibGljICRjb2xsYXRlID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOWHveaVsO+8jOWunuS+i+WMliRzcWzlj4LmlbAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgICR0aGlzLT5zcWwgPSBuZXcgRGJTcWwoJHRoaXMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcw0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRXNjYXBlU3RyaW5nKCRzKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFNRTGl0ZTM6OmVzY2FwZVN0cmluZygkcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRhcnJheQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIE9wZW4oJGFycmF5KQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aGlzLT5kYiA9IG5ldyBTUUxpdGUzKCRhcnJheVswXSkpIHsNCiAgICAgICAgICAgICR0aGlzLT5kYnByZSA9ICRhcnJheVsxXTsNCiAgICAgICAgICAgICR0aGlzLT5kYm5hbWUgPSAkYXJyYXlbMF07DQogICAgICAgICAgICAkdGhpcy0+dmVyc2lvbiA9IHN1YnN0cihHZXRWYWx1ZUluQXJyYXkoU1FMaXRlMzo6dmVyc2lvbigpLCAndmVyc2lvblN0cmluZycpLCAxKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlhbPpl63mlbDmja7lupPov57mjqUuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENsb3NlKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5kYi0+Y2xvc2UoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHMNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnlNdWxpdCgkcykNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+UXVlcnlNdWx0aSgkcyk7DQogICAgfQ0KDQogICAgLy/plJnliKvlrZflh73mlbDvvIzljoblj7Lljp/lm6Dkv53nlZnkuIvmnaUNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBRdWVyeU11bHRpKCRzKQ0KICAgIHsNCiAgICAgICAgLy8kYT1leHBsb2RlKCc7JyxzdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRzKSk7DQogICAgICAgICRhID0gZXhwbG9kZSgnOycsICRzKTsNCiAgICAgICAgZm9yZWFjaCAoJGEgYXMgJHMpIHsNCiAgICAgICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgICAgICBpZiAoJHMgIT0gJycpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcykpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnkoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAvLyDpgY3ljoblh7rmnaUNCiAgICAgICAgJHJlc3VsdHMgPSBAJHRoaXMtPmRiLT5xdWVyeSgkdGhpcy0+c3FsLT5GaWx0ZXIoJHF1ZXJ5KSk7DQogICAgICAgICRlID0gJHRoaXMtPmRiLT5sYXN0RXJyb3JDb2RlKCk7DQogICAgICAgIGlmICgkZSAhPSAwKSB7DQogICAgICAgICAgICB0cmlnZ2VyX2Vycm9yKCRlIC4gJHRoaXMtPmRiLT5sYXN0RXJyb3JNc2coKSwgRV9VU0VSX05PVElDRSk7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICBpZiAoISgkcmVzdWx0cyBpbnN0YW5jZW9mIFNxbGl0ZTNSZXN1bHQpKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoJHJlc3VsdHMpOw0KICAgICAgICB9DQogICAgICAgICRkYXRhID0gYXJyYXkoKTsNCiAgICAgICAgaWYgKCRyZXN1bHRzLT5udW1Db2x1bW5zKCkgPiAwKSB7DQogICAgICAgICAgICB3aGlsZSAoJHJvdyA9ICRyZXN1bHRzLT5mZXRjaEFycmF5KCkpIHsNCiAgICAgICAgICAgICAgICAkZGF0YVtdID0gJHJvdzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRkYXRhW10gPSAkcmVzdWx0cy0+bnVtQ29sdW1ucygpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAkZGF0YTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFVwZGF0ZSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgICRyID0gJHRoaXMtPmRiLT5xdWVyeSgkdGhpcy0+c3FsLT5GaWx0ZXIoJHF1ZXJ5KSk7DQogICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgcmV0dXJuICRyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsZXRlKCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgJHIgPSAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICByZXR1cm4gJHI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRxdWVyeQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbnNlcnQoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICByZXR1cm4gJHRoaXMtPmRiLT5sYXN0SW5zZXJ0Um93SUQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHRhYmxlDQogICAgICogQHBhcmFtICRkYXRhaW5mbw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDcmVhdGVUYWJsZSgkdGFibGUsICRkYXRhaW5mbywgJGVuZ2luZSA9IG51bGwsICRjaGFyc2V0ID0gbnVsbCwgJGNvbGxhdGUgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPlF1ZXJ5TXVsaXQoJHRoaXMtPnNxbC0+Q3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8pKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHRhYmxlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbFRhYmxlKCR0YWJsZSkNCiAgICB7DQogICAgICAgICR0YWJsZSA9IHN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHRhYmxlKTsNCiAgICAgICAgJHRoaXMtPlF1ZXJ5TXVsaXQoJHRoaXMtPnNxbC0+RGVsVGFibGUoJHRhYmxlKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICR0YWJsZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFeGlzdFRhYmxlKCR0YWJsZSkNCiAgICB7DQogICAgICAgICR0YWJsZSA9IHN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHRhYmxlKTsNCiAgICAgICAgJGEgPSAkdGhpcy0+UXVlcnkoJHRoaXMtPnNxbC0+RXhpc3RUYWJsZSgkdGFibGUpKTsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRiID0gY3VycmVudCgkYSk7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGIpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkYyA9IChpbnQpIGN1cnJlbnQoJGIpOw0KICAgICAgICBpZiAoJGMgPiAwKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgZnVuY3Rpb24gTG9nc0Vycm9yKCkNCiAgICB7DQogICAgICAgICRlID0gJHRoaXMtPmRiLT5sYXN0RXJyb3JDb2RlKCk7DQogICAgICAgIGlmICgkZSA+IDApIHsNCiAgICAgICAgICAgICR0aGlzLT5lcnJvcltdID0gYXJyYXkoJGUsICR0aGlzLT5kYi0+bGFzdEVycm9yTXNnKCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5LqL5Yqh5aSE55CGDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRxdWVyeSDmjIfku6QNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBUcmFuc2FjdGlvbigkcXVlcnkpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPlF1ZXJ5KCR0aGlzLT5zcWwtPlRyYW5zYWN0aW9uKCRxdWVyeSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIpOaWreaVsOaNruihqOeahOWtl+auteaYr+WQpuWtmOWcqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlIOihqOWQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGZpZWxkIOWtl+auteWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEV4aXN0Q29sdW1uKCR0YWJsZSwgJGZpZWxkKQ0KICAgIHsNCiAgICAgICAgJHIgPSBudWxsOw0KICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6U3VzcGVuZEVycm9ySG9vaygpOw0KICAgICAgICAkciA9IEAkdGhpcy0+UXVlcnkoIlBSQUdNQSB0YWJsZV9pbmZvKFskdGFibGVdKSIpOw0KICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6UmVzdW1lRXJyb3JIb29rKCk7DQogICAgICAgICRyID0gc2VyaWFsaXplKCRyKTsNCiAgICAgICAgaWYgKHN0cmlwb3MoJHIsICciJyAuICRmaWVsZCAuICciJykgIT09IGZhbHNlKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\network\curl.php' crc32='B42705AE'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\network\filegetcontents.php' crc32='44B1BE37'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\network\fsockopen.php' crc32='A15822E1'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\network\interface.php' crc32='DE76D019'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIOe9kee7nOi/nuaOpeaOpeWPoy4NCiAqDQogKiBAcHJvcGVydHkgaW50ICRyZWFkeVN0YXRlIOeKtuaAgQ0KICogQHByb3BlcnR5IG1peGVkICRyZXNwb25zZUJvZHkg6L+U5Zue55qE5LqM6L+b5Yi2DQogKiBAcHJvcGVydHkgc3RyaW5nICRyZXNwb25zZVRleHQg6L+U5Zue55qE5a2X56ym5LiyDQogKiBAcHJvcGVydHkgU2ltcGxlWE1MRWxlbWVudCAkcmVzcG9uc2VYTUwg6L+U5Zue55qEWE1MIERPTQ0KICogQHByb3BlcnR5IGludCAkc3RhdHVzIOeKtuaAgeeggQ0KICogQHByb3BlcnR5IHN0cmluZyAkc3RhdHVzVGV4dCDnirbmgIHnoIHmlofmnKwNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgJHJlc3BvbnNlVmVyc2lvbiBIVFRQ54mI5pys5Y+3DQogKiBAcHJvcGVydHkgc3RyaW5nW10gJHJlc3BvbnNlSGVhZGVyIOi/lOWbnueahCBIVFRQIOWTjeW6lOWktA0KICovDQppbnRlcmZhY2UgTmV0d29ya19fSW50ZXJmYWNlDQp7DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGFib3J0KCk7DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGdldEFsbFJlc3BvbnNlSGVhZGVycygpOw0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRic3RySGVhZGVyDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGdldFJlc3BvbnNlSGVhZGVyKCRic3RySGVhZGVyKTsNCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkYnN0ck1ldGhvZA0KICAgICAqIEBwYXJhbSAkYnN0clVybA0KICAgICAqIEBwYXJhbSBib29sICAgJHZhckFzeW5jDQogICAgICogQHBhcmFtIHN0cmluZyAkYnN0clVzZXINCiAgICAgKiBAcGFyYW0gc3RyaW5nICRic3RyUGFzc3dvcmQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gb3BlbigkYnN0ck1ldGhvZCwgJGJzdHJVcmwsICR2YXJBc3luYyA9IHRydWUsICRic3RyVXNlciA9ICcnLCAkYnN0clBhc3N3b3JkID0gJycpOw0KDQogICAgLyoqDQogICAgICogQHBhcmFtIHN0cmluZyAkdmFyQm9keQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZW5kKCR2YXJCb2R5ID0gJycpOw0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRic3RySGVhZGVyDQogICAgICogQHBhcmFtICRic3RyVmFsdWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcigkYnN0ckhlYWRlciwgJGJzdHJWYWx1ZSk7DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGVuYWJsZUd6aXAoKTsNCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBpbnQgJG4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0TWF4UmVkaXJzKCRuID0gMCk7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIHN0cmluZyAkZW50aXR5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGFkZEJpbmFyeSgkbmFtZSwgJGVudGl0eSk7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIHN0cmluZyAkZW50aXR5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGFkZFRleHQoJG5hbWUsICRlbnRpdHkpOw0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRyZXNvbHZlVGltZW91dA0KICAgICAqIEBwYXJhbSAkY29ubmVjdFRpbWVvdXQNCiAgICAgKiBAcGFyYW0gJHNlbmRUaW1lb3V0DQogICAgICogQHBhcmFtICRyZWNlaXZlVGltZW91dA0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRUaW1lT3V0cygkcmVzb2x2ZVRpbWVvdXQsICRjb25uZWN0VGltZW91dCwgJHNlbmRUaW1lb3V0LCAkcmVjZWl2ZVRpbWVvdXQpOw0KDQogICAgLyoqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRTdGF0dXNDb2RlKCk7DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGdldFN0YXR1c1RleHQoKTsNCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UmVhc29uUGhyYXNlKCk7DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIHdpdGhTdGF0dXMoJGNvZGUsICRyZWFzb25QaHJhc2UgPSAnJyk7DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGdldEJvZHkoKTsNCg0KICAgIC8qKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0SGVhZGVycygpOw0KDQogICAgLyoqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRIZWFkZXIoJG5hbWUpOw0KDQp9DQo=</file>
	<file name='zb_system\function\lib\sql\global.php' crc32='C347151'  dt:dt='bin.base64'></file>
	<file name='zb_users\language\en.php' crc32='6C18FF38'  dt:dt='bin.base64'>PD9waHANCg0KLy88bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+DQovL1RoZSBzZWNvbmQgbGluZSBvZiB0aGlzIGZpbGUgaXMgdGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlDQovL0F1dGhvcjpZYW5nIFlpeHVhbg0KLy9BdXRob3IgVVJJOmh0dHA6Ly93d3cueWFuZ3lpeHVhbi5jb20NCi8vRS1tYWlsOnNlbkB5YW5neWl4dWFuLmNvbQ0KLy9EYXRlOjIwMTUwMTI2DQoNCi8vJ0N1c3RvbSBJbmZvcm1hdGlvbg0KLy8nRG9uJ3QgZGVsZXRlICVzIGFuZCAoKQ0KDQpyZXR1cm4gYXJyYXkoDQoNCiAgICAnbGFuZycgICAgICAgICAgICAgICAgICA9PiAnZW4nLA0KICAgICdsYW5nX2JjcDQ3JyAgICAgICAgICAgID0+ICdlbicsIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2JjcDQ3DQogICAgJ2xhbmdfbmFtZScgICAgICAgICAgICAgPT4gJ0VuZ2xpc2gnLA0KICAgICdmb250X2ZhbWlseScgICAgICAgICAgID0+ICdIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZicsDQogICAgJ2ZvbnRfc2l6ZScgICAgICAgICAgICAgPT4gJycsDQogICAgJ3dpbmRvd3NfY2hhcmFjdGVyX3NldCcgPT4gJ0lTTy04ODU5LTEnLA0KDQogICAgLy9Gcm9udC1FbmQgJiBCYWNrLUVuZA0KICAgICdtc2cnID0+IGFycmF5KA0KICAgICAgICAnaWQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnSUQnLA0KICAgICAgICAnbmFtZScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnTmFtZScsDQogICAgICAgICd0aXRsZScgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdUaXRsZScsDQogICAgICAgICdhbGlhcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdTbHVnJywNCiAgICAgICAgJ3RhZ3MnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1RhZ3MnLA0KICAgICAgICAnc2VhcmNoJyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU2VhcmNoJywNCiAgICAgICAgJ2NvbW1lbnQnICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0NvbW1lbnRzJywNCiAgICAgICAgJ2NvbnRlbnQnICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0NvbnRlbnQnLA0KICAgICAgICAnaW50cm8nICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU3VtbWFyeScsDQogICAgICAgICdkYXRlJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdEYXRlJywNCiAgICAgICAgJ2NhdGVnb3J5JyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0NhdGVnb3JpZXMnLA0KICAgICAgICAndG9wJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU3RpY2t5IFBvc3QnLA0KICAgICAgICAnc3RhdHVzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU3RhdHVzJywNCiAgICAgICAgJ3RlbXBsYXRlJyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1RlbXBsYXRlJywNCiAgICAgICAgJ2F1dGhvcicgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0F1dGhvcicsDQogICAgICAgICd0eXBlJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdUeXBlJywNCiAgICAgICAgJ29yZGVyJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ09yZGVyJywNCiAgICAgICAgJ3N1Ym1pdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1N1Ym1pdCcsDQogICAgICAgICdyZXNldCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdSZXNldCcsDQogICAgICAgICdlcnJvcicgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdFcnJvcicsDQogICAgICAgICdlbWFpbCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdFLW1haWwnLA0KICAgICAgICAnaG9tZXBhZ2UnICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnSG9tZXBhZ2UnLA0KICAgICAgICAnYW5vbnltb3VzJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQW5vbnltb3VzJywNCiAgICAgICAgJ3VubmFtZWQnICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1VubmFtZWQnLA0KICAgICAgICAnZmlsZW5hbWUnICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnRmlsZW5hbWUnLA0KICAgICAgICAnaHRtbGlkJyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnSFRNTCBJRCcsDQogICAgICAgICdzaXplJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdTaXplJywNCiAgICAgICAgJ25vbmUnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ05vbmUnLA0KICAgICAgICAnYW55JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnVW5saW1pdGVkJywNCiAgICAgICAgJ2VkaXQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0VkaXQnLA0KICAgICAgICAnZGVsJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnRGVsZXRlJywNCiAgICAgICAgJ2FueScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1VubGltaXRlZCcsDQogICAgICAgICdsb2dpbicgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdMb2cgSW4nLA0KICAgICAgICAnZW5hYmxlJyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQWN0aXZhdGUnLA0KICAgICAgICAnZGlzYWJsZScgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnRGVhY3RpdmF0ZScsDQogICAgICAgICdtYW5hZ2UnICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdNYW5hZ2UnLA0KICAgICAgICAnYWRtaW4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQWRtaW4nLA0KICAgICAgICAnd2VsY29tZScgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnSG93ZHksICcsDQogICAgICAgICdsb2dvdXQnICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdMb2cgT3V0JywNCiAgICAgICAgJ2F1ZGl0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1VuYXBwcm92ZScsDQogICAgICAgICdwYXNzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdBcHByb3ZpbmcnLA0KICAgICAgICAnYXJ0aWNsZScgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnUHVibGlzaGVkJywNCiAgICAgICAgJ3BhZ2UnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1BhZ2UnLA0KICAgICAgICAneWVhcl9tb250aCcgICAgICAgICAgICAgICAgICAgICAgICA9PiAnJXklLSVtJScsDQogICAgICAgICd5ZWFyX21vbnRoX2RheScgICAgICAgICAgICAgICAgICAgID0+ICcleSUtJW0lLSVkJScsDQogICAgICAgICdudW1iZXJfcGFnZScgICAgICAgICAgICAgICAgICAgICAgID0+ICdQYWdlICVudW0lJywNCiAgICAgICAgJ3BhcmVudF9jYXRlZ29yeScgICAgICAgICAgICAgICAgICAgPT4gJ1BhcmVudCcsDQogICAgICAgICdwYXNzd29yZCcgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdQYXNzd29yZCcsDQogICAgICAgICdyZV9wYXNzd29yZCcgICAgICAgICAgICAgICAgICAgICAgID0+ICdSZXBlYXQgUGFzc3dvcmQnLA0KICAgICAgICAndXBsb2FkX2ZpbGUnICAgICAgICAgICAgICAgICAgICAgICA9PiAnRmlsZSBVcGxvYWQnLA0KICAgICAgICAnYXV0b19yZW5hbWVfdXBsb2FkZmlsZScgICAgICAgICAgICA9PiAnQXV0byByZW5hbWUgZmlsZW5hbWUnLA0KICAgICAgICAndXNlcm5hbWUnICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnVXNlcm5hbWUnLA0KICAgICAgICAncmV0dXJuX3RvX3NpdGUnICAgICAgICAgICAgICAgICAgICA9PiAnVmlzaXQgU2l0ZScsDQogICAgICAgICdjaGVja19jb21tZW50JyAgICAgICAgICAgICAgICAgICAgID0+ICdQZW5kaW5nJywNCiAgICAgICAgJ2Rhc2hib2FyZCcgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0Rhc2hib2FyZCBIb21lJywNCiAgICAgICAgJ3NldHRpbmdzJyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NldHRpbmdzJywNCiAgICAgICAgJ3dlYl9zZXR0aW5ncycgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NldHRpbmdzJywNCiAgICAgICAgJ29mZmljaWFsX3dlYnNpdGUnICAgICAgICAgICAgICAgICAgPT4gJ1N1cHBvcnQnLA0KICAgICAgICAncGFyZW5kX2lkJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnUGFyZW50IElEJywNCiAgICAgICAgJ3NlbGVjdF9hbGwnICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0NoZWNrIEFsbCcsDQogICAgICAgICduZXdfYXJ0aWNsZScgICAgICAgICAgICAgICAgICAgICAgID0+ICdBZGQgUG9zdCcsDQogICAgICAgICduZXdfcGFnZScgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdBZGQgTmV3IFBhZ2UnLA0KICAgICAgICAnbmV3X3RhZycgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQWRkIE5ldyBUYWcnLA0KICAgICAgICAnbmV3X21lbWJlcicgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQWRkIE5ldyBVc2VyJywNCiAgICAgICAgJ25ld19jYXRlZ29yeScgICAgICAgICAgICAgICAgICAgICAgPT4gJ0FkZCBOZXcgQ2F0ZWdvcnknLA0KICAgICAgICAnbmV3X21vZHVsZScgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQWRkIE5ldyBNb2R1bGUnLA0KICAgICAgICAnYXJ0aWNsZV9lZGl0JyAgICAgICAgICAgICAgICAgICAgICA9PiAnRWRpdCBQb3N0JywNCiAgICAgICAgJ3BhZ2VfZWRpdCcgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0VkaXQgUGFnZScsDQogICAgICAgICd0YWdfZWRpdCcgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdFZGl0IFRhZycsDQogICAgICAgICdjYXRlZ29yeV9lZGl0JyAgICAgICAgICAgICAgICAgICAgID0+ICdFZGl0IENhdGVnb3J5JywNCiAgICAgICAgJ2FydGljbGVfbWFuYWdlJyAgICAgICAgICAgICAgICAgICAgPT4gJ1Bvc3RzJywNCiAgICAgICAgJ3BhZ2VfbWFuYWdlJyAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1BhZ2VzJywNCiAgICAgICAgJ2NhdGVnb3J5X21hbmFnZScgICAgICAgICAgICAgICAgICAgPT4gJ0NhdGVnb3JpZXMnLA0KICAgICAgICAnY2F0ZWdvcnlfZWRpdCcgICAgICAgICAgICAgICAgICAgICA9PiAnRWRpdCBDYXRlZ29yeScsDQogICAgICAgICd0YWdfbWFuYWdlJyAgICAgICAgICAgICAgICAgICAgICAgID0+ICdUYWdzJywNCiAgICAgICAgJ3RhZ19lZGl0JyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0VkaXQgVGFnJywNCiAgICAgICAgJ21lbWJlcl9lZGl0JyAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0VkaXQgVXNlcicsDQogICAgICAgICdtb2R1bGVfZWRpdCcgICAgICAgICAgICAgICAgICAgICAgID0+ICdFZGl0IE1vZHVsZScsDQogICAgICAgICdtb2R1bGVfbmF2YmFyJyAgICAgICAgICAgICAgICAgICAgID0+ICdOYXZpZ2F0aW9uIEJhcicsDQogICAgICAgICdtb2R1bGVfbWlzYycgICAgICAgICAgICAgICAgICAgICAgID0+ICdJY29ucycsDQogICAgICAgICdtb2R1bGVfbGluaycgICAgICAgICAgICAgICAgICAgICAgID0+ICdMaW5rcycsDQogICAgICAgICdtb2R1bGVfZmF2b3JpdGUnICAgICAgICAgICAgICAgICAgID0+ICdCb29rbWFya3MnLA0KICAgICAgICAnY29tbWVudF9tYW5hZ2UnICAgICAgICAgICAgICAgICAgICA9PiAnQ29tbWVudHMnLA0KICAgICAgICAndXBsb2FkX21hbmFnZScgICAgICAgICAgICAgICAgICAgICA9PiAnQXR0YWNobWVudHMnLA0KICAgICAgICAnbWVtYmVyX21hbmFnZScgICAgICAgICAgICAgICAgICAgICA9PiAnVXNlcnMnLA0KICAgICAgICAndGhlbWVfbWFuYWdlJyAgICAgICAgICAgICAgICAgICAgICA9PiAnVGhlbWVzJywNCiAgICAgICAgJ3BsdWdpbl9tYW5hZ2UnICAgICAgICAgICAgICAgICAgICAgPT4gJ1BsdWdpbnMnLA0KICAgICAgICAnbW9kdWxlX21hbmFnZScgICAgICAgICAgICAgICAgICAgICA9PiAnTW9kdWxlcycsDQogICAgICAgICdzaXRlX2FuYWx5emUnICAgICAgICAgICAgICAgICAgICAgID0+ICdTaXRlIEluZm9ybWF0aW9uJywNCiAgICAgICAgJ2luZm9faW50cm8nICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0Rhc2hib2FyZCcsDQogICAgICAgICdyZWZyZXNoX2NhY2hlJyAgICAgICAgICAgICAgICAgICAgID0+ICdSZWZyZXNoIENhY2hlICZhbXA7IENvbXBpbGUgVGVtcGxhdGUnLA0KICAgICAgICAnbGF0ZXN0X25ld3MnICAgICAgICAgICAgICAgICAgICAgICA9PiAnWi1CbG9nIE5ld3MnLA0KICAgICAgICAncmVmcmVzaCcgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnUmVmcmVzaCcsDQogICAgICAgICdwb3N0X2NvdW50JyAgICAgICAgICAgICAgICAgICAgICAgID0+ICdQb3N0cycsDQogICAgICAgICdiYXNpY19zZXR0aW5nJyAgICAgICAgICAgICAgICAgICAgID0+ICdHZW5lcmFsIFNldHRpbmdzJywNCiAgICAgICAgJ2dsb2JhbF9zZXR0aW5nJyAgICAgICAgICAgICAgICAgICAgPT4gJ0dsb2JhbCBTZXR0aW5ncycsDQogICAgICAgICdwYWdlX3NldHRpbmcnICAgICAgICAgICAgICAgICAgICAgID0+ICdSZWFkaW5nIFNldHRpbmdzJywNCiAgICAgICAgJ2NvbW1lbnRfc2V0dGluZycgICAgICAgICAgICAgICAgICAgPT4gJ0Rpc2N1c3Npb24gU2V0dGluZ3MnLA0KICAgICAgICAnYXBpX3NldHRpbmcnICAgICAgICAgICAgICAgICAgICAgICA9PiAnQVBJIFNldHRpbmdzJywNCiAgICAgICAgJ290aGVyX3NldHRpbmcnICAgICAgICAgICAgICAgICAgICAgPT4gJ090aGVyIFNldHRpbmdzJywNCiAgICAgICAgJ2Jsb2dfaG9zdCcgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NpdGUgQWRkcmVzcyAoU2l0ZSBVUkwpJywNCiAgICAgICAgJ2Jsb2dfaG9zdF9hZGQnICAgICAgICAgICAgICAgICAgICAgPT4gJ0RlZmF1bHQgYXV0b21hdGljIHJlY29nbml0aW9uLiBJZiB5b3UgbmVlZCB0byBwZXJtYW5lbnQgeW91ciBzaXRlIGFkZHJlc3MsIHBsZWFzZSBjbGljayBvbiB0aGUgYnV0dG9uIGFuZCBlbnRlciB5b3VyIGRvbWFpbiBuYW1lLicsDQogICAgICAgICdjb3B5cmlnaHQnICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdDb3B5cmlnaHQgTm90aWNlJywNCiAgICAgICAgJ2NvcHlyaWdodF9hZGQnICAgICAgICAgICAgICAgICAgICAgPT4gJ1BsZWFzZSBmaWxsIGluIHRoZSBjb3B5cmlnaHQgbm90aWNlLCB3ZWJzaXRlIHN0YXRpc3RpY3MgY29kZSwgYW5kIHNvIG9uLicsDQogICAgICAgICdibG9nX25hbWUnICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdTaXRlIFRpdGxlJywNCiAgICAgICAgJ2Jsb2dfc3VibmFtZScgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NpdGUgVGFnbGluZScsDQogICAgICAgICdwZXJtYW5lbnRfZG9tYWluJyAgICAgICAgICAgICAgICAgID0+ICdQZXJtYW5lbnQgU2l0ZSBVUkwnLA0KICAgICAgICAnYmxvZ190aW1lem9uZScgICAgICAgICAgICAgICAgICAgICA9PiAnU2l0ZSBUaW1lem9uZScsDQogICAgICAgICdibG9nX2xhbmd1YWdlJyAgICAgICAgICAgICAgICAgICAgID0+ICdTaXRlIExhbmd1YWdlJywNCiAgICAgICAgJ2FsbG93X3VwbG9hZF90eXBlJyAgICAgICAgICAgICAgICAgPT4gJ0FsbG93cyB0byBVcGxvYWQgYSBGaWxlIG9mIFR5cGUnLA0KICAgICAgICAnYWxsb3dfdXBsb2FkX3NpemUnICAgICAgICAgICAgICAgICA9PiAnQWxsb3cgVXBsb2FkIEZpbGUgU2l6ZSAoaW4gTUIpJywNCiAgICAgICAgJ2RlYnVnX21vZGUnICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0RldmVsb3BtZW50IE1vZGUnLA0KICAgICAgICAnZGlzcGxheV9jb3VudCcgICAgICAgICAgICAgICAgICAgICA9PiAnTGlzdCBQYWdlIERpc3BsYXlzIHRoZSBOdW1iZXIgb2YgUG9zdHMnLA0KICAgICAgICAncGFnZWJhcl9jb3VudCcgICAgICAgICAgICAgICAgICAgICA9PiAnUGFnZWJhciBEaXNwbGF5cyB0aGUgTnVtYmVyIG9mIFBhZ2VzJywNCiAgICAgICAgJ3NlYXJjaF9jb3VudCcgICAgICAgICAgICAgICAgICAgICAgPT4gJ0FsbG93cyB0aGUgU2VhcmNoIHRvIFJldHVybiB0aGUgTWF4aW11bSBOdW1iZXIgb2YgUG9zdHMnLA0KICAgICAgICAnbWFuYWdlX2NvdW50JyAgICAgICAgICAgICAgICAgICAgICA9PiAnVGhlIERhc2hib2FyZCBEaXNwbGF5cyB0aGUgTnVtYmVyIG9mIFBvc3RzJywNCiAgICAgICAgJ2NvbW1lbnRfdHVybm9mZicgICAgICAgICAgICAgICAgICAgPT4gJ1R1cm4gT2ZmIENvbW1lbnRzJywNCiAgICAgICAgJ2NvbW1lbnRfcmV2ZXJzZV9vcmRlcicgICAgICAgICAgICAgPT4gJ0VuYWJsZSBDb21tZW50cyBPdXRwdXQgaW4gUmV2ZXJzZSBPcmRlcicsDQogICAgICAgICdjb21tZW50c19kaXNwbGF5X2NvdW50JyAgICAgICAgICAgID0+ICdOdW1iZXIgb2YgQ29tbWVudHMgUGVyIFBhZ2UnLA0KICAgICAgICAnY29tbWVudF92ZXJpZnlfZW5hYmxlJyAgICAgICAgICAgICA9PiAnRW5hYmxlZCBDb21tZW50cyBDYXB0Y2hhJywNCiAgICAgICAgJ3N0YXlfc2lnbmVkX2luJyAgICAgICAgICAgICAgICAgICAgPT4gJ1JlbWVtYmVyIE1lJywNCiAgICAgICAgJ25vdGlmeScgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ05vdGlmeScsDQogICAgICAgICdjdXJyZW50X21lbWJlcicgICAgICAgICAgICAgICAgICAgID0+ICdDdXJyZW50IFVzZXInLA0KICAgICAgICAnY3VycmVudF92ZXJzaW9uJyAgICAgICAgICAgICAgICAgICA9PiAnQ3VycmVudCBWZXJzaW9uJywNCiAgICAgICAgJ2FsbF9hcnRpbGVzJyAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1Bvc3RzJywNCiAgICAgICAgJ2FsbF9wYWdlcycgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1BhZ2VzJywNCiAgICAgICAgJ2FsbF90YWdzJyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1RhZ3MnLA0KICAgICAgICAnYWxsX2NhdGVnb3J5cycgICAgICAgICAgICAgICAgICAgICA9PiAnQ2F0ZWdvcmllcycsDQogICAgICAgICdhbGxfY29tbWVudHMnICAgICAgICAgICAgICAgICAgICAgID0+ICdDb21tZW50cycsDQogICAgICAgICdhbGxfbWVtYmVycycgICAgICAgICAgICAgICAgICAgICAgID0+ICdVc2VycycsDQogICAgICAgICdhbGxfdmlld3MnICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdWaWV3cycsDQogICAgICAgICdhbGxfdXBsb2FkcycgICAgICAgICAgICAgICAgICAgICAgID0+ICdBdHRhY2htZW50cycsDQogICAgICAgICdjdXJyZW50X3RoZW1lJyAgICAgICAgICAgICAgICAgICAgID0+ICdDdXJyZW50IFRoZW1lJywNCiAgICAgICAgJ2N1cnJlbnRfc3R5bGUnICAgICAgICAgICAgICAgICAgICAgPT4gJ0N1cnJlbnQgU3R5bGUnLA0KICAgICAgICAnZGVmYXVsdF9hdmF0YXInICAgICAgICAgICAgICAgICAgICA9PiAnRGVmYXVsdCBBdmF0YXInLA0KICAgICAgICAnc3R5bGUnICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU3R5bGUnLA0KICAgICAgICAndGhlbWUnICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnVGhlbWUnLA0KICAgICAgICAnc3lzdGVtX21vZHVsZScgICAgICAgICAgICAgICAgICAgICA9PiAnU3lzdGVtIE1vZHVsZScsDQogICAgICAgICd1c2VyX21vZHVsZScgICAgICAgICAgICAgICAgICAgICAgID0+ICdVc2VyIE1vZHVsZScsDQogICAgICAgICd0aGVtZV9tb2R1bGUnICAgICAgICAgICAgICAgICAgICAgID0+ICdUaGVtZSBNb2R1bGUnLA0KICAgICAgICAncGx1Z2luX21vZHVsZScgICAgICAgICAgICAgICAgICAgICA9PiAnUGx1Z2luIE1vZHVsZScsDQogICAgICAgICdzaWRlYmFyJyAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdEZWZhdWx0IFNpZGViYXInLA0KICAgICAgICAnc2lkZWJhcjInICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU2lkZWJhciAyJywNCiAgICAgICAgJ3NpZGViYXIzJyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NpZGViYXIgMycsDQogICAgICAgICdzaWRlYmFyNCcgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdTaWRlYmFyIDQnLA0KICAgICAgICAnc2lkZWJhcjUnICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU2lkZWJhciA1JywNCiAgICAgICAgJ3NpZGViYXI2JyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NpZGViYXIgNicsDQogICAgICAgICdzaWRlYmFyNycgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdTaWRlYmFyIDcnLA0KICAgICAgICAnc2lkZWJhcjgnICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnU2lkZWJhciA4JywNCiAgICAgICAgJ3NpZGViYXI5JyAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NpZGViYXIgOScsDQogICAgICAgICdkaXNwbGF5X3N1YmNhdGVnb3J5cycgICAgICAgICAgICAgID0+ICdTaG93IEFsbCBTdWJjYXRlZ29yaWVzIFBvc3RzIGluIHRoZSBDYXRlZ29yeScsDQogICAgICAgICdkcmFnX21vZHVsZV90b19zaWRlYmFyJyAgICAgICAgICAgID0+ICdUbyBhY3RpdmF0ZSBhIG1vZHVsZSBkcmFnIGl0IHRvIGEgc2lkZWJhci4gVG8gZGVhY3RpdmF0ZSBhIG1vZHVsZSBkcmFnIGl0IGJhY2suJywNCiAgICAgICAgJ3NpZGViYXJfbW9kdWxlX2NvdW50JyAgICAgICAgICAgICAgPT4gJ0J1aWx0LWluICVzIE1vZHVsZScsDQogICAgICAgICdwcm90b2NvbF9hZGRyZXNzJyAgICAgICAgICAgICAgICAgID0+ICdQcm90b2NvbCBBZGRyZXNzJywNCiAgICAgICAgJ3htbHJwY19hZGRyZXNzJyAgICAgICAgICAgICAgICAgICAgPT4gJ1hNTC1SUEMnLA0KICAgICAgICAnYXBpX2FkZHJlc3MnICAgICAgICAgICAgICAgICAgICAgICA9PiAnQVBJIFVybCcsDQogICAgICAgICdzeXN0ZW1fZW52aXJvbm1lbnQnICAgICAgICAgICAgICAgID0+ICdTeXN0ZW0gRW52aXJvbm1lbnRzJywNCiAgICAgICAgJ3ZpZXdfcmlnaHRzJyAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1Blcm1pc3Npb25zJywNCiAgICAgICAgJ21lbWJlcl9sZXZlbCcgICAgICAgICAgICAgICAgICAgICAgPT4gJ1VzZXIgTGV2ZWwnLA0KICAgICAgICAnZGlzYWJsZV9jb21tZW50JyAgICAgICAgICAgICAgICAgICA9PiAnRGlzYWJsZSBDb21tZW50cycsDQogICAgICAgICdkZWZhdWx0X3RlbXBsYXRlJyAgICAgICAgICAgICAgICAgID0+ICdEZWZhdWx0IFRlbXBsYXRlJywNCiAgICAgICAgJ2dlbmVyYXRlX3N1bW1hcnknICAgICAgICAgICAgICAgICAgPT4gJ0dlbmVyYXRlIFN1bW1hcnknLA0KICAgICAgICAnYWRkX3RvX25hdmJhcicgICAgICAgICAgICAgICAgICAgICA9PiAnQWRkIHRvIE5hdmlnYXRpb24gQmFyJywNCiAgICAgICAgJ2hlbHBfZ2VuZXJhdGVfc3VtbWFyeScgICAgICAgICAgICAgPT4gJ1dlXCdsbCB1c2UgdGhlIGNvbnRlbnQgYmVmb3JlIHRoZSBmaXJzdCBob3Jpem9udGFsIGFzIHRoZSBzdW1tYXJ5LiBJbiBhZGRpdGlvbiwgYnkgY2xpY2tpbmcgdGhlIGxpbmsgeW91IGNhbiBsZXQgc3lzdGVtICcsDQogICAgICAgICd1c2VfY29tbWFzX3RvX3NlcGFyYXRlJyAgICAgICAgICAgID0+ICdTZXBhcmF0ZWQgYnkgQ29tbWFzJywNCiAgICAgICAgJ3Nob3dfY29tbW9uX3RhZ3MnICAgICAgICAgICAgICAgICAgPT4gJ0Nob29zZSBmcm9tIHRoZSBtb3N0IHVzZWQgdGFncycsDQogICAgICAgICdjYXRlZ29yeV9hcml0bGVzX2RlZmF1bHRfdGVtcGxhdGUnID0+ICdUaGUgRGVmYXVsdCBUZW1wbGF0ZSBmb3IgdGhlIENhdGVnb3J5JywNCiAgICAgICAgJ2NvbmZpcm1fb3BlcmF0aW5nJyAgICAgICAgICAgICAgICAgPT4gJ0NsaWNrIFtPS10gdG8gY29udGludWUgb3IgY2xpY2sgW0NhbmNlbF0gdG8gc3RvcC4nLA0KICAgICAgICAnYmF0Y2hfb3BlcmF0aW9uJyAgICAgICAgICAgICAgICAgICA9PiAnQnVsayBBY3Rpb25zJywNCiAgICAgICAgJ29wZXJhdGlvbl9zdWNjZWVkJyAgICAgICAgICAgICAgICAgPT4gJ1N1Y2Nlc3NmdWxseSBDb21wbGV0ZWQnLA0KICAgICAgICAnb3BlcmF0aW9uX2ZhaWxlZCcgICAgICAgICAgICAgICAgICA9PiAnT3BlcmF0aW9uIEZhaWx1cmUnLA0KICAgICAgICAnYmF0Y2hfb3BlcmF0aW9uX2luX3Byb2dyZXNzJyAgICAgICA9PiAnQmF0Y2ggUHJvY2Vzc2luZy4uLicsDQogICAgICAgICdwcmV2aW91c19vcGVyYXRpb25fbm90X2ZpbmlzaGVkJyAgID0+ICdCZWZvcmUgYnVsayBvcGVyYXRpb25zIGhhdmUgbm90IHlldCBmdWxseSBpbXBsZW1lbnRlZCwgUGxlYXNlIGNsaWNrIDxhIGhyZWY9XCcjXCc+Q29udGludWU8L2E+LCBhbGwgb3BlcmF0aW9uIGlzIGV4ZWN1dGVkLicsDQogICAgICAgICdlcnJvcl90aXBzJyAgICAgICAgICAgICAgICAgICAgICAgID0+ICdFcnJvciBUaXBzJywNCiAgICAgICAgJ2Vycm9yX2luZm8nICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0Vycm9yIE1lc3NhZ2UnLA0KICAgICAgICAnZmlsZV9saW5lJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnRmlsZSBMb2NhdGlvbicsDQogICAgICAgICdyZXF1ZXN0X2RhdGEnICAgICAgICAgICAgICAgICAgICAgID0+ICdSZXF1ZXN0IERhdGEnLA0KICAgICAgICAnaW5jbHVkZV9maWxlJyAgICAgICAgICAgICAgICAgICAgICA9PiAnSW5jbHVkZSBGaWxlJywNCiAgICAgICAgJ2JhY2snICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0JhY2snLA0KICAgICAgICAndmFsaWRjb2RlJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQ2FwdGNoYScsDQogICAgICAgICdoaWRlX3RpdGxlJyAgICAgICAgICAgICAgICAgICAgICAgID0+ICdIaWRlIFRpdGxlJywNCiAgICAgICAgJ2NhdGFsb2dfc3R5bGVfbm9ybWFsJyAgICAgICAgICAgICAgPT4gJ05vcm1hbCcsDQogICAgICAgICdjYXRhbG9nX3N0eWxlX3RyZWUnICAgICAgICAgICAgICAgID0+ICdUcmVlJywNCiAgICAgICAgJ2NhdGFsb2dfc3R5bGVfdWwnICAgICAgICAgICAgICAgICAgPT4gJ1VMJywNCiAgICAgICAgJ2FyY2hpdmVzX3N0eWxlX3NlbGVjdCcgICAgICAgICAgICAgPT4gJ1NlbGVjdCBPcHRpb24nLA0KICAgICAgICAnYWxsX2RlbCcgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQnVsayBEZWxldGUnLA0KICAgICAgICAnYWxsX3Bhc3MnICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQnVsayBBcHByb3ZlJywNCiAgICAgICAgJ2FsbF9hdWRpdCcgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0J1bGsgVW5hcHByb3ZlJywNCiAgICAgICAgJ2d6aXBfY29tcHJlc3MnICAgICAgICAgICAgICAgICAgICAgPT4gJ0daaXAgQ29tcHJlc3Npb24nLA0KICAgICAgICAnc3ludGF4X2hpZ2hfbGlnaHRlcicgICAgICAgICAgICAgICA9PiAnQ29kZSBIaWdobGlnaHRpbmcnLA0KICAgICAgICAnY2xvc2Vfc2l0ZScgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQ2xvc2Ugc2l0ZScsDQogICAgICAgICdtYXhfbGlfaW5fdWwnICAgICAgICAgICAgICAgICAgICAgID0+ICdNYXhpbXVtIE51bWJlciBvZiBMSSBpbiBVTCcsDQogICAgICAgICdub19yZWZyZXNoX2NvbnRlbnQnICAgICAgICAgICAgICAgID0+ICdQcmV2ZW50IFN5c3RlbSBVcGRhdGUgTW9kdWxlIENvbnRlbnQnLA0KICAgICAgICAndW5jYXRlZ29yeScgICAgICAgICAgICAgICAgICAgICAgICA9PiAnVW5jYXRlZ29yaXplZCcsDQogICAgICAgICdjYWxlbmRhcicgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdDYWxlbmRhcicsDQogICAgICAgICdjb250cm9sX3BhbmVsJyAgICAgICAgICAgICAgICAgICAgID0+ICdEYXNoYm9hcmQnLA0KICAgICAgICAnbW9kdWxlX2NhdGFsb2cnICAgICAgICAgICAgICAgICAgICA9PiAnQ2F0ZWdvcmllcycsDQogICAgICAgICdtb2R1bGVfY29tbWVudHMnICAgICAgICAgICAgICAgICAgID0+ICdSZWNlbnQgQ29tbWVudHMnLA0KICAgICAgICAnbW9kdWxlX2FyY2hpdmVzJyAgICAgICAgICAgICAgICAgICA9PiAnQXJjaGl2ZXMnLA0KICAgICAgICAnbW9kdWxlX3N0YXRpc3RpY3MnICAgICAgICAgICAgICAgICA9PiAnU2l0ZSBJbmZvcm1hdGlvbicsDQogICAgICAgICdtb2R1bGVfYXV0aG9ycycgICAgICAgICAgICAgICAgICAgID0+ICdBdXRob3JzJywNCiAgICAgICAgJ21vZHVsZV9wcmV2aW91cycgICAgICAgICAgICAgICAgICAgPT4gJ1JlY2VudCBQb3N0cycsDQogICAgICAgICdtb2R1bGVfdGFncycgICAgICAgICAgICAgICAgICAgICAgID0+ICdUYWdzJywNCiAgICAgICAgJ2FkbWluX2xvZ2luJyAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0xvZyBpbicsDQogICAgICAgICd0b3BfaW5kZXgnICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdIb21lJywNCiAgICAgICAgJ3RvcF9nbG9iYWwnICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0dsb2JhbCcsDQogICAgICAgICd0b3BfY2F0ZWdvcnlzJyAgICAgICAgICAgICAgICAgICAgID0+ICdDYXRlZ29yeXMnLA0KICAgICAgICAndG9wX2NhdGVnb3J5JyAgICAgICAgICAgICAgICAgICAgICA9PiAnQ2F0ZWdvcnknLA0KICAgICAgICAnanVtcF9jb21tZW50JyAgICAgICAgICAgICAgICAgICAgICA9PiAnVmlldyBDb21tZW50IElEPScsDQogICAgICAgICd5ZWFyX3N1ZmZpeCcgICAgICAgICAgICAgICAgICAgICAgID0+ICcnLA0KICAgICAgICAnbW9udGhfc3VmZml4JyAgICAgICAgICAgICAgICAgICAgICA9PiAnJywNCiAgICAgICAgJ3dlZWtfc3VmZml4JyAgICAgICAgICAgICAgICAgICAgICAgPT4gJycsDQogICAgICAgICd0aW1lJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdUaW1lJywNCiAgICAgICAgJ2hvdXInICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0hvdXInLA0KICAgICAgICAnbWludXRlJyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnTWluJywNCiAgICAgICAgJ3NlY29uZCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1NlYycsDQogICAgICAgICdtaWxsaXNlYycgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdNcycsDQogICAgICAgICdjbG9zZScgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdVcGRhdGUnLA0KICAgICAgICAnY3VycmVudCcgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQ3VycmVudCcsDQogICAgICAgICdwcmV2X21vbnRoJyAgICAgICAgICAgICAgICAgICAgICAgID0+ICdQcmV2IE1vbnRoJywNCiAgICAgICAgJ25leHRfbW9udGgnICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ05leHQgTW9udGgnLA0KICAgICAgICAncHJvZ3JhbScgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnUHJvZ3JhbW1lcnMnLA0KICAgICAgICAnaW50ZXJmYWNlJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnRGVzaWduZXJzJywNCiAgICAgICAgJ3N1cHBvcnQnICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ1N1cHBvcnRlcnMnLA0KICAgICAgICAndGhhbmtzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnQWNrbm93bGVkZ2VtZW50cycsDQogICAgICAgICd3ZWJzaXRlJyAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICdPZmZpY2lhbCBXZWJzaXRlcycsDQogICAgICAgICdkZXZlbG9wX2ludHJvJyAgICAgICAgICAgICAgICAgICAgID0+ICdDb250cmlidXRvcnMnLA0KICAgICAgICAnZGVmYXVsdCcgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnRGVmYXVsdCcsDQogICAgICAgICdkZWJ1Z19iYWNrdHJhY2UnICAgICAgICAgICAgICAgICAgID0+ICdEZWJ1ZyBCYWNrdHJhY2UnLA0KICAgICAgICAncG9zc2libGVfY2F1c2VzX2Vycm9yJyAgICAgICAgICAgICA9PiAnUG9zc2libGUgY2F1c2VzIG9mIGVycm9ycycsDQogICAgICAgICdkaXNwbGF5X21vcmVfaW5mbycgICAgICAgICAgICAgICAgID0+ICdEaXNwbGF5IG1vcmUgaW5mbycsDQogICAgICAgICdlcnJvcl9sb2FkX2pzJyAgICAgICAgICAgICAgICAgICAgID0+ICdFcnJvciB3aGVuIGxvYWRpbmcgSmF2YVNjcmlwdC4gT0sgZm9yIG1vcmUgaW5mb3JtYXRpb24oQ2hpbmVzZSBvbmx5KSwgQ2FuY2VsIGZvciBjb250aW51ZS4nLA0KICAgICAgICAnY29tbWVudF9hdWRpdCcgICAgICAgICAgICAgICAgICAgICA9PiAnQWR1aXQgQ29tbWVudHMnLA0KICAgICAgICAnY29tbWVudF9hdWRpdF9jb21tZW50JyAgICAgICAgICAgICA9PiAnQWxsIG5ldyBjb21tZW50cyBwb3N0ZWQgYnkgbm9uLXJvb3QgdXNlciB3aWxsIGJlIGF1ZGl0ZWQuJywNCiAgICAgICAgJ2RlYnVnZ2luZ193YXJuaW5nJyAgICAgICAgICAgICAgICAgPT4gJ0lmIHlvdXIgd2Vic2l0ZSBjYW4gYmUgY29ubmVjdGVkIHZpYSBJbnRlcm5ldCwgcGxlYXNlIGRpc2FibGUgdGhlIERldmVsb3BtZW50IE1vZGUsIG9yIGl0IG1heSBiZSBoYWNrZWQuJywNCiAgICAgICAgJ3Blcm1hbmVudF9kb21haW5fd2l0aF9hZG1pbicgICAgICAgPT4gJ0ZpeGVkIGRvbWFpbiBib3RoIG9uIGJhY2tncm91bmQnLA0KICAgICAgICAnY3VycmVudF90ZW1wbGF0ZScgICAgICAgICAgICAgICAgICA9PiAnQ3VycmVudCBUZW1wbGF0ZScsDQogICAgICAgICdhZGRpdGlvbmFsX3NlY3VyaXR5JyAgICAgICAgICAgICAgID0+ICdBZGRpdGlvbmFsIFNlY3VyaXR5JywNCiAgICAgICAgJ3VzaW5nX2Nkbl9ndWVzdF90eXBlJyAgICAgICAgICAgICAgPT4gJ0hUVFAgSGVhZGVyIGZvciBJUCcsDQogICAgICAgICdmaXJzdF9idXR0b24nICAgICAgICAgICAgICAgICAgICAgID0+ICfigLnigLknLA0KICAgICAgICAncHJldl9idXR0b24nICAgICAgICAgICAgICAgICAgICAgICA9PiAn4oC5JywNCiAgICAgICAgJ25leHRfYnV0dG9uJyAgICAgICAgICAgICAgICAgICAgICAgPT4gJ+KAuicsDQogICAgICAgICdsYXN0X2J1dHRvbicgICAgICAgICAgICAgICAgICAgICAgID0+ICfigLrigLonLA0KICAgICAgICAnbnVtZXJhbF9idXR0b24nICAgICAgICAgICAgICAgICAgICA9PiAnJW51bSUnLA0KICAgICAgICAndmVyaWZ5X3N1Y2NlZWQnICAgICAgICAgICAgICAgICAgICA9PiAnVmVyaWZ5IHN1Y2NlZWQnLA0KICAgICAgICAndmVyaWZ5X2ZhaWwnICAgICAgICAgICAgICAgICAgICAgICA9PiAnVmVyaWZ5IGZhaWwnLA0KICAgICAgICAndmVyaWZ5aW5nJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnVmVyaWZ5aW5nJywNCiAgICAgICAgJ3Nob3dfd2FybmluZ19lcnJvcicgICAgICAgICAgICAgICAgPT4gJ0FsbG93IHdhcm5pbmcgbGV2ZWwgZXJyb3InLA0KICAgICAgICAnYmFja2VuZF9zZXR0aW5nJyAgICAgICAgICAgICAgICAgICA9PiAnQmFja2VuZCBTZXR0aW5nJywNCiAgICAgICAgJ2dldF90ZXh0X2ludHJvJyAgICAgICAgICAgICAgICAgICAgPT4gJ0dldCBhIHBsYWluIHRleHQgaW50cm8nLA0KICAgICAgICAndXBkYXRlX2RiJyAgICAgICAgICAgICAgICAgICAgICAgICA9PiAnUGxlYXNlIGNsaWNrIHRoZSBsaW5rIHRvIHVwZ3JhZGUgdGhlIGRhdGFiYXNlIHN0cnVjdHVyZS4nLA0KICAgICAgICAnZW5hYmxlX3Bvc3RfYmF0Y2hfZGVsZXRlJyAgICAgICAgICA9PiAnRW5hYmxlIEJhdGNoIERlbGV0ZSBvZiBQb3N0JywNCiAgICAgICAgJ2VuYWJsZV9hcGknICAgICAgICAgICAgICAgICAgICAgICAgPT4gJ0VuYWJsZSBBUEknLA0KICAgICAgICAnZW5hYmxlX2FwaV90aHJvdHRsZScgICAgICAgICAgICAgICA9PiAnRW5hYmxlIEFQSSBUaHJvdHRsZScsDQogICAgICAgICdlbmFibGVfYXBpX3Rocm90dGxlX25vdGUnICAgICAgICAgID0+ICdPbmx5IHRha2VzIGVmZmVjdCB3aGVuIHpicGNhY2hlIHBsdWdpbiBpcyBlbmFibGVkLicsDQogICAgICAgICdhcGlfdGhyb3R0bGVfbWF4X3JlcXNfcGVyX21pbicgICAgID0+ICdBUEkgbWF4IHJlcXVlc3RzIHBlciBtaW51dGUnLA0KICAgICAgICAnYXBpX3Rocm90dGxlX21heF9yZXFzX25vdGUnICAgICAgICA9PiAnT25seSB0YWtlcyBlZmZlY3Qgd2hlbiBBUEkgVGhyb3R0bGUgaXMgZW5hYmxlZC4nLA0KICAgICAgICAnZW5hYmxlX3htbHJwYycgICAgICAgICAgICAgICAgICAgICA9PiAnRW5hYmxlIFhNTC1SUEMnLA0KICAgICAgICAnY2xlYXJfdGh1bWJfY2FjaGUnICAgICAgICAgICAgICAgICA9PiAnQ2xlYXIgdGh1bWIgY2FjaGUnLA0KICAgICAgICAnY29uZmlybV9jbGVhcl90aHVtYl9jYWNoZScgICAgICAgICA9PiAnQ29uZmlybSB0byBjbGVhciB0aHVtYiBjYWNoZS4nLA0KICAgICAgICAnY2F0ZWdvcnlfbGVnYWN5X2Rpc3BsYXknICAgICAgICAgICA9PiAnQ2F0ZWdvcnkgbWFuYWdlIGxlZ2FjeSBkaXNwbGF5JywNCiAgICAgICAgJ2NoYW5nZV9kZWZhdWx0X3Bhc3N3b3JkJyAgICAgICAgICAgPT4gJ1BsZWFzZSBjaGFuZ2UgdGhlIGRlZmF1bHQgcGFzc3dvcmQgaW1tZWRpYXRlbHkuJywNCiAgICAgICAgJ2RlbGV0ZV9tZW1iZXJfd2l0aF9hbGxkYXRhJyAgICAgICAgPT4gJ0RlbGV0ZSB1c2VyIGFuZCBkZWxldGUgdXNlclwncyBkYXRhJywNCiAgICAgICAgJycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gJycsDQogICAgKSwNCg0KICAgIC8vQWN0aW9uDQogICAgJ2FjdGlvbnMnID0+IGFycmF5KA0KICAgICAgICAnbG9naW4nICAgICAgID0+ICdMb2cgaW4nLA0KICAgICAgICAnbG9nb3V0JyAgICAgID0+ICdMb2cgT3V0JywNCiAgICAgICAgJ3ZlcmlmeScgICAgICA9PiAnVmVyaWZ5JywNCiAgICAgICAgJ2FkbWluJyAgICAgICA9PiAnQWRtaW4nLA0KICAgICAgICAnc2VhcmNoJyAgICAgID0+ICdTZWFyY2gnLA0KICAgICAgICAnbWlzYycgICAgICAgID0+ICdNaXNjJywNCiAgICAgICAgJ2ZlZWQnICAgICAgICA9PiAnRW50cmllcyBSU1MnLA0KICAgICAgICAnY210JyAgICAgICAgID0+ICdQb3N0IENvbW1lbnQnLA0KICAgICAgICAnZ2V0Y210JyAgICAgID0+ICdHZXQgUmVjZW50IENvbW1lbnRzJywNCiAgICAgICAgJ2FqYXgnICAgICAgICA9PiAnQUpBWCcsDQogICAgICAgICd2aWV3JyAgICAgICAgPT4gJ1ZpZXcnLA0KICAgICAgICAnYXBpJyAgICAgICAgID0+ICdDYWxsIEFQSScsDQogICAgICAgICdBcnRpY2xlTmV3JyAgPT4gJ05ldyBQb3N0JywNCiAgICAgICAgJ0FydGljbGVFZHQnICA9PiAnRWRpdCBQb3N0JywNCiAgICAgICAgJ0FydGljbGVQc3QnICA9PiAnQWRkIE5ldyBQb3N0JywNCiAgICAgICAgJ0FydGljbGVEZWwnICA9PiAnRGVsZXRlIFBvc3QnLA0KICAgICAgICAnQXJ0aWNsZVB1YicgID0+ICdQdWJsaXNoIFBvc3QnLA0KICAgICAgICAnUGFnZU5ldycgICAgID0+ICdOZXcgUGFnZScsDQogICAgICAgICdQYWdlRWR0JyAgICAgPT4gJ0VkaXQgUGFnZScsDQogICAgICAgICdQYWdlUHN0JyAgICAgPT4gJ0FkZCBOZXcgUGFnZScsDQogICAgICAgICdQYWdlRGVsJyAgICAgPT4gJ0RlbGV0ZSBQYWdlJywNCiAgICAgICAgJ1BhZ2VQdWInICAgICA9PiAnUHVibGlzaCBQYWdlJywNCiAgICAgICAgJ0NhdGVnb3J5RWR0JyA9PiAnRWRpdCBDYXRlZ29yeScsDQogICAgICAgICdDYXRlZ29yeVBzdCcgPT4gJ1VwZGF0ZSBDYXRlZ29yeScsDQogICAgICAgICdDYXRlZ29yeURlbCcgPT4gJ0RlbGV0ZSBDYXRlZ29yeScsDQogICAgICAgICdDb21tZW50RWR0JyAgPT4gJ0VkaXQgQ29tbWVudCcsDQogICAgICAgICdDb21tZW50U2F2JyAgPT4gJ1VwZGF0ZSBDb21tZW50JywNCiAgICAgICAgJ0NvbW1lbnREZWwnICA9PiAnRGVsZXRlIENvbW1lbnQnLA0KICAgICAgICAnQ29tbWVudENoaycgID0+ICdBcHByb3ZlIENvbW1lbnQnLA0KICAgICAgICAnQ29tbWVudEJhdCcgID0+ICdCdWxrIENvbW1lbnQnLA0KICAgICAgICAnTWVtYmVyRWR0JyAgID0+ICdFZGl0IFVzZXInLA0KICAgICAgICAnTWVtYmVyUHN0JyAgID0+ICdVcGRhdGUgVXNlcicsDQogICAgICAgICdNZW1iZXJEZWwnICAgPT4gJ0RlbGV0ZSBVc2VyJywNCiAgICAgICAgJ01lbWJlck5ldycgICA9PiAnQWRkIE5ldyBVc2VyJywNCiAgICAgICAgJ1RhZ0VkdCcgICAgICA9PiAnRWRpdCBUYWcnLA0KICAgICAgICAnVGFnUHN0JyAgICAgID0+ICdVcGRhdGUgVGFnJywNCiAgICAgICAgJ1RhZ0RlbCcgICAgICA9PiAnRGVsZXRlIFRhZycsDQogICAgICAgICdUYWdOZXcnICAgICAgPT4gJ0FkZCBOZXcgVGFnJywNCiAgICAgICAgJ1BsdWdpbkVuYicgICA9PiAnQWN0aXZhdGUnLA0KICAgICAgICAnUGx1Z2luRGlzJyAgID0+ICdEZWFjdGl2YXRlJywNCiAgICAgICAgJ1VwbG9hZFBzdCcgICA9PiAnVXBsb2FkIEF0dGFjaG1lbnQnLA0KICAgICAgICAnVXBsb2FkRGVsJyAgID0+ICdEZWxldGUgQXR0YWNobWVudCcsDQogICAgICAgICdNb2R1bGVFZHQnICAgPT4gJ0VkaXQgTW9kdWxlJywNCiAgICAgICAgJ01vZHVsZVBzdCcgICA9PiAnVXBkYXRlIE1vZHVsZScsDQogICAgICAgICdNb2R1bGVEZWwnICAgPT4gJ0RlbGV0ZSBNb2R1bGUnLA0KICAgICAgICAnVGhlbWVTZXQnICAgID0+ICdUaGVtZSBTZXR0aW5ncycsDQogICAgICAgICdTaWRlYmFyU2V0JyAgPT4gJ1NpZGViYXIgU2V0dGluZ3MnLA0KICAgICAgICAnU2V0dGluZ1NhdicgID0+ICdVcGRhdGUgU2V0dGluZ3MnLA0KICAgICAgICAnQXJ0aWNsZU1uZycgID0+ICdQb3N0cycsDQogICAgICAgICdQYWdlTW5nJyAgICAgPT4gJ1BhZ2VzJywNCiAgICAgICAgJ0NhdGVnb3J5TW5nJyA9PiAnQ2F0ZWdvcmllcycsDQogICAgICAgICdTZXR0aW5nTW5nJyAgPT4gJ1NldHRpbmdzJywNCiAgICAgICAgJ1RhZ01uZycgICAgICA9PiAnVGFncycsDQogICAgICAgICdDb21tZW50TW5nJyAgPT4gJ0NvbW1lbnRzJywNCiAgICAgICAgJ1VwbG9hZE1uZycgICA9PiAnQXR0YWNobWVudHMnLA0KICAgICAgICAnTWVtYmVyTW5nJyAgID0+ICdVc2VycycsDQogICAgICAgICdUaGVtZU1uZycgICAgPT4gJ1RoZW1lcycsDQogICAgICAgICdQbHVnaW5NbmcnICAgPT4gJ1BsdWdpbnMnLA0KICAgICAgICAnTW9kdWxlTW5nJyAgID0+ICdNb2R1bGVzJywNCiAgICAgICAgJ0FydGljbGVBbGwnICA9PiAnQWxsIFBvc3RzIFByaXZpbGVnZSBNYW5hZ2VtZW50JywNCiAgICAgICAgJ1BhZ2VBbGwnICAgICA9PiAnQWxsIFBhZ2VzIFByaXZpbGVnZSBNYW5hZ2VtZW50JywNCiAgICAgICAgJ0NhdGVnb3J5QWxsJyA9PiAnQWxsIENhdGVnb3JpZXMgUHJpdmlsZWdlIE1hbmFnZW1lbnQnLA0KICAgICAgICAnQ29tbWVudEFsbCcgID0+ICdBbGwgQ29tbWVudHMgUHJpdmlsZWdlIE1hbmFnZW1lbnQnLA0KICAgICAgICAnTWVtYmVyQWxsJyAgID0+ICdBbGwgVXNlcnMgUHJpdmlsZWdlIE1hbmFnZW1lbnQnLA0KICAgICAgICAnVGFnQWxsJyAgICAgID0+ICdBbGwgVGFnZXMgUHJpdmlsZWdlIE1hbmFnZW1lbnQnLA0KICAgICAgICAnVXBsb2FkQWxsJyAgID0+ICdBbGwgQXR0YWNobWVudHMgUHJpdmlsZWdlIE1hbmFnZW1lbnQnLA0KICAgICAgICAncm9vdCcgICAgICAgID0+ICdTdXBlcnVzZXIgUHJpdmlsZWdlIE1hbmFnZW1lbnQnLA0KICAgICAgICAnTm9WYWxpZENvZGUnID0+ICdJZ25vcmUgQ2FwdGNoYScsDQogICAgKSwNCg0KICAgIC8vQXJ0aWNsZSBMZXZlbA0KICAgICdwb3N0X3N0YXR1c19uYW1lJyA9PiBhcnJheSgNCiAgICAgICAgJzAnID0+ICdQdWJsaXNoZWQnLA0KICAgICAgICAnMScgPT4gJ0RyYWZ0JywNCiAgICAgICAgJzInID0+ICdQZW5kaW5nJywNCiAgICAgICAgJzQnID0+ICdQcml2YXRlJywNCiAgICAgICAgJzgnID0+ICdMb2NrZWQnLA0KICAgICksDQoNCiAgICAvL1VzZXIgTGV2ZWwNCiAgICAndXNlcl9sZXZlbF9uYW1lJyA9PiBhcnJheSgNCiAgICAgICAgJzEnID0+ICdBZG1pbmlzdHJhdG9yJywNCiAgICAgICAgJzInID0+ICdSZWRhY3RvcicsDQogICAgICAgICczJyA9PiAnQXV0aG9yJywNCiAgICAgICAgJzQnID0+ICdUZWFtd29ya2VyJywNCiAgICAgICAgJzUnID0+ICdDb21tZW50YXRvcicsDQogICAgICAgICc2JyA9PiAnVmlzaXRvcicsDQogICAgKSwNCg0KICAgICd1c2VyX3N0YXR1c19uYW1lJyA9PiBhcnJheSgNCiAgICAgICAgJzAnID0+ICdOb3JtYWxpdHknLA0KICAgICAgICAnMScgPT4gJ1BlbmRpbmcnLA0KICAgICAgICAnMicgPT4gJ0Rpc2FibGVkJywNCiAgICApLA0KDQogICAgLy9KYW51YXJ5LCBGZWJydWFyeS4uLg0KICAgICdtb250aCcgPT4gYXJyYXkoDQogICAgICAgICcxJyAgPT4gJ0phbnVhcnknLA0KICAgICAgICAnMicgID0+ICdGZWJydWFyeScsDQogICAgICAgICczJyAgPT4gJ01hcmNoJywNCiAgICAgICAgJzQnICA9PiAnQXByaWwnLA0KICAgICAgICAnNScgID0+ICdNYXknLA0KICAgICAgICAnNicgID0+ICdKdW5lJywNCiAgICAgICAgJzcnICA9PiAnSnVseScsDQogICAgICAgICc4JyAgPT4gJ0F1Z3VzdCcsDQogICAgICAgICc5JyAgPT4gJ1NlcHRlbWJlcicsDQogICAgICAgICcxMCcgPT4gJ09jdG9iZXInLA0KICAgICAgICAnMTEnID0+ICdOb3ZlbWJlcicsDQogICAgICAgICcxMicgPT4gJ0RlY2VtYmVyJywNCiAgICApLA0KDQogICAgLy9KYW4uLCBGZWIuIC4uLg0KICAgICdtb250aF9hYmJyJyA9PiBhcnJheSgNCiAgICAgICAgJzEnICA9PiAnSmFuJywNCiAgICAgICAgJzInICA9PiAnRmViJywNCiAgICAgICAgJzMnICA9PiAnTWFyJywNCiAgICAgICAgJzQnICA9PiAnQXByJywNCiAgICAgICAgJzUnICA9PiAnTWF5JywNCiAgICAgICAgJzYnICA9PiAnSnVuJywNCiAgICAgICAgJzcnICA9PiAnSnVsJywNCiAgICAgICAgJzgnICA9PiAnQXVnJywNCiAgICAgICAgJzknICA9PiAnU2VwJywNCiAgICAgICAgJzEwJyA9PiAnT2N0JywNCiAgICAgICAgJzExJyA9PiAnTm92JywNCiAgICAgICAgJzEyJyA9PiAnRGVjJywNCiAgICApLA0KDQogICAgLy9TdW5kYXksIE1vbmRheS4uDQogICAgJ3dlZWsnID0+IGFycmF5KA0KICAgICAgICAnNycgPT4gJ1N1bmRheScsDQogICAgICAgICcxJyA9PiAnTW9uZGF5JywNCiAgICAgICAgJzInID0+ICdUdWVzZGF5JywNCiAgICAgICAgJzMnID0+ICdXZWRuZXNkYXknLA0KICAgICAgICAnNCcgPT4gJ1RodXJzZGF5JywNCiAgICAgICAgJzUnID0+ICdGcmlkYXknLA0KICAgICAgICAnNicgPT4gJ1NhdHVyZGF5JywNCiAgICApLA0KDQogICAgLy9TdW4uLCBNb24uIC4uLg0KICAgICd3ZWVrX2FiYnInID0+IGFycmF5KA0KICAgICAgICAnNycgPT4gJ1N1bicsDQogICAgICAgICcxJyA9PiAnTW9uJywNCiAgICAgICAgJzInID0+ICdUdWUnLA0KICAgICAgICAnMycgPT4gJ1dlZCcsDQogICAgICAgICc0JyA9PiAnVGh1JywNCiAgICAgICAgJzUnID0+ICdGcmknLA0KICAgICAgICAnNicgPT4gJ1NhdCcsDQogICAgKSwNCg0KICAgICd3ZWVrX3Nob3J0JyA9PiBhcnJheSgNCiAgICAgICAgJzcnID0+ICdTJywNCiAgICAgICAgJzEnID0+ICdNJywNCiAgICAgICAgJzInID0+ICdUJywNCiAgICAgICAgJzMnID0+ICdXJywNCiAgICAgICAgJzQnID0+ICdUJywNCiAgICAgICAgJzUnID0+ICdGJywNCiAgICAgICAgJzYnID0+ICdTJywNCiAgICApLA0KDQogICAgLy9DdXN0b20gRXJyb3IgSW5mb3JtYXRpb24NCiAgICAnZXJyb3InID0+IGFycmF5KA0KICAgICAgICAnMCcgID0+ICdVbmtub3duIEVycm9yJywNCiAgICAgICAgJzEnICA9PiAnVW5rbm93biBDb21tYW5kJywNCiAgICAgICAgJzInICA9PiAnU29ycnksIFRoaXMgcGFnZSBkb2VzIG5vdCBleGlzdC4nLA0KICAgICAgICAnMycgID0+ICdSZXF1ZXN0IHdpdGggZXJyb3IgcGFyYW1zLicsDQogICAgICAgICc0JyAgPT4gJ0RhdGFiYXNlIENvbm5lY3Rpb24gRXJyb3InLA0KICAgICAgICAnNScgID0+ICdObyBVbmF1dGhvcml6ZWQgQWNjZXNzJywNCiAgICAgICAgJzYnICA9PiAnTm90IFBlcm1pdHRlZCcsDQogICAgICAgICc3JyAgPT4gJ1VzZXJuYW1lIGlzIG5vdCBpbiB0aGUgY29ycmVjdCBmb3JtYXQsIGl0IG1heSBiZSB0b28gbG9uZyBvciBpcyBlbXB0eS4nLA0KICAgICAgICAnOCcgID0+ICdMb2dpbiBGYWlsZWQnLA0KICAgICAgICAnOScgID0+ICdUaGlzIFBvc3QgZG9lcyBub3QgZXhpc3QsIG9yIHBlcm1pc3Npb24gaXMgdG9vIGxvdy4nLA0KICAgICAgICAnMTAnID0+ICdTeXN0ZW0gSW5pdGlhbGl6YXRpb24gRmFpbGVkJywNCiAgICAgICAgJzExJyA9PiAnVXBkYXRlIFBvc3QgRmFpbGVkJywNCiAgICAgICAgJzEyJyA9PiAnVXBkYXRlIENhdGVnb3J5IEZhaWxlZCcsDQogICAgICAgICcxMycgPT4gJ1RoZSBQb3N0cyBpbiB0aGlzIGNhdGVnb3J5LCBkZWxldGUgZmFpbGVkLicsDQogICAgICAgICcxNCcgPT4gJ1lvdXIgY29tbWVudCBoYXMgYmVlbiBpbnRlcmNlcHRvciBzeXN0ZW0sIGRlbGV0ZSBmYWlsZWQuJywNCiAgICAgICAgJzE1JyA9PiAnTmFtZSBmb3JtYXQgaXMgaW5jb3JyZWN0LCBpdCBtYXkgYmUgdG9vIGxvbmcgb3IgZW1wdHkuJywNCiAgICAgICAgJzE2JyA9PiAnVXBkYXRlIFVzZXIgRmFpbGVkJywNCiAgICAgICAgJzE3JyA9PiAnRGVsZXRlIFVzZXIgRmFpbGVkJywNCiAgICAgICAgJzE4JyA9PiAnRGVsZXRlIENvbW1lbnQgRmFpbGVkJywNCiAgICAgICAgJzE5JyA9PiAnRGVsZXRlIFBpbmcgVVJMIEZhaWxlZCcsDQogICAgICAgICcyMCcgPT4gJ1NlbmQgUGluZyBVUkwgRmFpbGVkJywNCiAgICAgICAgJzIxJyA9PiAnRmlsZSBVcGxvYWQgRmFpbGVkJywNCiAgICAgICAgJzIyJyA9PiAnRGVsZXRlIEZpbGUgRmFpbGVkJywNCiAgICAgICAgJzIzJyA9PiAnU3lzdGVtIFJlY29uc3RydWN0aW9uIEZhaWxlZCcsDQogICAgICAgICcyNCcgPT4gJ1NlYXJjaCBTdHJpbmcgRmFpbGVkJywNCiAgICAgICAgJzI1JyA9PiAnVXBkYXRlIFNldHRpbmdzIEZhaWxlZCcsDQogICAgICAgICcyNicgPT4gJ0ZpbGUgVHlwZSBiZXlvbmQgdGhlIFNldCBSYW5nZScsDQogICAgICAgICcyNycgPT4gJ0ZpbGUgU2l6ZSBleGNlZWRzIHRoZSBTZXQgUmFuZ2UnLA0KICAgICAgICAnMjgnID0+ICdQbGVhc2UgcmVtb3ZlIHRoZSBleGlzdGluZyBmaWxlLicsDQogICAgICAgICcyOScgPT4gJ0UtbWFpbCBhZGRyZXNzIGZvcm1hdCBpcyBjb3JyZWN0LCBpdCBtYXkgYmUgdG9vIGxvbmcgb3IgbnVsbC4nLA0KICAgICAgICAnMzAnID0+ICdVUkwgZm9ybWF0IGlzIG5vdCBjb3JyZWN0LCBpdCBtYXkgYmUgdG9vIGxvbmcgb3IgbnVsbC4nLA0KICAgICAgICAnMzEnID0+ICdEbyBub3QgaW1wZXJzb25hdGU7IGlmIHlvdSBhcmUgdGhpcyB1c2VyLCBwbGVhc2UgbG9nIGluIGZpcnN0IGFuZCB0aGVuIGNvbW1lbnQuJywNCiAgICAgICAgJzMyJyA9PiAnT3BlcmF0aW5nIFRvbyBGYXN0JywNCiAgICAgICAgJzMzJyA9PiAnVXBkYXRlIEtleXdvcmQgRmFpbGVkJywNCiAgICAgICAgJzM0JyA9PiAnRGVsZXRlIEtleXdvcmQgRmFpbGVkJywNCiAgICAgICAgJzM1JyA9PiAnVXBkYXRlIFRhZyBGYWlsZWQnLA0KICAgICAgICAnMzYnID0+ICdEZWxldGUgVGFnIEZhaWxlZCcsDQogICAgICAgICczNycgPT4gJ0VkaXQgRmlsZSBGYWlsZWQnLA0KICAgICAgICAnMzgnID0+ICdZb3UgaGF2ZSBlbnRlcmVkIGEgd3JvbmcgdmVyaWZpY2F0aW9uIGNvZGUhJywNCiAgICAgICAgJzM5JyA9PiAnUGxlYXNlIGRvIG5vdCBzdWJtaXQgdGhlIHNhbWUgY29tbWVudC4nLA0KICAgICAgICAnNDAnID0+ICdDb21tZW50IERpc2FibGVkJywNCiAgICAgICAgJzQxJyA9PiAnUGluZyBVUkwgRGlzYWJsZWQnLA0KICAgICAgICAnNDInID0+ICdEaXNhYmxlZCBDb21tZW50IEZhaWxlZCcsDQogICAgICAgICc0MycgPT4gJ0NoZWNrc3VtIGVycm9ycywgZG8gbm90IHBvc3Qgc3BhbS4nLA0KICAgICAgICAnNDQnID0+ICdOb24tcHVibGlzaGVkIFBvc3RzIENhbm5vdCBDb21tZW50JywNCiAgICAgICAgJzQ1JyA9PiAnR3Vlc3QgYm9vayBhbGxvd2luZyBvbmx5IHJlZ2lzdGVyZWQgdXNlcnMsIHZpc2l0b3JzIGNhbiBsZWF2ZSBhIG1lc3NhZ2UuJywNCiAgICAgICAgJzQ2JyA9PiAnQ29tbWVudCBjYW4gbm90IGJlIGVtcHR5IG9yIHRvbyBsb25nLicsDQogICAgICAgICc0NycgPT4gJ1JlcGx5IGZlYXR1cmUgaXMgb3BlbiB0byByZWdpc3RlcmVkIHVzZXJzIG9ubHksIHZpc2l0b3JzIGNhbiBsZWF2ZSBhIG1lc3NhZ2UuJywNCiAgICAgICAgJzQ4JyA9PiAnVGhlIHBsdWdpbiBpcyBub3QgYWN0aXZhdGVkLCBwbGVhc2UgdG8gYWN0aXZhdGUgYXQgdGhlIGRhc2hib2FyZC4nLA0KICAgICAgICAnNDknID0+ICdUaGVyZSBhcmUgc3ViY2F0ZWdvcmllcyBpbiB0aGlzIGNhdGVnb3J5LCBkZWxldGUgZmFpbGVkLicsDQogICAgICAgICc1MCcgPT4gJ1RoZSBzcGVjaWZpZWQgcGFyZW50IGNhdGVnb3J5IGRvZXMgbm90IGV4aXN0LicsDQogICAgICAgICc1MScgPT4gJ1N1YmNhdGVnb3J5IGNhbm5vdCBpbmNsdWRlIGFueSBjYXRlZ29yeS4nLA0KICAgICAgICAnNTInID0+ICdFeGNlZWRlZCBtYXhpbXVtIG51bWJlciBvZiByZXBsaWVzLicsDQogICAgICAgICc1MycgPT4gJ1lvdXIgY29tbWVudCBoYXMgZW50ZXJlZCB0aGUgYXBwcm92YWwgcHJvY2VzcywgcGxlYXNlIGRvIG5vdCByZXN1Ym1pdC4nLA0KICAgICAgICAnNTQnID0+ICJQYXNzd29yZHMgc2hvdWxkIGJlIGJldHdlZW4gOCBhbmQgMjAgY2hhcmFjdGVycy4iLA0KICAgICAgICAnNTUnID0+ICdBIGxlbmd0aCBvZiBlbmNyeXB0ZWQgc3RyaW5nIGlzIG5vdCBlcXVhbCB0byAzMiBkaWdpdHMuJywNCiAgICAgICAgJzU2JyA9PiAnRXhjZWVkcyB0aGUgc2V0IG51bWJlciBvZiByZXBsaWVzLicsDQogICAgICAgICc1NycgPT4gJ1RoZSBwYXJlbnQgYW5kIHRoZSBjaGlsZCBjb21tZW50cyBhcmUgbm90IGluIHRoZSBzYW1lIHBvc3QuJywNCiAgICAgICAgJzU4JyA9PiAnUGFyZW50IGNhdGVnb3J5IGRvZXMgbm90IGV4aXN0LicsDQogICAgICAgICc1OScgPT4gJ1N1YmNhdGVnb3J5IGRvZXMgbm90IGV4aXN0LicsDQogICAgICAgICc2MCcgPT4gJ1JlcGx5IHRvIGNvbW1lbnQgZmFpbGVkLicsDQogICAgICAgICc2MScgPT4gJ1JlY29yZCBkb2VzIG5vdCBleGlzdC4nLA0KICAgICAgICAnNjInID0+ICdBIHVzZXIgd2l0aCB0aGF0IG5hbWUgYWxyZWFkeSBleGlzdHMsIHBsZWFzZSBjaGFuZ2UgdGhlIHVzZXIgbmFtZS4nLA0KICAgICAgICAnNjMnID0+ICdEaXNhYmxlIGJyb3dzZSBkcmFmdCBwb3N0LicsDQogICAgICAgICc2NCcgPT4gJ0FjdGl2YXRlIGZhaWxlZCwgdGhlIGFwcGxpY2F0aW9uIGRvZXMgbm90IGFwcGx5IHRvIFotQmxvZ1BIUC4nLA0KICAgICAgICAnNjUnID0+ICdXaW5kb3dzIFBob25lIHVzZXJzIHVwZ3JhZGUgdG8gV2luZG93cyBQaG9uZSA4LjEgYmVmb3JlIHVwbG9hZGluZyBmaWxlcy4nLA0KICAgICAgICAnNjYnID0+ICdVc2VybmFtZSBhbmQgcGFzc3dvcmQgY2Fubm90IGJlIGVtcHR5LicsDQogICAgICAgICc2NycgPT4gJ015U1FMIGRhdGFiYXNlIGlzIG5vdCBjb25uZWN0ZWQuJywNCiAgICAgICAgJzY4JyA9PiAnU1FMaXRlIGRhdGFiYXNlIGNvdWxkIG5vdCBiZSBvcGVuZWQuJywNCiAgICAgICAgJzY5JyA9PiAnTm90IHF1ZXJ5IHRvIHJlbGV2YW50IGRhdGEuJywNCiAgICAgICAgJzcwJyA9PiAnQ29udGV4dCBjYW4gbm90IGJlIGVtcHR5LicsDQogICAgICAgICc3MScgPT4gJ0N1cnJlbnQgZWRpdHMgbm90IHNhdmVkLicsDQogICAgICAgICc3MicgPT4gJ05hbWUgY2FuIG5vdCBiZSBudWxsIG9yIG5vdCBpbiB0aGUgY29ycmVjdCBmb3JtYXQuJywNCiAgICAgICAgJzczJyA9PiAnVGhlIHBhc3N3b3JkIGNvbmZpcm1hdGlvbiBkb2VzIG5vdCBtYXRjaC4nLA0KICAgICAgICAnNzQnID0+ICdBcmUgeW91IHN0aWxsIHVzaW5nIHRoZSBvbGQgYnJvd3NlciB2ZXJzaW9uIHdpdGggSUUga2VybmVsPyBQbGVhc2UgdXBncmFkZSB0byBJRTExISBcclxuWW91IGNhbiBjaGFuZ2UgdG8gYSBkaWZmZXJlbnQgYnJvd3NlciBpZiB5b3Ugd2FudCB0by4nLA0KICAgICAgICAnNzUnID0+ICdGaWxlIG5hbWUgY2FuIG5vdCBiZSBlbXB0eSEnLA0KICAgICAgICAnNzYnID0+ICdIdG1sIElEIGNhbiBub3QgYmUgZW1wdHkhJywNCiAgICAgICAgJzc3JyA9PiAnVXNlcm5hbWUgc2hvdWxkIGJlIGJldHdlZW4gJW1pbiBhbmQgJW1heCBjaGFyYWN0ZXJzLicsDQogICAgICAgICc3OCcgPT4gJ1RoaXMgYXBwbGljYXRpb24gcmVxdWlyZXMlcyBhbmQgYWJvdmUgdmVyc2lvbiBvZiBaLUJsb2dQSFAuJywNCiAgICAgICAgJzc5JyA9PiAnVXNlciBBY2NvdW50cyBub3QgQXBwcm92ZWQnLA0KICAgICAgICAnODAnID0+ICdVc2VyIEFjY291bnQgTG9ja2VkJywNCiAgICAgICAgJzgxJyA9PiAnVW5rbm93biBNZXRob2RzIG9yIFByb3BlcnRpZXMnLA0KICAgICAgICAnODInID0+ICdTaXRlIGhhcyBiZWVuIGNsb3NlZC4nLA0KICAgICAgICAnODMnID0+ICdBY3RpdmF0ZSB0aGUgYXBwbGljYXRpb24sIG5lZWQgdG8gcmVseSBvbiB0aGUgYXBwbGljYXRpb24gb2YgJXMgYWN0aXZhdGVkLicsDQogICAgICAgICc4NCcgPT4gJ0RlYWN0aXZhdGUgdGhlIGFwcGxpY2F0aW9uLCBuZWVkIHRvIHJlbHkgb24gdGhlIGFwcGxpY2F0aW9uIG9mICVzIGlzIGRlYWN0aXZhdGVkLicsDQogICAgICAgICc4NScgPT4gJ0FjdGl2YXRlIHRoZSBhcHBsaWNhdGlvbiwgbmVlZCB0byBkZWFjdGl2YXRlIHRoZSBjb25mbGljdCBvZiBhcHBsaWNhdGlvbiBvZiAlcy4nLA0KICAgICAgICAnODYnID0+ICdUaGVtZSB0ZW1wbGF0ZXMgY29tcGlsZWQgZmlsZSBkb2VzIG5vdCBleGlzdC4nLA0KICAgICAgICAnODcnID0+ICdSZWdpc3RlcmVkIFR5cGUgRmFpbGVkJywNCiAgICAgICAgJzg4JyA9PiAnVGhlIGZpbGUgdGhhdCB5b3UgdXBsb2FkZWQgbm90IGV4aXN0LCBtYXliZSBleGNlZWQgdGhlIG1heGltdW0gdXBsb2FkIGxpbWl0IG9mIHRoZSBzZXJ2ZXIuJywNCiAgICAgICAgJzg5JyA9PiAnRXJyb3Igd2hlbiBsb2FkaW5nIEphdmFTY3JpcHQuJywNCiAgICAgICAgJzkwJyA9PiAnQWxpYXMgZGlzYWxsb3cgc3BlY2lhbCBzeW1ib2xzLicsDQogICAgICAgICc5MScgPT4gJ1BIUCB2ZXJzaW9uIGlzIHRvbyBvbGQgdG8gZW5hYmxlIHRoaXMgYXBwbGljYXRpb24sIGl0IHJlcXVpcmVzICVzIGFuZCBhYm92ZS4nLA0KICAgICAgICAnOTInID0+ICdNaXNzaW5nICVzIGZ1bmN0aW9uLCBjYW4gbm90IGVuYWJsZSB0aGlzIGFwcGxpY2F0aW9uLicsDQogICAgICAgICc5MycgPT4gJ1RoaXMgYXJ0aWNsZSBpcyB1cGRhdGVkIGJ5IG90aGVyIHBhZ2VzLCBzbyB3ZSBkbyBub3QgYXV0b21hdGljYWxseSBiYWNrIHVwIHRoZSBjb250ZW50IG9uIHRoZSBjdXJyZW50IHBhZ2UgdW5sZXNzIHlvdSByZWZyZXNoIHRoZSBwYWdlLicsDQogICAgICAgICc5NCcgPT4gJ1lvdSBoYXZlIGJlZW4gb24gdGhpcyBwYWdlIGZvciAlcyBob3Vycy4gVG8gcHJvdGVjdCB5b3UgZnJvbSBhdHRhY2tzLCB5b3UgbWF5IG5lZWQgdG8gcmVmcmVzaCB0aGUgcGFnZS4nLA0KICAgICAgICAnOTUnID0+ICdBUEkgaXMgZGlzYWJsZWQhJywNCiAgICAgICAgJzk2JyA9PiAnQVBJIGlzIG5vdCBhdmFpbGFibGUhJywNCiAgICAgICAgJzk3JyA9PiAnVGhlIHJlc291cmNlIGRvZXMgbm90IGV4aXN0LicsDQogICAgICAgICc5OCcgPT4gJ0R1cGxpY2F0ZSBsYWJlbCBuYW1lJywNCiAgICAgICAgJzk5JyA9PiAnUGljdHVyZSBkb2VzIG5vdCBleGlzdCcsDQogICAgICAgICcxMDAnID0+ICdSZW1vdGUgcGljdHVyZSByZXF1ZXN0IGZhaWxlZCcsDQogICAgICAgICcxMDEnID0+ICdJbWFnZSBmYWlsZWQgdG8gbG9hZCcsDQogICAgICAgICcxMDInID0+ICdJbWFnZSBhc3BlY3QgcmF0aW8gZXJyb3InLA0KICAgICksDQoNCiAgICAnb2ZmaWNhbF91cmxzJyA9PiBhcnJheSgNCiAgICAgICAgJ21vcmVfaGVscCcgPT4gJ2h0dHBzOi8vd3d3LnpibG9nY24uY29tL2hlbHAvP2lkPXslaWQlfSZtZXNzYWdlPXslbWVzc2FnZSV9JywNCiAgICAgICAgJ2JpbmdfaGVscCcgPT4gJ2h0dHBzOi8vY24uYmluZy5jb20vc2VhcmNoP3E9eyVtZXNzYWdlJX0nLA0KICAgICAgICAnb2ZmaWNlX2RvY3MnID0+ICdodHRwczovL2RvY3MuemJsb2djbi5jb20vcGhwLyMvYm9va3Mvc3RhcnQtZmFxJywNCiAgICAgICAgJ29mZmljZV9iYnMnID0+ICdodHRwczovL2Jicy56YmxvZ2NuLmNvbS8nLA0KICAgICksDQoNCiAgICAvLyBQb3NzaWJsZSBjYXVzZXMgb2YgdGhlIGVycm9yDQogICAgJ2Vycm9yX3JlYXNvbnMnID0+IGFycmF5KA0KICAgICAgICAvLyAtMSBmb3IgZGVmYXVsdA0KICAgICAgICAnZGVmYXVsdCcgPT4gJycsDQoNCiAgICAgICAgLy8gWkJQIGVycm9ycyBmaXJzdA0KICAgICAgICAnNicgPT4gJw0KICAgICAgICAgICAgRGlkIHlvdSBhbHJlYWR5IGxvZ2luZWQ/IFBsZWFzZSBsb2dpbiwgYW5kIHRoZW4gcmV0cnkgdGhlIG9wZXJhdGlvbi4gPGJyLz4NCiAgICAgICAgICAgIERvIHlvdSBoYXZlIHRoZSBwZXJtaXNzaW9ucz8gWW91IGNhbiA8YSBocmVmPSJ7JUJsb2dIb3N0JX16Yl9zeXN0ZW0vY21kLnBocD9hY3Q9bWlzYyZ0eXBlPXZycyIgdGFyZ2V0PSJfYmxhbmsiPiBDbGljayBoZXJlIHRvIHNlZSB5b3VyIHBlcm1pc3Npb25zIDwvYT4uIDxici8+DQogICAgICAgICAgICA8YnIvPg0KICAgICAgICAnLA0KICAgICAgICAnOCcgPT4gJw0KICAgICAgICAgICAgSGF2ZSB5b3UgZW50ZXJlZCB0aGUgY29ycmVjdCBuYW1lIGFuZCBwYXNzd29yZD8gPGJyLz4NCiAgICAgICAgICAgIElmIHlvdSBhcmUgdGhlIHdlYm1hc3RlciBhbmQgaGF2ZSBmb3Jnb3R0ZW4geW91ciBwYXNzd29yZCwgeW91IGNhbiBjbGljayB0byBkb3dubG9hZCA8YSBocmVmPSJodHRwczovL3dpa2kuemJsb2djbi5jb20vZG9rdS5waHA/aWQ9emJsb2dwaHA6ZXJyb3I6JUU5JUE2JTk2JUU5JUExJUI1I2Vycm9yLTgiIHRhcmdldD0iX2JsYW5rIj5bTG9naW4gRmFpbGVkXTwvYT4uIDxici8+DQogICAgICAgICAgICA8YnIvPg0KICAgICAgICAnLA0KICAgICAgICAnOTEnID0+ICcNCsKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBZb3VyIFBIUCB2ZXJzaW9uIG1heSBiZSB0b28gb2xkIHRvIGVuYWJsZSB0aGlzIGFwcGxpY2F0aW9uLiBZb3VcJ2QgYmV0dGVyIHRvIGNvbnRhY3QgeW91ciBob3N0IGFuZCB1cGdyYWRlIHRvIHRoZSBsYXRlc3QgUEhQIHZlcnNpb24gdGhleSBjYW4gcHJvdmlkZS4gPGJyLz4NCsKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBGb3Igc2VjdXJpdHkgYW5kIGVmZmljaWVuY3ksIHdlIGFsc28gc3Ryb25nbHkgcmVjb21tZW5kIHRvIHVwZGF0ZSB5b3VyIFBIUCB0byB0aGUgbGF0ZXN0IHZlcnNpb24uDQrCoMKgwqDCoMKgwqDCoMKgICcsDQogICAgICAgICc5MicgPT4gJw0KwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIFlvdXIgZW52aXJvbm1lbnQgbWF5IGJlIG1pc3Npbmcgc29tZSBvZiB0aGUgbmVjZXNzYXJ5IGV4dGVuc2lvbnMsIHBsZWFzZSBjb250YWN0IHlvdXIgaG9zdCB0byBlbmFibGUgdGhlc2UgZXh0ZW5zaW9ucyB0byB1c2UgdGhpcyBhcHBsaWNhdGlvbi4gPGJyLz4gPGJyLz4NCsKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBZb3UgY2FuIDxhIGhyZWY9Imh0dHBzOi8vd2lraS56YmxvZ2NuLmNvbS9kb2t1LnBocD9pZD16YmxvZ3BocDplcnJvcjolRTklQTYlOTYlRTklQTElQjUjZXJyb3ItOTIiIHRhcmdldD0iX2JsYW5rIj4gY2xpY2sgaGVyZSB0byBnZXQgYSByb3VnaCBsaXN0IG9mIG1pc3NpbmcgZXh0ZW5zaW9ucy4gPC9hPg0KICAgICAgICAgJywNCg0KICAgICAgICAnb3RoZXInID0+IGFycmF5KA0KICAgICAgICAgICAgLy8gT3RoZXIgZXJyb3JzIHRoZW4NCiAgICAgICAgICAgICdteXNxbCcgPT4gJw0KICAgICAgICAgICAgICAgICAgICBQbGVhc2UgY2hlY2sgeW91ciBNeVNRTCBjb25maWd1cmF0aW9uIGluIHpiX3VzZXJzL2Nfb3B0aW9uLnBocCwgb3IgY2hlY2sgdGhlIE15U1FMIGNvbm5lY3Rpb24gaW5mb3JtYXRpb24gdGhhdCB5b3UganVzdCBmaWxsLiA8YnIvPg0KICAgICAgICAgICAgICAgICAgICBBbmQgeW91ciBNeVNRTCBkYXRhYmFzZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc3RhcnRlZD8gPGJyLz4NCiAgICAgICAgICAgIDxici8+DQogICAgICAgICAgICAnLA0KDQogICAgICAgICAgICAnc3FsaXRlJyA9PiAnDQogICAgICAgICAgICBQbGVhc2UgY2hlY2sgeW91ciBTUUxpdGUgY29uZmlndXJhdGlvbiBpbiB6Yl91c2Vycy9jX29wdGlvbi5waHAuIDxici8+DQogICAgICAgICAgICBPciBjaGVjayB5b3UgaGF2ZSByZWFkIGFuZCB3cml0ZSBwZXJtaXNzaW9ucyBvZiB0aGF0IFNRTGl0ZSBmaWxlLiA8YnIvPg0KICAgICAgICAgICAgPGJyLz4NCiAgICAgICAgICAgICcsDQoNCiAgICAgICAgICAgICdkaXNhYmxlZCBmb3Igc2VjdXJpdHkgcmVhc29ucycgPT4gJw0KICAgICAgICAgICAgICAgIFlvdSBjYW4gZGlzYWJsZSB0aGUgU2FmZSBNb2RlIG9mIFBIUC48YnIvPg0KICAgICAgICAgICAgICAgIE90aGVyd2lzZSB5b3UgY2FuIGRpc2FibGUgdGhlIHBsdWdpbiB3aGljaCBjYXVzZWQgdGhpcyBlcnJvciBhbmQgY29udGFjdCB0aGUgYXV0aG9yIG9mIHdoaWNoLg0KICAgICAgICAgICAgICAgIDxici8+DQogICAgICAgICAgICAnLA0KDQogICAgICAgICksDQoNCiAgICAgICAgJ2VuZCcgPT4gJw0KICAgICAgICAgICAgSWYgeW91IGFyZSBhIHZpc2l0b3IsIHRoaXMgbWF5IGJlIHNvbWV0aGluZyBoYXBwZW5lZC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlciwgb3IgY29udGFjdCB0aGUgd2VibWFzdGVyLiA8YnIvPg0KICAgICAgICAgICAgSWYgeW91IGFyZSB0aGUgd2VibWFzdGVyLCBZb3UgY2FuIGNsaWNrIG9uIDxhIGhyZWY9InslbW9yZWhlbHAlfSIgdGFyZ2V0PSJfYmxhbmsiPiBbbW9yZV0gPC9hPiB0byBnZXQgbW9yZSBoZWxwIGZyb20gWi1CbG9nIFdpa2koQ2hpbmVzZSBvbmx5KS4gVGhlcmVmb3JlLCB0byBwdWJsaXNoIGEgdGhyZWFkIGluIEVuZ2xpc2ggaW4gPGEgaHJlZj0iaHR0cHM6Ly9iYnMuemJsb2djbi5jb20vIiB0YXJnZXQ9Il9ibGFuayI+Wi1CbG9nIG9mZmljaWFsIGZvcnVtIDwvYT4gd2l0aCBkZXRhaWxlZCBlcnJvciBkZXNjcmlwdGlvbiBhbmQgc2NyZWVuc2hvdHMgZm9yIGhlbHAgaXMgYSBjaG9pY2UuDQogICAgICAgICcsDQogICAgKSwNCik7DQo=</file>
	<file name='zb_users\language\zh-cn.php' crc32='48B13E27'  dt:dt='bin.base64'></file>
	<file name='zb_users\language\zh-tw.php' crc32='11207624'  dt:dt='bin.base64'></file>
</files>
