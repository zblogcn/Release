<files codepage='65001'>
	<file name='readme.txt' crc32='AC9AF464'>77u/Wi1CbG9nUEhQIOaYr+eUsSBaLUJsb2cg56S+5Yy65o+Q5L6b55qE5Y2a5a6i56iL5bqP77yM5LiA55u06Ie05Yqb5LqO57uZ5Zu95YaF55So5oi35o+Q5L6b5LyY56eA55qE5Y2a5a6i5YaZ5L2c5L2T6aqM44CC5LuOIDIwMDUg5bm06LW35Y+R5biD56ys5LiA54mI77yM6Iez5LuK5bey5pyJIDE2IOW5tOeahOWOhuWPsu+8jOaYr+ebruWJjeWbveWGheS4uuaVsOS4jeWkmueahOaMgee7reaPkOS+m+abtOaWsOeahOW8gOa6kCBDTVMg57O757uf5LmL5LiA44CC5oiR5Lus55qE55uu5qCH5piv5L2/55So5oi35rKJ5rW45LqO5YaZ5L2c44CB6K6w5b2V55Sf5rS777yM5LiN6ZyA6KaB5YWz5rOo57mB55CQ55qE6K6+572u562J77yM6K6p55So5oi35LiT5rOo5LqO5Yib5L2c44CC5a+55LqO55So5oi36ICM6KiA77yM5a6D566A5Y2V5piT55So77yM5L2T56ev5bCP77yM6YCf5bqm5b+r77yM5pSv5oyB5pWw5o2u6YeP5aSn44CC5a+55byA5Y+R6ICF6ICM6KiA77yM5a6D5Y+I5pyJ552A5by65aSn55qE5Y+v5a6a5Yi25oCn44CB5Liw5a+M55qE5o+S5Lu25o6l5Y+j5ZKM54us56uL55qE5Li76aKY5qih5p2/44CC5pyf5b6FIFotQmxvZ1BIUCDog73miJDkuLrmgqjlhpnljZrlrqLnmoTnrKzkuIDpgInmi6njgIINCg0KR2l0SHViOiBodHRwczovL2dpdGh1Yi5jb20vemJsb2djbi96YmxvZ3BocA0KDQoNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQogICAgICAgICAg5YWN6LSj55Sz5piODQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KaHR0cHM6Ly93d3cuemJsb2djbi5jb20vZGlzY2xhaW1lci8NCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiAgICAgICAgICDnpL7ljLror7TmmI4NCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQoxLiDkvb/nlKjkuqTmtYHlj4rlvIDlj5Hlu7rorq7vvIzor7fovazlkJHvvJpaLUJsb2cg6K665Z2bIGh0dHBzOi8vYmJzLnpibG9nY24uY29tL++8mw0KMi4g5byA5Y+R5paH5qGj77yM5Y+C55yLIGh0dHBzOi8vZG9jcy56YmxvZ2NuLmNvbS/vvJsNCjMuIOaPkOS6pOWKn+iDvSBCVUfvvIzor7flnKjorrrlnZvlhoXvvIzmiJbnm7TmjqXlnKggR2l0SHViIElzc3VlIOWGheaPkOS6pO+8mw0KNC4g5qyi6L+OIFB1bGwgUmVxdWVzdO+8jOWmguaenOS9oOWWnOasou+8jOivt+S4uuaIkeS7rOeCueS4gOS4qiBTdGFyIDopDQoNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQogICAgICAgICAg6L+Q6KGM546v5aKDDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLSBXZWIgU2VydmVyOiBJSVMgLyBBcGFjaGUgLyBuZ2lueCAvIExpZ2h0dHBkIC8gS2FuZ2xlIC8gVGVuZ2luZSAvIENhZGR5IGFuZCBzbyBvbi4uLg0KLSBQSFAgNS4yIC0gOC4wIC8gSEhWTSAzDQotIE15U1FMIDUrIC8gTWFyaWFEQiAxMCsgLyBTUUxpdGUgMyAvIFBvc3RncmVTUUwNCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiAgICAgICAgICDlronoo4Xor7TmmI4NCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQrpppblhYjor7fnoa7kv53nvZHnq5nnm67lvZXmi6XmnIkgNzU1IOadg+mZkOOAgg0KMS4g5LiK5LygIFotQmxvZ1BIUCDnqIvluo/liLDnvZHnq5nnm67lvZUNCjIuIOaJk+W8gCBodHRwOi8v5L2g55qE572R56uZL++8jOi/m+WFpeWuieijheeVjOmdog0KMy4g5bu656uL5pWw5o2u5bqTDQogICAtIOmAieaLqSBNeVNRTCDmlbDmja7lupPvvIzor7fovpPlhaXnqbrpl7TllYbkuLrmgqjmj5DkvpvnmoQgTXlTUUwg5biQ5Y+35a+G56CB562J5L+h5oGvDQogICAtIOmAieaLqSBTUUxpdGXvvIzor7fnoa7kv53mnI3liqHlmajmlK/mjIEgU1FMaXRl77yM5a6J6KOF56iL5bqP5bCG5Zyo54K55Ye75LiL5LiA5q2l5ZCO6Ieq5Yqo5Yib5bu6IFNRTGl0ZSDmlbDmja7lupPmlofku7YNCiAgIC0g6YCJ5oupIFBvc3RncmVTUUwg5pWw5o2u5bqT77yM6K+36L6T5YWl55u45YWz5biQ5Y+35a+G56CB5pWw5o2u5bqT5ZCN562J5L+h5oGvDQo0LiDloavlhpnkvaDkuLrnq5nngrnorr7nva7nmoTnrqHnkIblkZjotKblj7flr4bnoIHvvIzliqHlv4Xkvb/nlKjlvLrlj6Pku6TotKblj7cNCjUuIOeCueWHu+S4i+S4gOatpe+8jOWuieijheaIkOWKn++8jOi/m+WFpee9keermQ0K</file>
	<file name='zb_system\admin\edit.php' crc32='66E13BB3'></file>
	<file name='zb_system\admin\updatedb.php' crc32='73FCC396'>PD9waHANCg0KLyoqDQogKiBaLUJsb2cgd2l0aCBQSFAuDQogKg0KICogQGF1dGhvciAgWi1CbG9nUEhQIFRlYW0NCiAqIEB2ZXJzaW9uIDEuMCAyMDIwLTAzLTI2DQogKi8NCnJlcXVpcmUgJy4uL2Z1bmN0aW9uL2Nfc3lzdGVtX2Jhc2UucGhwJzsNCnJlcXVpcmUgJy4uL2Z1bmN0aW9uL2Nfc3lzdGVtX2FkbWluLnBocCc7DQoNCiR6YnAtPkxvYWQoKTsNCg0KQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fWmJwX1Nob3dFcnJvcicsICdKc29uRXJyb3I0U2hvd0Vycm9ySG9vaycsIFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTik7DQoNCmlmICghJHpicC0+Q2hlY2tSaWdodHMoJ3Jvb3QnKSkgew0KICAgICR6YnAtPlNob3dFcnJvcig2KTsNCiAgICBkaWUoKTsNCn0NCg0KZnVuY3Rpb24gdXBkYXRlZGJfY2hlY2tleGlzdCgkdGFibGUsICRmaWVsZCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIHJldHVybiAkemJwLT5kYi0+RXhpc3RDb2x1bW4oJHRhYmxlLCAkZmllbGQpOw0KfQ0KDQpmdW5jdGlvbiB1cGRhdGVkYigpDQp7DQogICAgZ2xvYmFsICR6YnAsICR0YWJsZSwgJGRhdGFpbmZvOw0KICAgICR0ID0gJiR0YWJsZTsNCiAgICAkZCA9ICYkZGF0YWluZm87DQogICAgJGRiID0gJiR6YnAtPmRiOw0KDQogICAgLy8xNjIwOTANCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnVGFnJ10sICRkWydUYWcnXVsnVHlwZSddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdGFibGVbJ1RhZyddfSBBREQgIHskZFsnVGFnJ11bJ1R5cGUnXVswXX0gaW50ZWdlciBOT1QgTlVMTCBERUZBVUxUIDA7Iik7DQogICAgfQ0KICAgICRvbGQgPSB1cGRhdGVkYl9jaGVja2V4aXN0KCR0WydDYXRlZ29yeSddLCAkZFsnQ2F0ZWdvcnknXVsnVHlwZSddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdGFibGVbJ0NhdGVnb3J5J119IEFERCAgeyRkWydDYXRlZ29yeSddWydUeXBlJ11bMF19IGludGVnZXIgTk9UIE5VTEwgREVGQVVMVCAwOyIpOw0KICAgIH0NCg0KICAgIC8vMTcyMzAwDQogICAgJG9sZCA9IHVwZGF0ZWRiX2NoZWNrZXhpc3QoJHRbJ0NvbmZpZyddLCAkZFsnQ29uZmlnJ11bJ0tleSddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdGFibGVbJ0NvbmZpZyddfSBBREQgeyRkWydDb25maWcnXVsnS2V5J11bMF19IFZBUkNIQVIoMjUwKSBOT1QgTlVMTCBERUZBVUxUICcnOyIpOw0KICAgIH0NCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnUG9zdCddLCAkZFsnUG9zdCddWydDcmVhdGVUaW1lJ11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0WydQb3N0J119IEFERCB7JGRbJ1Bvc3QnXVsnQ3JlYXRlVGltZSddWzBdfSBpbnRlZ2VyIE5PVCBOVUxMIERFRkFVTFQgMDsiKTsNCiAgICB9DQogICAgJG9sZCA9IHVwZGF0ZWRiX2NoZWNrZXhpc3QoJHRbJ1Bvc3QnXSwgJGRbJ1Bvc3QnXVsnVXBkYXRlVGltZSddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdFsnUG9zdCddfSBBREQgeyRkWydQb3N0J11bJ1VwZGF0ZVRpbWUnXVswXX0gaW50ZWdlciBOT1QgTlVMTCBERUZBVUxUIDA7Iik7DQogICAgfQ0KDQogICAgaWYgKCR6YnAtPm9wdGlvblsnWkNfTEFTVF9WRVJTSU9OJ10gPCAxNjIzMTUgJiYgJGRiLT50eXBlID09ICdteXNxbCcpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdFsnUG9zdCddfSBNT0RJRlkgIGB7JGRbJ1Bvc3QnXVsnVHlwZSddWzBdfWAgSU5UKDExKSBOT1QgTlVMTCBERUZBVUxUICcwJzsiKTsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdFsnVGFnJ119IE1PRElGWSAgYHskZFsnVGFnJ11bJ1R5cGUnXVswXX1gIElOVCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCc7Iik7DQogICAgICAgIEAkZGItPlF1ZXJ5KCJBTFRFUiBUQUJMRSB7JHRbJ0NhdGVnb3J5J119IE1PRElGWSAgYHskZFsnQ2F0ZWdvcnknXVsnVHlwZSddWzBdfWAgSU5UKDExKSBOT1QgTlVMTCBERUZBVUxUICcwJzsiKTsNCiAgICB9DQoNCiAgICAvLzE3MjMxNQ0KICAgICRvbGQgPSB1cGRhdGVkYl9jaGVja2V4aXN0KCR0WydUYWcnXSwgJGRbJ1RhZyddWydHcm91cCddWzBdKTsNCiAgICBpZiAoJG9sZCA9PT0gZmFsc2UpIHsNCiAgICAgICAgQCRkYi0+UXVlcnkoIkFMVEVSIFRBQkxFIHskdGFibGVbJ1RhZyddfSBBREQgIHskZFsnVGFnJ11bJ0dyb3VwJ11bMF19IFZBUkNIQVIoMjUwKSBOT1QgTlVMTCBERUZBVUxUICcnOyIpOw0KICAgIH0NCiAgICAkb2xkID0gdXBkYXRlZGJfY2hlY2tleGlzdCgkdFsnQ2F0ZWdvcnknXSwgJGRbJ0NhdGVnb3J5J11bJ0dyb3VwJ11bMF0pOw0KICAgIGlmICgkb2xkID09PSBmYWxzZSkgew0KICAgICAgICBAJGRiLT5RdWVyeSgiQUxURVIgVEFCTEUgeyR0YWJsZVsnQ2F0ZWdvcnknXX0gQUREICB7JGRbJ0NhdGVnb3J5J11bJ0dyb3VwJ11bMF19IFZBUkNIQVIoMjUwKSBOT1QgTlVMTCBERUZBVUxUICcnOyIpOw0KICAgIH0NCg0KICAgIC8vMTcyMzMwDQogICAgJG9sZCA9IHVwZGF0ZWRiX2NoZWNrZXhpc3QoJHRbJ01lbWJlciddLCAkZFsnTWVtYmVyJ11bJ0NyZWF0ZVRpbWUnXVswXSk7DQogICAgaWYgKCRvbGQgPT09IGZhbHNlKSB7DQogICAgICAgIEAkZGItPlF1ZXJ5KCJBTFRFUiBUQUJMRSB7JHRbJ01lbWJlciddfSBBREQgeyRkWydNZW1iZXInXVsnQ3JlYXRlVGltZSddWzBdfSBpbnRlZ2VyIE5PVCBOVUxMIERFRkFVTFQgMDsiKTsNCiAgICB9DQogICAgJG9sZCA9IHVwZGF0ZWRiX2NoZWNrZXhpc3QoJHRbJ01lbWJlciddLCAkZFsnTWVtYmVyJ11bJ1VwZGF0ZVRpbWUnXVswXSk7DQogICAgaWYgKCRvbGQgPT09IGZhbHNlKSB7DQogICAgICAgIEAkZGItPlF1ZXJ5KCJBTFRFUiBUQUJMRSB7JHRbJ01lbWJlciddfSBBREQgeyRkWydNZW1iZXInXVsnVXBkYXRlVGltZSddWzBdfSBpbnRlZ2VyIE5PVCBOVUxMIERFRkFVTFQgMDsiKTsNCiAgICB9DQoNCiAgICAvLzE3MjgwMA0KICAgIEAkZGItPlF1ZXJ5KCJVUERBVEUgeyR0WydQb3N0J119IFNFVCB7JGRbJ1Bvc3QnXVsnVXBkYXRlVGltZSddWzBdfSA9IHskZFsnUG9zdCddWydQb3N0VGltZSddWzBdfSBXSEVSRSB7JGRbJ1Bvc3QnXVsnVXBkYXRlVGltZSddWzBdfSA9IDA7Iik7DQoNCiAgICAkemJwLT5vcHRpb25bJ1pDX0xBU1RfVkVSU0lPTiddID0gWkNfTEFTVF9WRVJTSU9OOw0KICAgICR6YnAtPlNhdmVPcHRpb24oKTsNCn0NCg0KaWYgKCR6YnAtPnZlcnNpb24gPj0gWkNfTEFTVF9WRVJTSU9OICYmIChpbnQpICR6YnAtPm9wdGlvblsnWkNfTEFTVF9WRVJTSU9OJ10gPCBaQ19MQVNUX1ZFUlNJT04pIHsNCiAgICB1cGRhdGVkYigpOw0KICAgIGlmIChpc3NldCgkX0dFVFsndXBkYXRlZGInXSkpIHsNCiAgICAgICAgZWNobyAkemJwLT5sYW5ncy0+bXNnLT5vcGVyYXRpb25fc3VjY2VlZDsNCiAgICB9IGVsc2Ugew0KICAgICAgICBKc29uUmV0dXJuKCR6YnAtPmxhbmdzLT5tc2ctPm9wZXJhdGlvbl9zdWNjZWVkKTsNCiAgICB9DQp9DQpkaWU7DQo=</file>
	<file name='zb_system\api\category.php' crc32='B9FADCD7'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFotQmxvZyB3aXRoIFBIUC4NCiAqDQogKiBAYXV0aG9yICBaLUJsb2dQSFAgVGVhbQ0KICogQHZlcnNpb24gMS4wIDIwMjAtMDgtMTANCiAqLw0KDQovKioNCiAqIOiOt+WPluWIhuexu+S/oeaBr+aOpeWPoy4NCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIGFwaV9jYXRlZ29yeV9nZXQoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgQXBpQ2hlY2tBdXRoKGZhbHNlLCAndmlldycpOw0KDQogICAgJGNhdGVnb3J5ID0gbnVsbDsNCiAgICAkY2F0ZUlkID0gKGludCkgR2V0VmFycygnaWQnKTsNCiAgICAkY2F0ZUFsaWFzID0gR2V0VmFycygnYWxpYXMnKTsNCiAgICAkY2F0ZU5hbWUgPSBHZXRWYXJzKCduYW1lJyk7DQoNCiAgICBpZiAoJGNhdGVJZCA+IDApIHsNCiAgICAgICAgJGNhdGVnb3J5ID0gJHpicC0+R2V0Q2F0ZWdvcnlCeUlEKCRjYXRlSWQpOw0KICAgIH0gZWxzZWlmICgkY2F0ZUFsaWFzICE9PSBudWxsKSB7DQogICAgICAgICRjYXRlZ29yeSA9ICR6YnAtPkdldENhdGVnb3J5QnlBbGlhcygkY2F0ZUFsaWFzKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkY2F0ZWdvcnkgPSAkemJwLT5HZXRDYXRlZ29yeUJ5TmFtZSgkY2F0ZU5hbWUpOw0KICAgIH0NCg0KICAgIEFwaUNoZWNrQXV0aChmYWxzZSwgJHpicC0+R2V0UG9zdFR5cGVfU3ViKCRjYXRlZ29yeS0+VHlwZSwgJ2FjdGlvbnMnLCAndmlldycpKTsNCg0KICAgICRhcnJheSA9IEFwaUdldE9iamVjdEFycmF5KCRjYXRlZ29yeSwgYXJyYXkoJ1VybCcsICdTeW1ib2wnLCAnTGV2ZWwnLCAnU3ltYm9sTmFtZScsICdBbGxDb3VudCcpKTsNCg0KICAgIGlmICgkY2F0ZWdvcnkgJiYgJGNhdGVnb3J5LT5JRCAhPSBudWxsKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgnY2F0ZWdvcnknID0+ICRhcnJheSksDQogICAgICAgICk7DQogICAgfQ0KDQogICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAnY29kZScgPT4gNDA0LA0KICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnZXJyb3InXVsnOTcnXSwNCiAgICApOw0KfQ0KDQovKioNCiAqIOaWsOWini/kv67mlLnliIbnsbvmjqXlj6MuDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBhcGlfY2F0ZWdvcnlfcG9zdCgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICBBcGlDaGVja0F1dGgodHJ1ZSwgJ0NhdGVnb3J5UHN0Jyk7DQoNCiAgICB0cnkgew0KICAgICAgICAkY2F0ZWdvcnkgPSBQb3N0Q2F0ZWdvcnkoKTsNCiAgICAgICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAgICAgJHpicC0+U2F2ZUNhY2hlKCk7DQoNCiAgICAgICAgJGFycmF5ID0gQXBpR2V0T2JqZWN0QXJyYXkoJGNhdGVnb3J5LCBhcnJheSgnVXJsJywgJ1N5bWJvbCcsICdMZXZlbCcsICdTeW1ib2xOYW1lJywgJ0FsbENvdW50JykpOw0KDQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX3N1Y2NlZWQnXSwNCiAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgnY2F0ZWdvcnknID0+ICRhcnJheSksDQogICAgICAgICk7DQogICAgfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA1MDAsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXSAuICcgJyAuICRlLT5nZXRNZXNzYWdlKCksDQogICAgICAgICk7DQogICAgfQ0KDQogICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9zdWNjZWVkJ10sDQogICAgKTsNCn0NCg0KLyoqDQogKiDliKDpmaTliIbnsbvmjqXlj6MuDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBhcGlfY2F0ZWdvcnlfZGVsZXRlKCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCg0KICAgIEFwaVZlcmlmeUNTUkYodHJ1ZSk7DQogICAgQXBpQ2hlY2tBdXRoKHRydWUsICdDYXRlZ29yeURlbCcpOw0KDQogICAgdHJ5IHsNCiAgICAgICAgaWYgKCR6YnAtPkdldENhdGVnb3J5QnlJRCgoaW50KSBHZXRWYXJzKCdpZCcpKS0+SUQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAgICAgICAgICdjb2RlJyA9PiA0MDQsDQogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ2Vycm9yJ11bJzk3J10sDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgICAgIGlmICghRGVsQ2F0ZWdvcnkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KA0KICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkR0xPQkFMU1snbGFuZyddWydtc2cnXVsnb3BlcmF0aW9uX2ZhaWxlZCddLA0KICAgICAgICAgICAgICAgICdkYXRhJyA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2lkJyA9PiBHZXRWYXJzKCdpZCcpLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7DQogICAgICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgICAgICdjb2RlJyA9PiA1MDAsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJEdMT0JBTFNbJ2xhbmcnXVsnbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXSAuICcgJyAuICRlLT5nZXRNZXNzYWdlKCksDQogICAgICAgICk7DQogICAgfQ0KDQogICAgJHpicC0+QnVpbGRNb2R1bGUoKTsNCiAgICAkemJwLT5TYXZlQ2FjaGUoKTsNCg0KICAgIHJldHVybiBhcnJheSgNCiAgICAgICAgJ21lc3NhZ2UnID0+ICRHTE9CQUxTWydsYW5nJ11bJ21zZyddWydvcGVyYXRpb25fc3VjY2VlZCddLA0KICAgICk7DQp9DQoNCi8qKg0KICog5YiX5Ye65YiG57G75o6l5Y+jLg0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqLw0KZnVuY3Rpb24gYXBpX2NhdGVnb3J5X2xpc3QoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHR5cGUgPSAoaW50KSBHZXRWYXJzKCd0eXBlJyk7DQogICAgJG1uZyA9IHN0cnRvbG93ZXIoKHN0cmluZykgR2V0VmFycygnbWFuYWdlJykpOyAvLyZtYW5hZ2U9MQ0KDQogICAgJGxpbWl0Q291bnQgPSAkemJwLT5vcHRpb25bJ1pDX01BTkFHRV9DT1VOVCddOw0KDQogICAgLy8g5p2D6ZmQ6aqM6K+BDQogICAgLy/mo4Dmn6XnrqHnkIbmqKHlvI/mnYPpmZANCiAgICBpZiAoIWVtcHR5KCRtbmcpKSB7DQogICAgICAgIC8v5qOA5p+l566h55CG5qih5byP5p2D6ZmQDQogICAgICAgIEFwaUNoZWNrQXV0aCh0cnVlLCAnQ2F0ZWdvcnlNbmcnKTsNCiAgICAgICAgLy9BcGlDaGVja0F1dGgodHJ1ZSwgJ0NhdGVnb3J5QWxsJyk7DQoNCiAgICAgICAgJGxpbWl0Q291bnQgPSAkemJwLT5vcHRpb25bJ1pDX01BTkFHRV9DT1VOVCddOw0KICAgIH0gZWxzZSB7DQogICAgICAgIC8vIOm7mOiupOmdnueuoeeQhuaooeW8jw0KICAgICAgICBBcGlDaGVja0F1dGgoZmFsc2UsICd2aWV3Jyk7DQogICAgICAgICRsaW1pdENvdW50ID0gJHpicC0+b3B0aW9uWydaQ19NQU5BR0VfQ09VTlQnXTsNCiAgICB9DQoNCiAgICAkZmlsdGVyID0gQXBpR2V0UmVxdWVzdEZpbHRlcigNCiAgICAgICAgJGxpbWl0Q291bnQsDQogICAgICAgIGFycmF5KA0KICAgICAgICAgICAgJ0lEJyA9PiAnY2F0ZV9JRCcsDQogICAgICAgICAgICAnT3JkZXInID0+ICdjYXRlX09yZGVyJywNCiAgICAgICAgICAgICdDb3VudCcgPT4gJ2NhdGVfQ291bnQnLA0KICAgICAgICAgICAgJ0dyb3VwJyA9PiAnY2F0ZV9Hcm91cCcsDQogICAgICAgICkNCiAgICApOw0KDQogICAgJHdoZXJlW10gPSBhcnJheSgnPScsICdjYXRlX1R5cGUnLCAkdHlwZSk7DQogICAgJG9yZGVyID0gJGZpbHRlclsnb3JkZXInXTsNCiAgICAkbGltaXQgPSAkZmlsdGVyWydsaW1pdCddOw0KICAgICRvcHRpb24gPSAkZmlsdGVyWydvcHRpb24nXTsNCg0KICAgICRsaXN0QXJyID0gQXBpR2V0T2JqZWN0QXJyYXlMaXN0KA0KICAgICAgICAkemJwLT5HZXRDYXRlZ29yeUxpc3QoJyonLCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKSwNCiAgICAgICAgYXJyYXkoJ1VybCcsICdTeW1ib2wnLCAnTGV2ZWwnLCAnU3ltYm9sTmFtZScsICdBbGxDb3VudCcpDQogICAgKTsNCg0KICAgICRwYWdpbmF0aW9uQXJyID0gQXBpR2V0UGFnZWJhckluZm8oJG9wdGlvbik7DQoNCiAgICByZXR1cm4gYXJyYXkoDQogICAgICAgICdkYXRhJyA9PiBhcnJheSgNCiAgICAgICAgICAgICdsaXN0JyA9PiAkbGlzdEFyciwNCiAgICAgICAgICAgICdwYWdlYmFyJyA9PiAkcGFnaW5hdGlvbkFyciwNCiAgICAgICAgKSwNCiAgICApOw0KfQ0K</file>
	<file name='zb_system\api\comment.php' crc32='6A9382DB'></file>
	<file name='zb_system\defend\en.php' crc32='8786A9E4'></file>
	<file name='zb_system\defend\error.php' crc32='8B316803'></file>
	<file name='zb_system\defend\option.php' crc32='D14874A5'></file>
	<file name='zb_system\defend\routes_post_article.php' crc32='30C635B9'>PD9waHANCg0KcmV0dXJuIGFycmF5ICgNCi8vICDmt7vliqAg5paH56ug6aG15Y2V6aG1IOWKqOaAgei3r+eUsQ0KICAnYWN0aXZlX3Bvc3RfYXJ0aWNsZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdhY3RpdmUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX3NpbmdsZScsDQogICAgJ2NhbGwnID0+ICdWaWV3UG9zdCcsDQogICAgJ2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGUnLA0KICAgICAgMSA9PiAnYXV0aCcsDQogICAgICAyID0+ICd0YWdzJywNCiAgICAgIDMgPT4gJ2RhdGUnLA0KICAgICksDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICd0b19wZXJtYWxpbmsnID0+IHRydWUsDQogICksDQovLyAg5re75YqgIOaWh+eroGNhdGXpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF9jYXRlZ29yeScgPT4gDQogIGFycmF5ICgNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9jYXRlZ29yeScsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdnZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3BhZ2UnLA0KICAgICksDQogICAgJ211c3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdjYXRlJywNCiAgICApLA0KICAgICdub3RfZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdpZCcsDQogICAgICAxID0+ICdhbGlhcycsDQogICAgKSwNCiAgKSwNCi8vICDmt7vliqAg5paH56ugYXV0aOmhteWIl+ihqCjluKblj4LmlbApIOWKqOaAgei3r+eUsQ0KICAnYWN0aXZlX3Bvc3RfYXJ0aWNsZV9saXN0X2F1dGhvcicgPT4gDQogIGFycmF5ICgNCiAgICAndHlwZScgPT4gJ2FjdGl2ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9hdXRob3InLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdtdXN0X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnYXV0aCcsDQogICAgKSwNCiAgICAnbm90X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroGRhdGXpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF9kYXRlJyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAnYWN0aXZlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X2RhdGUnLA0KICAgICdjYWxsJyA9PiAnVmlld0xpc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnZ2V0JyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdtdXN0X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnZGF0ZScsDQogICAgKSwNCiAgICAnbm90X2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnaWQnLA0KICAgICAgMSA9PiAnYWxpYXMnLA0KICAgICksDQogICksDQovLyAg5re75YqgIOaWh+eroHRhZ3PpobXliJfooago5bim5Y+C5pWwKSDliqjmgIHot6/nlLENCiAgJ2FjdGl2ZV9wb3N0X2FydGljbGVfbGlzdF90YWcnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdhY3RpdmUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfdGFnJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2dldCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncGFnZScsDQogICAgKSwNCiAgICAnbXVzdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3RhZ3MnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2lkJywNCiAgICAgIDEgPT4gJ2FsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6DpobXljZXpobUg5Lyq6Z2Z6Lev55SxDQogICdyZXdyaXRlX3Bvc3RfYXJ0aWNsZV9zaW5nbGUnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9zaW5nbGUnLA0KICAgICdjYWxsJyA9PiAnVmlld1Bvc3QnLA0KICAgICd1cmxydWxlJyA9PiAnJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAncG9zdEBpZCcsDQogICAgICAxID0+ICdwb3N0QGFsaWFzJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BpbmRleOWIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3QnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0JywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3BhZ2UnLA0KICAgICksDQogICAgJ2FyZ3Nfd2l0aCcgPT4gDQogICAgYXJyYXkgKA0KICAgICksDQogICAgJ2FiYnJfdXJsJyA9PiB0cnVlLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BjYXRlZ29yeeWIl+ihqCDkvKrpnZnot6/nlLENCiAgJ3Jld3JpdGVfcG9zdF9hcnRpY2xlX2xpc3RfY2F0ZWdvcnknID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X2NhdGVnb3J5JywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGVAaWQnLA0KICAgICAgMSA9PiAnY2F0ZUBhbGlhcycsDQogICAgICAyID0+ICdwYWdlJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BhdXRob3LliJfooagg5Lyq6Z2Z6Lev55SxDQogICdyZXdyaXRlX3Bvc3RfYXJ0aWNsZV9saXN0X2F1dGhvcicgPT4gDQogIGFycmF5ICgNCiAgICAndHlwZScgPT4gJ3Jld3JpdGUnLA0KICAgICduYW1lJyA9PiAncG9zdF9hcnRpY2xlX2xpc3RfYXV0aG9yJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2F1dGhAaWQnLA0KICAgICAgMSA9PiAnYXV0aEBhbGlhcycsDQogICAgICAyID0+ICdwYWdlJywNCiAgICApLA0KICApLA0KLy8gIOa3u+WKoCDmlofnq6BkYXRl5YiX6KGoIOS8qumdmei3r+eUsQ0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfbGlzdF9kYXRlJyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdF9kYXRlJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdMaXN0JywNCiAgICAndXJscnVsZScgPT4gJycsDQogICAgJ2FyZ3MnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2RhdGUnLA0KICAgICAgMSA9PiAncGFnZScsDQogICAgKSwNCiAgKSwNCi8vICDmt7vliqAg5paH56ugdGFn5YiX6KGoIOS8qumdmei3r+eUsQ0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfbGlzdF90YWcnID0+IA0KICBhcnJheSAoDQogICAgJ3R5cGUnID0+ICdyZXdyaXRlJywNCiAgICAnbmFtZScgPT4gJ3Bvc3RfYXJ0aWNsZV9saXN0X3RhZycsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdhcmdzJyA9PiANCiAgICBhcnJheSAoDQogICAgICAwID0+ICd0YWdzQGlkJywNCiAgICAgIDEgPT4gJ3RhZ3NAYWxpYXMnLA0KICAgICAgMiA9PiAncGFnZScsDQogICAgKSwNCiAgKSwNCi8vICDov5nmmK/kuIDkuKrkvovlrZDvvJog5paH56ug5pCc57Si55qE5Lyq6Z2Z6Lev55Sx55qE5a6e546wDQovKg0KICAncmV3cml0ZV9wb3N0X2FydGljbGVfc2VhcmNoJyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAncmV3cml0ZScsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfc2VhcmNoJywNCiAgICAnY2FsbCcgPT4gJ1ZpZXdTZWFyY2gnLA0KICAgICdwcmVmaXgnID0+ICdzZWFyY2gnLA0KICAgICd1cmxydWxlJyA9PiAneyVob3N0JX17JXElfV97JXBhZ2UlfS5odG1sJywNCiAgICAnYXJncycgPT4gDQogICAgYXJyYXkgKA0KICAgICAgJ3EnID0+ICdbXlxcL19dKycsDQogICAgICAwID0+ICdwYWdlJywNCiAgICApLA0KICAgICdhcmdzX3dpdGgnID0+IA0KICAgIGFycmF5ICgNCiAgICAgICdwb3N0dHlwZScgPT4gMCwNCiAgICApLA0KICAgICdyZXF1ZXN0X21ldGhvZCcgPT4gDQogICAgYXJyYXkgKA0KICAgICAgMCA9PiAnR0VUJywNCiAgICAgIDEgPT4gJ1BPU1QnLA0KICAgICksDQogICAgJ29ubHlfbWF0Y2hfcGFnZScgPT4gZmFsc2UsDQogICksDQoqLw0KLy8gIOa3u+WKoCDpu5jorqTot6/nlLEg77yI5paH56ug6aG15YiX6KGo55qE6aaW6aG16Lev55Sx77yM5Y+q5Zyo5rKh5pyJ5byA5ZCv5Lyq6Z2Z5LiL5ZCv55So77yJDQogICdkZWZhdWx0X3Bvc3RfYXJ0aWNsZV9saXN0JyA9PiANCiAgYXJyYXkgKA0KICAgICd0eXBlJyA9PiAnZGVmYXVsdCcsDQogICAgJ25hbWUnID0+ICdwb3N0X2FydGljbGVfbGlzdCcsDQogICAgJ2NhbGwnID0+ICdWaWV3TGlzdCcsDQogICAgJ3VybHJ1bGUnID0+ICcnLA0KICAgICdnZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ3BhZ2UnLA0KICAgICksDQogICAgJ25vdF9nZXQnID0+IA0KICAgIGFycmF5ICgNCiAgICAgIDAgPT4gJ2NhdGUnLA0KICAgICAgMSA9PiAndGFncycsDQogICAgICAyID0+ICdhdXRoJywNCiAgICAgIDMgPT4gJ2RhdGUnLA0KICAgICAgNCA9PiAnaWQnLA0KICAgICAgNSA9PiAnYWxpYXMnLA0KICAgICksDQogICAgJ2FiYnJfdXJsJyA9PiB0cnVlLA0KICAgICdvbmx5X2FjdGl2ZScgPT4gdHJ1ZSwNCiAgKSwNCik7DQo=</file>
	<file name='zb_system\function\c_system_admin_function.php' crc32='79533D8F'></file>
	<file name='zb_system\function\c_system_api.php' crc32='26BAE396'></file>
	<file name='zb_system\function\c_system_base.php' crc32='C1B0F192'></file>
	<file name='zb_system\function\c_system_common.php' crc32='BF470B88'></file>
	<file name='zb_system\function\c_system_function.php' crc32='3A18A67F'></file>
	<file name='zb_system\function\c_system_plugin.php' crc32='272B94F8'></file>
	<file name='zb_system\function\c_system_route.php' crc32='6F2079EF'></file>
	<file name='zb_system\function\c_system_version.php' crc32='320550D9'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNycpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzAnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMjk1NScpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ1RlbmV0Jyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT04nLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQgLiAnLicgLiBaQ19WRVJTSU9OX0NPTU1JVCk7DQppZiAoc3RyY2FzZWNtcChaQ19WRVJTSU9OX0NPREVOQU1FLCAnQmV0YScpID09IDAgfHwgc3RyY2FzZWNtcChaQ19WRVJTSU9OX0NPREVOQU1FLCAnQWxwaGEnKSA9PSAwKSB7DQogICAgZGVmaW5lKCdaQ19WRVJTSU9OX0RJU1BMQVknLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQgLiAnICcgLiBaQ19WRVJTSU9OX0NPREVOQU1FKTsNCn0gZWxzZSB7DQogICAgZGVmaW5lKCdaQ19WRVJTSU9OX0RJU1BMQVknLCBaQ19WRVJTSU9OX01BSk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9NSU5PUiAuICcuJyAuIFpDX1ZFUlNJT05fQlVJTEQpOw0KfQ0KZGVmaW5lKCdaQ19WRVJTSU9OX0ZVTEwnLCBaQ19WRVJTSU9OIC4gJyAoJyAuIFpDX1ZFUlNJT05fQ09ERU5BTUUgLiAnKScpOw0KZGVmaW5lKCdaQ19CTE9HX0NPTU1JVCcsIFpDX1ZFUlNJT05fQ09NTUlUKTsgLy8g5Li65YaZ5YWl57O757uf6YWN572u57uf5LiA6aOO5qC8DQokR0xPQkFMU1snYmxvZ3ZlcnNpb24nXSA9IFpDX1ZFUlNJT05fTUFKT1IgLiBaQ19WRVJTSU9OX01JTk9SIC4gWkNfVkVSU0lPTl9DT01NSVQ7DQpkZWZpbmUoJ1pDX0JMT0dfVkVSU0lPTicsIFpDX1ZFUlNJT05fRElTUExBWSAuICcgQnVpbGQgJyAuICRHTE9CQUxTWydibG9ndmVyc2lvbiddKTsNCmRlZmluZSgnWkNfTEFTVF9WRVJTSU9OJywgJzE3MjgwMCcpOyAvL+aVsOaNruW6k+mHjOWGmeWFpeeahOacgOaWsOeahOaVsOaNruW6k+eJiOacrOWPt++8iOmdnuezu+e7n+eJiOacrOWPt++8jOWPquacieabtOaUueaVsOaNruW6k+e7k+aehOaJjeS8muWPmOWKqO+8iQ0KZGVmaW5lKCdaQ19OT1dfVkVSU0lPTicsICRHTE9CQUxTWydibG9ndmVyc2lvbiddKTsNCg==</file>
	<file name='zb_system\function\lib\base.php' crc32='C2455DF1'></file>
	<file name='zb_system\function\lib\category.php' crc32='4203CA5D'></file>
	<file name='zb_system\function\lib\config.php' crc32='FE658CC4'></file>
	<file name='zb_system\function\lib\metas.php' crc32='1E566597'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIOaJqeWxleWGheWuueexuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBpbnR8c3RyaW5nIENvdW50DQogKiBAcHJvcGVydHkgc3RyaW5nIFVybA0KICovDQpjbGFzcyBNZXRhcw0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheSDlrZjlgqhNZXRhc+ebuOW6lOaVsOWAvOeahOaVsOe7hA0KICAgICAqLw0KICAgIHByaXZhdGUgJHBfZGF0YSA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIGtleeWQjQ0KICAgICAqIEBwYXJhbSAkdmFsdWUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19zZXQoJG5hbWUsICR2YWx1ZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5wX2RhdGFbJG5hbWVdID0gJHZhbHVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUga2V55ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5wX2RhdGFbJG5hbWVdKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5wX2RhdGFbJG5hbWVdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9faXNzZXQoJG5hbWUpDQogICAgew0KICAgICAgICByZXR1cm4gaXNzZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3Vuc2V0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgdW5zZXQoJHRoaXMtPnBfZGF0YVskbmFtZV0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuaVsOe7hOaVsOaNrui9rOaNouS4uk1ldGFz5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIGFycmF5ICRhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1ldGFzDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBDb252ZXJ0QXJyYXkoJGEpDQogICAgew0KICAgICAgICAkbSA9IG5ldyBzZWxmKCk7DQogICAgICAgIGlmIChpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgICRtLT5wX2RhdGEgPSAkYTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5ZEYXRh5pWw5o2uLg0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXREYXRhKCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+cF9kYXRhOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS+neaNrnpicOiuvue9ruabv+aNouetvuagh+S4umhvc3TlgLzmiJbmmK/lm7rlrprln5/lkI0uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR2YWx1ZQ0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFJlcGxhY2VUYWcySG9zdCgkdmFsdWUpDQogICAgew0KICAgICAgICBnbG9iYWwgJGJsb2dob3N0Ow0KDQogICAgICAgIHJldHVybiBzdHJfcmVwbGFjZSgneyNaQ19CTE9HX0hPU1QjfScsICRibG9naG9zdCwgJHZhbHVlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkvp3mja56YnDorr7nva7mm7/mjaJob3N05YC85Li6562+5qCHLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdmFsdWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBSZXBsYWNlSG9zdDJUYWcoJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICRibG9naG9zdDsNCg0KICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UoJGJsb2dob3N0LCAneyNaQ19CTE9HX0hPU1QjfScsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5p+lRGF0YeWxnuaAp++8iOaVsOe7hO+8ieWxnuaAp+WAvOaYr+aYr+WQpuWtmOWcqOebuOW6lGtleS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUga2V55ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gSGFzS2V5KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGFycmF5X2tleV9leGlzdHMoJG5hbWUsICR0aGlzLT5wX2RhdGEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpURhdGHlsZ7mgKfvvIjmlbDnu4TvvInkuK3nmoTljZXlhYPmlbDnm64uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDb3VudEl0ZW0oKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGNvdW50KCR0aGlzLT5wX2RhdGEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpERhdGHlsZ7mgKfvvIjmlbDnu4TvvInkuK3nmoTnm7jlupTpobkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIGtleeWQjQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWwoJG5hbWUpDQogICAgew0KICAgICAgICB1bnNldCgkdGhpcy0+cF9kYXRhWyRuYW1lXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5bCGRGF0YeWxnuaAp++8iOaVsOe7hO+8ieWAvOW6j+WIl+WMli4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnuW6j+WIl+WMlueahOWAvA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTZXJpYWxpemUoKQ0KICAgIHsNCiAgICAgICAgaWYgKGNvdW50KCR0aGlzLT5wX2RhdGEpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiAnJzsNCiAgICAgICAgfQ0KDQogICAgICAgICRkYXRhID0gJHRoaXMtPnBfZGF0YTsNCiAgICAgICAgZm9yZWFjaCAoJGRhdGEgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgIGlmIChpc19zdHJpbmcoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICRkYXRhWyRrZXldID0gc2VsZjo6UmVwbGFjZUhvc3QyVGFnKCR2YWx1ZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvL3JldHVybiBqc29uX2VuY29kZSgkZGF0YSk7DQogICAgICAgIHJldHVybiBzZXJpYWxpemUoJGRhdGEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWwhuW6j+WIl+WMlueahOWAvOWPjeW6j+WIl+WMluWQjui1i+S6iERhdGHlsZ7mgKflgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHMg5bqP5YiX5YyW5YC8DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVW5zZXJpYWxpemUoJHMpDQogICAgew0KICAgICAgICBpZiAoJHMgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vaWYoc3RycG9zKCRzLCd7Jyk9PT0wKXsNCiAgICAgICAgLy8kdGhpcy0+cF9kYXRhPWpzb25fZGVjb2RlKCRzLHRydWUpOw0KICAgICAgICAvL31lbHNlew0KICAgICAgICBAJHRoaXMtPnBfZGF0YSA9IHVuc2VyaWFsaXplKCRzKTsNCiAgICAgICAgLy99DQogICAgICAgIGlmIChpc19hcnJheSgkdGhpcy0+cF9kYXRhKSkgew0KICAgICAgICAgICAgaWYgKGNvdW50KCR0aGlzLT5wX2RhdGEpID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnBfZGF0YSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgIGlmIChpc19zdHJpbmcoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cF9kYXRhWyRrZXldID0gc2VsZjo6UmVwbGFjZVRhZzJIb3N0KCR2YWx1ZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHRoaXMtPnBfZGF0YSA9IGFycmF5KCk7DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\pagebar.php' crc32='F809FAA4'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiDliIbpobXmnaHnoIENCiAqLw0KY2xhc3MgUGFnZUJhcg0Kew0KDQogICAgLyoqDQogICAgICogQHZhciBpbnR8bnVsbCDlhoXlrrnmgLvmlbAo5pS55Li6QWxsQ291bnQpDQogICAgICovDQogICAgcHVibGljICRDb3VudCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludHxudWxsIOWGheWuueaAu+aVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkQWxsQ291bnQgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5b2T5YmN6aG1Q291bnTmlbDph48NCiAgICAgKi8NCiAgICBwdWJsaWMgJEN1cnJlbnRDb3VudCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCBQYWdlYmFy6ZW/5bqm5pWw6YePDQogICAgICovDQogICAgcHVibGljICRQYWdlQmFyQ291bnQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5q+P6aG15pWw6YeP77yI5pS55Li6UGVyUGFnZUNvdW5077yJDQogICAgICovDQogICAgcHVibGljICRQYWdlQ291bnQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5q+P6aG15pWw6YePDQogICAgICovDQogICAgcHVibGljICRQZXJQYWdlQ291bnQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5oC76aG15pWwDQogICAgICovDQogICAgcHVibGljICRQYWdlQWxsID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOW9k+WJjemhtSjmlLnkuLpQYWdlQ3VycmVudCkNCiAgICAgKi8NCiAgICBwdWJsaWMgJFBhZ2VOb3cgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg5b2T5YmN6aG1DQogICAgICovDQogICAgcHVibGljICRQYWdlQ3VycmVudCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCDotbflp4vpobUNCiAgICAgKi8NCiAgICBwdWJsaWMgJFBhZ2VGaXJzdCA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCDmnIDlkI7pobUNCiAgICAgKi8NCiAgICBwdWJsaWMgJFBhZ2VMYXN0ID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOS4iuS4gOmhtQ0KICAgICAqLw0KICAgIHB1YmxpYyAkUGFnZVByZXZpb3VzID0gMDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOS4i+S4gOmhtQ0KICAgICAqLw0KICAgIHB1YmxpYyAkUGFnZU5leHQgPSAwOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsfFVybFJ1bGUNCiAgICAgKi8NCiAgICBwdWJsaWMgJFVybFJ1bGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyAkYnV0dG9ucyA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHByZXZidXR0b24gPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsDQogICAgICovDQogICAgcHVibGljICRuZXh0YnV0dG9uID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgJEJ1dHRvbnMgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBudWxsDQogICAgICovDQogICAgcHVibGljICRQcmV2QnV0dG9uID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgbnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyAkTmV4dEJ1dHRvbiA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGJvb2xlYW4g5piv5ZCm5YWo6YOo6L6T5Ye65Li65bim6ZO+5o6l55qEYnV0dG9uDQogICAgICovDQogICAgcHVibGljICRpc0Z1bGxMaW5rID0gZmFsc2U7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHVybA0KICAgICAqIEBwYXJhbSBib29sICRub191c2UNCiAgICAgKiBAcGFyYW0gYm9vbCAkdXNlQWJicg0KICAgICAqIEBwYXJhbSBib29sICRmb3JjZURpc3BsYXlGaXJzdFBhZ2UgPSBmYWxzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkdXJscnVsZSwgJG5vX3VzZSA9IHRydWUsICR1c2VBYmJyID0gZmFsc2UsICRmb3JjZURpc3BsYXlGaXJzdFBhZ2UgPSBmYWxzZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5VcmxSdWxlID0gbmV3IFVybFJ1bGUoJHVybHJ1bGUpOw0KICAgICAgICAvLyRub191c2Ug5Y+C5pWw5bey6KKr5bqf5byD5LqGDQogICAgICAgICR0aGlzLT5VcmxSdWxlLT51c2VBYmJyID0gJHVzZUFiYnI7DQogICAgICAgICR0aGlzLT5VcmxSdWxlLT5mb3JjZURpc3BsYXlGaXJzdFBhZ2UgPSAkZm9yY2VEaXNwbGF5Rmlyc3RQYWdlOw0KICAgICAgICAkdGhpcy0+QnV0dG9ucyA9ICYkdGhpcy0+YnV0dG9uczsNCiAgICAgICAgJHRoaXMtPlByZXZCdXR0b24gPSAmJHRoaXMtPnByZXZidXR0b247DQogICAgICAgICR0aGlzLT5OZXh0QnV0dG9uID0gJiR0aGlzLT5uZXh0YnV0dG9uOw0KICAgICAgICAkdGhpcy0+UGVyUGFnZUNvdW50ID0gJiR0aGlzLT5QYWdlQ291bnQ7DQogICAgICAgICR0aGlzLT5BbGxDb3VudCA9ICYkdGhpcy0+Q291bnQ7DQogICAgICAgICR0aGlzLT5QYWdlQ3VycmVudCA9ICYkdGhpcy0+UGFnZU5vdzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmnoTpgKDliIbpobXmnaENCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTWFrZSgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKCR0aGlzLT5QYWdlQ291bnQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuICcnOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPlBhZ2VBbGwgPSBjZWlsKCR0aGlzLT5Db3VudCAvICR0aGlzLT5QYWdlQ291bnQpOw0KICAgICAgICAkdGhpcy0+UGFnZUZpcnN0ID0gMTsNCiAgICAgICAgJHRoaXMtPlBhZ2VMYXN0ID0gJHRoaXMtPlBhZ2VBbGw7DQoNCiAgICAgICAgJHRoaXMtPlBhZ2VQcmV2aW91cyA9ICgkdGhpcy0+UGFnZU5vdyAtIDEpOw0KICAgICAgICBpZiAoJHRoaXMtPlBhZ2VQcmV2aW91cyA8IDEpIHsNCiAgICAgICAgICAgICR0aGlzLT5QYWdlUHJldmlvdXMgPSAxOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPlBhZ2VOZXh0ID0gKCR0aGlzLT5QYWdlTm93ICsgMSk7DQogICAgICAgIGlmICgkdGhpcy0+UGFnZU5leHQgPiAkdGhpcy0+UGFnZUFsbCkgew0KICAgICAgICAgICAgJHRoaXMtPlBhZ2VOZXh0ID0gJHRoaXMtPlBhZ2VBbGw7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+VXJsUnVsZS0+UnVsZXNbJ3slcGFnZSV9J10gPSAkdGhpcy0+UGFnZUZpcnN0Ow0KICAgICAgICAkdGhpcy0+YnV0dG9uc1tAJHpicC0+bGFuZ3MtPm1zZy0+Zmlyc3RfYnV0dG9uXSA9ICR0aGlzLT5VcmxSdWxlLT5NYWtlKCk7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5QYWdlTm93ICE9ICR0aGlzLT5QYWdlRmlyc3QpIHsNCiAgICAgICAgICAgICR0aGlzLT5VcmxSdWxlLT5SdWxlc1sneyVwYWdlJX0nXSA9ICR0aGlzLT5QYWdlUHJldmlvdXM7DQogICAgICAgICAgICAkdGhpcy0+YnV0dG9uc1tAJHpicC0+bGFuZ3MtPm1zZy0+cHJldl9idXR0b25dID0gJHRoaXMtPlVybFJ1bGUtPk1ha2UoKTsNCiAgICAgICAgICAgICR0aGlzLT5wcmV2YnV0dG9uID0gJHRoaXMtPmJ1dHRvbnNbQCR6YnAtPmxhbmdzLT5tc2ctPnByZXZfYnV0dG9uXTsNCiAgICAgICAgfQ0KDQogICAgICAgICRwYWdlQWxsID0gKCR0aGlzLT5QYWdlQWxsICsgMSk7DQogICAgICAgICRtaWRkbGUgPSBjZWlsKCR0aGlzLT5QYWdlQmFyQ291bnQgLyAyKTsNCiAgICAgICAgJHN0YXJ0ID0gMTsNCiAgICAgICAgaWYgKCR0aGlzLT5QYWdlTm93ID4gJG1pZGRsZSkgew0KICAgICAgICAgICAgJHN0YXJ0ID0gKCR0aGlzLT5QYWdlTm93IC0gJG1pZGRsZSArIDEpOw0KICAgICAgICB9DQogICAgICAgIGlmICgkcGFnZUFsbCA+ICR0aGlzLT5QYWdlQmFyQ291bnQgJiYgKCRwYWdlQWxsIC0gJHN0YXJ0KSA8ICR0aGlzLT5QYWdlQmFyQ291bnQpIHsNCiAgICAgICAgICAgICRzdGFydCA9ICgkcGFnZUFsbCAtICR0aGlzLT5QYWdlQmFyQ291bnQpOw0KICAgICAgICB9DQogICAgICAgICRlbmQgPSAoJHN0YXJ0ICsgJHRoaXMtPlBhZ2VCYXJDb3VudCk7DQogICAgICAgIGlmICgkZW5kID4gJHBhZ2VBbGwpIHsNCiAgICAgICAgICAgICRlbmQgPSAkcGFnZUFsbDsNCiAgICAgICAgfQ0KDQogICAgICAgICRqID0gdHJpbShAJHpicC0+bGFuZ3MtPm1zZy0+bnVtZXJhbF9idXR0b24pOw0KICAgICAgICAkaiA9ICgkaiA9PSAnJykgPyAnJW51bSUnIDogJGo7DQogICAgICAgIGZvciAoJGkgPSAkc3RhcnQ7ICRpIDwgJGVuZDsgJGkrKykgew0KICAgICAgICAgICAgJHRoaXMtPlVybFJ1bGUtPlJ1bGVzWyd7JXBhZ2UlfSddID0gJGk7DQogICAgICAgICAgICAkdGhpcy0+YnV0dG9uc1tzdHJfaXJlcGxhY2UoJyVudW0lJywgJGksICRqKV0gPSAkdGhpcy0+VXJsUnVsZS0+TWFrZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR0aGlzLT5QYWdlTm93ICE9ICR0aGlzLT5QYWdlTmV4dCkgew0KICAgICAgICAgICAgJHRoaXMtPlVybFJ1bGUtPlJ1bGVzWyd7JXBhZ2UlfSddID0gJHRoaXMtPlBhZ2VOZXh0Ow0KICAgICAgICAgICAgJHRoaXMtPmJ1dHRvbnNbQCR6YnAtPmxhbmdzLT5tc2ctPm5leHRfYnV0dG9uXSA9ICR0aGlzLT5VcmxSdWxlLT5NYWtlKCk7DQogICAgICAgICAgICAkdGhpcy0+bmV4dGJ1dHRvbiA9ICR0aGlzLT5idXR0b25zW0AkemJwLT5sYW5ncy0+bXNnLT5uZXh0X2J1dHRvbl07DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+VXJsUnVsZS0+UnVsZXNbJ3slcGFnZSV9J10gPSAkdGhpcy0+UGFnZUxhc3Q7DQogICAgICAgICR0aGlzLT5idXR0b25zW0AkemJwLT5sYW5ncy0+bXNnLT5sYXN0X2J1dHRvbl0gPSAkdGhpcy0+VXJsUnVsZS0+TWFrZSgpOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\tag.php' crc32='E71E654D'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIFRhZ+exuy4NCiAqDQogKiBAcHJvcGVydHkgc3RyaW5nIFRlbXBsYXRlDQogKiBAcHJvcGVydHkgc3RyaW5nIE5hbWUNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgSUQNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgQWxpYXMNCiAqIEBwcm9wZXJ0eSBzdHJpbmcgVXJsDQogKiBAcHJvcGVydHkgaW50fHN0cmluZyBDb3VudCDmlofnq6DmlbDph48NCiAqLw0KY2xhc3MgVGFnIGV4dGVuZHMgQmFzZQ0Kew0KDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCR6YnAtPnRhYmxlWydUYWcnXSwgJHpicC0+ZGF0YWluZm9bJ1RhZyddLCBfX0NMQVNTX18pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkbWV0aG9kDQogICAgICogQHBhcmFtICRhcmdzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY2FsbCgkbWV0aG9kLCAkYXJncykNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19DYWxsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzLCAkbWV0aG9kLCAkYXJncyk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHBhcmFtICR2YWx1ZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQogICAgICAgIGlmIChpbl9hcnJheSgkbmFtZSwgYXJyYXkoJ1VybCcsICdBbGlhc0ZpcnN0JykpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdUZW1wbGF0ZScpIHsNCiAgICAgICAgICAgIGlmICgkdmFsdWUgPT0gJHpicC0+b3B0aW9uWydaQ19JTkRFWF9ERUZBVUxUX1RFTVBMQVRFJ10pIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSAnJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5kYXRhWyRuYW1lXSA9ICR2YWx1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19TZXQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMsICRuYW1lLCAkdmFsdWUpOw0KICAgICAgICB9DQogICAgICAgIHBhcmVudDo6X19zZXQoJG5hbWUsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkfHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2dldCgkbmFtZSkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1VybCcpIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19VcmwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCR0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGJhY2tBdHRyID0gJHpicC0+b3B0aW9uWydaQ19BTElBU19CQUNLX0FUVFInXTsNCiAgICAgICAgICAgICRyb3V0ZXMgPSAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ3JvdXRlcycpOw0KICAgICAgICAgICAgaWYgKGlzc2V0KCRyb3V0ZXNbJ3Bvc3RfJyAuICR6YnAtPkdldFBvc3RUeXBlKCR0aGlzLT5UeXBlLCAnbmFtZScpIC4gJ19saXN0X3RhZyddKSkgew0KICAgICAgICAgICAgICAgICR1ID0gbmV3IFVybFJ1bGUoJHpicC0+R2V0Um91dGUoJHJvdXRlc1sncG9zdF8nIC4gJHpicC0+R2V0UG9zdFR5cGUoJHRoaXMtPlR5cGUsICduYW1lJykgLiAnX2xpc3RfdGFnJ10pKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJHUgPSBuZXcgVXJsUnVsZSgkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ2xpc3RfdGFnX3VybHJ1bGUnKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkdS0+UnVsZXNPYmplY3QgPSAmJHRoaXM7DQogICAgICAgICAgICAkdS0+UnVsZXNbJ3slaWQlfSddID0gJHRoaXMtPklEOw0KICAgICAgICAgICAgJHUtPlJ1bGVzWyd7JWFsaWFzJX0nXSA9IHJhd3VybGVuY29kZV93aXRob3V0X2JhY2tzbGFzaCgkdGhpcy0+QWxpYXMgPT0gJycgPyAkdGhpcy0+JGJhY2tBdHRyIDogJHRoaXMtPkFsaWFzKTsNCg0KICAgICAgICAgICAgcmV0dXJuICR1LT5NYWtlKCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRuYW1lID09ICdUZW1wbGF0ZScpIHsNCiAgICAgICAgICAgICR2YWx1ZSA9ICR0aGlzLT5kYXRhWyRuYW1lXTsNCiAgICAgICAgICAgIGlmICgkdmFsdWUgPT0gJycpIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ3RhZ190ZW1wbGF0ZScpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gJHZhbHVlOw0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnQWxpYXNGaXJzdCcpIHsNCiAgICAgICAgICAgIGlmICgkdGhpcy0+QWxpYXMpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPkFsaWFzOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPk5hbWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fVGFnX0dldCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkdGhpcywgJG5hbWUpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwYXJlbnQ6Ol9fZ2V0KCRuYW1lKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2F2ZSgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKCR0aGlzLT5UZW1wbGF0ZSA9PSAkemJwLT5HZXRQb3N0VHlwZSgkdGhpcy0+VHlwZSwgJ3RhZ190ZW1wbGF0ZScpKSB7DQogICAgICAgICAgICAkdGhpcy0+ZGF0YVsnVGVtcGxhdGUnXSA9ICcnOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fVGFnX1NhdmUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwYXJlbnQ6OlNhdmUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsKCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KDQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1RhZ19EZWwnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICR6YnAtPlJlbW92ZUNhY2hlKCR0aGlzKTsNCg0KICAgICAgICByZXR1cm4gcGFyZW50OjpEZWwoKTsNCiAgICB9DQoNCn0NCg==</file>
	<file name='zb_system\function\lib\urlrule.php' crc32='4CAED5C1'></file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='53B33C2D'></file>
	<file name='zb_system\function\lib\database\interface.php' crc32='3172844F'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KDQovKioNCiAqIEludGVyZmFjZSBEYXRhYmFzZV9fSW50ZXJmYWNlLg0KICoNCiAqIEBwcm9wZXJ0eSBzdHJpbmd8bnVsbCAkZGJwcmUg5pWw5o2u5bqT5ZCN5YmN57yAKERhdGFiYXNlIFByZWZpeCkNCiAqIEBwcm9wZXJ0eSBtaXhlZCAkZGIg5pWw5o2u5bqT6L+e5o6lDQogKiBAcHJvcGVydHkgc3RyaW5nfG51bGwgJGRibmFtZSDmlbDmja7lupPlkI0NCiAqIEBwcm9wZXJ0eSBzdHJpbmd8bnVsbCAkdHlwZSDmlbDmja7lupPnsbvlnosNCiAqIEBwcm9wZXJ0eSBzdHJpbmd8bnVsbCAkZGJlbmdpbmUg5pWw5o2u5bqT5byV5pOODQogKiBAcHJvcGVydHkgRGJTcWx8bnVsbCAkc3FsIERiU3Fs5a6e5L6LDQogKiBAcHJvcGVydHkgc3RyaW5nICR2ZXJzaW9uIOaVsOaNruW6k+eJiOacrA0KICovDQppbnRlcmZhY2UgRGF0YWJhc2VfX0ludGVyZmFjZQ0Kew0KDQogICAgcHVibGljIGZ1bmN0aW9uIE9wZW4oJGFycmF5KTsNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBDbG9zZSgpOw0KDQogICAgcHVibGljIGZ1bmN0aW9uIFF1ZXJ5KCRxdWVyeSk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gSW5zZXJ0KCRxdWVyeSk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gVXBkYXRlKCRxdWVyeSk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsZXRlKCRxdWVyeSk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnlNdWx0aSgkcyk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gRXNjYXBlU3RyaW5nKCRzKTsNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBDcmVhdGVUYWJsZSgkdGFibGUsICRkYXRhSW5mbyk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsVGFibGUoJHRhYmxlKTsNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBFeGlzdFRhYmxlKCR0YWJsZSk7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gVHJhbnNhY3Rpb24oJGNvbW1hbmQpOy8vY29tbWFuZCA9ICdiZWdpbicsJ2NvbW1pdCcsJ3JvbGxiYWNrJw0KDQogICAgcHVibGljIGZ1bmN0aW9uIEV4aXN0Q29sdW1uKCR0YWJsZSwgJGZpZWxkKTsNCg0KfQ0K</file>
	<file name='zb_system\function\lib\database\mysql.php' crc32='DFA9E583'></file>
	<file name='zb_system\function\lib\database\mysqli.php' crc32='D9E0610B'></file>
	<file name='zb_system\function\lib\database\pdo_mysql.php' crc32='38E7E889'></file>
	<file name='zb_system\function\lib\database\pdo_postgresql.php' crc32='FFCB9196'></file>
	<file name='zb_system\function\lib\database\pdo_sqlite.php' crc32='2F96F4D9'></file>
	<file name='zb_system\function\lib\database\postgresql.php' crc32='71C69481'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBQZ1NRTOaVsOaNruW6k+aTjeS9nOexuy4NCiAqLw0KY2xhc3MgRGF0YWJhc2VfX1Bvc3RncmVTUUwgaW1wbGVtZW50cyBEYXRhYmFzZV9fSW50ZXJmYWNlDQp7DQoNCiAgICBwdWJsaWMgJHR5cGUgPSAncG9zdGdyZXNxbCc7DQoNCiAgICBwdWJsaWMgJHZlcnNpb24gPSAnJzsNCg0KICAgIHB1YmxpYyAkZXJyb3IgPSBhcnJheSgpOw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmd8bnVsbCDmlbDmja7lupPlkI3liY3nvIANCiAgICAgKi8NCiAgICBwdWJsaWMgJGRicHJlID0gbnVsbDsNCg0KICAgIHByaXZhdGUgJGRiID0gbnVsbDsgLy/mlbDmja7lupPov57mjqUNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nfG51bGwg5pWw5o2u5bqT5ZCNDQogICAgICovDQogICAgcHVibGljICRkYm5hbWUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBEYlNxbHxudWxsIERiU3Fs5a6e5L6LDQogICAgICovDQogICAgcHVibGljICRzcWwgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciDlrZfnrKbpm4YNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNoYXJzZXQgPSAndXRmOCc7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIOWtl+espuaOkuW6jw0KICAgICAqLw0KICAgIHB1YmxpYyAkY29sbGF0ZSA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiDmnoTpgKDlh73mlbDvvIzlrp7kvovljJYkc3Fs5Y+C5pWwLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpDQogICAgew0KICAgICAgICAkdGhpcy0+c3FsID0gbmV3IERiU3FsKCR0aGlzKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlr7nlrZfnrKbkuLLov5vooYzovazkuYnvvIzlnKjmjIflrprnmoTlrZfnrKbliY3mt7vliqDlj43mlpzmnaDvvIzljbPmiafooYxhZGRzbGFzaGVz5Ye95pWwLg0KICAgICAqDQogICAgICogQHVzZSBhZGRzbGFzaGVzDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFc2NhcGVTdHJpbmcoJHMpDQogICAgew0KICAgICAgICByZXR1cm4gcGdfZXNjYXBlX3N0cmluZygkcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L+e5o6l5pWw5o2u5bqTLg0KICAgICAqDQogICAgICogQHBhcmFtIGFycmF5ICRhcnJheSDmlbDmja7lupPov57mjqXphY3nva4NCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICRhcnJheT1hcnJheSgNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICdwZ3NxbF9zZXJ2ZXInLA0KICAgICAqICAgICAgICAgICAgICAgICAgICAgJ3Bnc3FsX3VzZXJuYW1lJywNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICdwZ3NxbF9wYXNzd29yZCcsDQogICAgICogICAgICAgICAgICAgICAgICAgICAncGdzcWxfbmFtZScsDQogICAgICogICAgICAgICAgICAgICAgICAgICAncGdzcWxfcHJlJywNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICdwZ3NxbF9wb3J0JywNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICdwZXJzaXN0ZW50JykNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBPcGVuKCRhcnJheSkNCiAgICB7DQogICAgICAgICRhcnJheVszXSA9IHN0cnRvbG93ZXIoJGFycmF5WzNdKTsNCiAgICAgICAgJHMgPSAiaG9zdD17JGFycmF5WzBdfSBwb3J0PXskYXJyYXlbNV19IGRibmFtZT17JGFycmF5WzNdfSB1c2VyPXskYXJyYXlbMV19IHBhc3N3b3JkPXskYXJyYXlbMl19IG9wdGlvbnM9Jy0tY2xpZW50X2VuY29kaW5nPVVURjgnIjsNCiAgICAgICAgaWYgKGZhbHNlID09ICRhcnJheVs1XSkgew0KICAgICAgICAgICAgJGRiX2xpbmsgPSBwZ19jb25uZWN0KCRzKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRkYl9saW5rID0gcGdfcGNvbm5lY3QoJHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCEkZGJfbGluaykgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHRoaXMtPmRiID0gJGRiX2xpbms7DQogICAgICAgICAgICAkdGhpcy0+ZGJwcmUgPSAkYXJyYXlbNF07DQogICAgICAgICAgICAkdGhpcy0+ZGJuYW1lID0gJGFycmF5WzNdOw0KICAgICAgICAgICAgJHYgPSBwZ192ZXJzaW9uKCRkYl9saW5rKTsNCiAgICAgICAgICAgIGlmIChpc3NldCgkdlsnY2xpZW50J10pKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPnZlcnNpb24gPSAkdlsnY2xpZW50J107DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoaXNzZXQoJHZbJ3NlcnZlciddKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT52ZXJzaW9uID0gJHZbJ3NlcnZlciddOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGRicGdzcWxfc2VydmVyDQogICAgICogQHBhcmFtIHN0cmluZyAkZGJwZ3NxbF9wb3J0DQogICAgICogQHBhcmFtIHN0cmluZyAkZGJwZ3NxbF91c2VybmFtZQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGRicGdzcWxfcGFzc3dvcmQNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRkYnBnc3FsX25hbWUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ3JlYXRlREIoJGRicGdzcWxfc2VydmVyLCAkZGJwZ3NxbF9wb3J0LCAkZGJwZ3NxbF91c2VybmFtZSwgJGRicGdzcWxfcGFzc3dvcmQsICRkYnBnc3FsX25hbWUpDQogICAgew0KICAgICAgICAkZGJwZ3NxbF9uYW1lID0gc3RydG9sb3dlcigkZGJwZ3NxbF9uYW1lKTsNCiAgICAgICAgJHMgPSAiaG9zdD17JGRicGdzcWxfc2VydmVyfSBwb3J0PXskZGJwZ3NxbF9wb3J0fSB1c2VyPXskZGJwZ3NxbF91c2VybmFtZX0gcGFzc3dvcmQ9eyRkYnBnc3FsX3Bhc3N3b3JkfSBvcHRpb25zPSctLWNsaWVudF9lbmNvZGluZz1VVEY4JyI7DQogICAgICAgICR0aGlzLT5kYiA9IHBnX2Nvbm5lY3QoJHMpOw0KICAgICAgICAkdGhpcy0+ZGJuYW1lID0gJGRicGdzcWxfbmFtZTsNCg0KICAgICAgICAkciA9IEBwZ19xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcignQ1JFQVRFIERBVEFCQVNFICcgLiAkZGJwZ3NxbF9uYW1lKSk7DQogICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5YWz6Zet5pWw5o2u5bqT6L+e5o6lLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDbG9zZSgpDQogICAgew0KICAgICAgICBpZiAoaXNfcmVzb3VyY2UoJHRoaXMtPmRiKSkgew0KICAgICAgICAgICAgcGdfY2xvc2UoJHRoaXMtPmRiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaJp+ihjOWkmuihjFNRTOivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHMg5LulO+WPt+WIhumalOeahOWkmuadoVNRTOivreWPpQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBRdWVyeU11bGl0KCRzKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5RdWVyeU11bHRpKCRzKTsNCiAgICB9DQoNCiAgICAvL+mUmeWIq+Wtl+WHveaVsO+8jOWOhuWPsuWOn+WboOS/neeVmeS4i+adpQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIFF1ZXJ5TXVsdGkoJHMpDQogICAgew0KICAgICAgICAvLyRhPWV4cGxvZGUoJzsnLHN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwkcykpOw0KICAgICAgICAkYSA9IGV4cGxvZGUoJzsnLCAkcyk7DQogICAgICAgIGZvcmVhY2ggKCRhIGFzICRzKSB7DQogICAgICAgICAgICAkcyA9IHRyaW0oJHMpOw0KICAgICAgICAgICAgaWYgKCRzICE9ICcnKSB7DQogICAgICAgICAgICAgICAgJHIgPSBwZ19xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcykpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaJp+ihjFNRTOafpeivouivreWPpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGFycmF5IOi/lOWbnuaVsOaNruaVsOe7hA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBRdWVyeSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgICRyZXN1bHRzID0gQHBnX3F1ZXJ5KCR0aGlzLT5kYiwgJHRoaXMtPnNxbC0+RmlsdGVyKCRxdWVyeSkpOw0KICAgICAgICBpZiAoaXNfcmVzb3VyY2UoJHJlc3VsdHMpKSB7DQogICAgICAgICAgICAkc3QgPSBwZ19yZXN1bHRfc3RhdHVzKCRyZXN1bHRzKTsNCiAgICAgICAgICAgIGlmICgkc3QgPT0gUEdTUUxfQkFEX1JFU1BPTlNFIHx8ICRzdCA9PSBQR1NRTF9OT05GQVRBTF9FUlJPUiB8fCAkc3QgPT0gUEdTUUxfRkFUQUxfRVJST1IpIHsNCiAgICAgICAgICAgICAgICB0cmlnZ2VyX2Vycm9yKHBnX3Jlc3VsdF9lcnJvcigkcmVzdWx0cyksIEVfVVNFUl9OT1RJQ0UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdHJpZ2dlcl9lcnJvcihwZ19sYXN0X2Vycm9yKCR0aGlzLT5kYiksIEVfVVNFUl9OT1RJQ0UpOw0KICAgICAgICB9DQogICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgJGRhdGEgPSBhcnJheSgpOw0KICAgICAgICBpZiAoaXNfcmVzb3VyY2UoJHJlc3VsdHMpKSB7DQogICAgICAgICAgICB3aGlsZSAoJHJvdyA9IHBnX2ZldGNoX2Fzc29jKCRyZXN1bHRzKSkgew0KICAgICAgICAgICAgICAgICRkYXRhW10gPSAkcm93Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJGRhdGFbXSA9ICRyZXN1bHRzOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRkYXRhOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOabtOaWsOaVsOaNri4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHF1ZXJ5IFNRTOivreWPpQ0KICAgICAqDQogICAgICogQHJldHVybiByZXNvdXJjZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBVcGRhdGUoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAkciA9IHBnX3F1ZXJ5KCR0aGlzLT5kYiwgJHRoaXMtPnNxbC0+RmlsdGVyKCRxdWVyeSkpOw0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgIHJldHVybiAkcjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKDpmaTmlbDmja4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRxdWVyeSBTUUzor63lj6UNCiAgICAgKg0KICAgICAqIEByZXR1cm4gcmVzb3VyY2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsZXRlKCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgJHIgPSBwZ19xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICByZXR1cm4gJHI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5o+S5YWl5pWw5o2uLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkcXVlcnkgU1FM6K+t5Y+lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludCDov5Tlm55JROW6j+WIl+WPtw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbnNlcnQoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICBwZ19xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICAkc2VxID0gZXhwbG9kZSgnICcsICRxdWVyeSk7DQogICAgICAgICRzZXEgPSAkc2VxWzNdOw0KICAgICAgICAkc2VxID0gdHJpbSgkc2VxKTsNCiAgICAgICAgLy8kc2VxID0gJ3NlbGVjdCBsYXN0dmFsKCk7JzsNCiAgICAgICAgJHNlcSA9ICJzZWxlY3QgY3VycnZhbCgneyRzZXF9X3NlcSc6OnJlZ2NsYXNzKSI7DQoNCiAgICAgICAgJHIgPSBwZ19xdWVyeSgkdGhpcy0+ZGIsICRzZXEpOw0KICAgICAgICAkaWQgPSBwZ19mZXRjaF9yZXN1bHQoJHIsIDAsIDApOw0KDQogICAgICAgIHJldHVybiAoaW50KSAkaWQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5paw5bu66KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdGFibGVuYW1lIOihqOWQjQ0KICAgICAqIEBwYXJhbSBhcnJheSAgJGRhdGFpbmZvICDooajnu5PmnoQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8sICRlbmdpbmUgPSBudWxsLCAkY2hhcnNldCA9IG51bGwsICRjb2xsYXRlID0gbnVsbCkNCiAgICB7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkNyZWF0ZVRhYmxlKCR0YWJsZSwgJGRhdGFpbmZvKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yig6Zmk6KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdGFibGUg6KGo5ZCNDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbFRhYmxlKCR0YWJsZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkRlbFRhYmxlKCR0YWJsZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIpOaWreaVsOaNruihqOaYr+WQpuWtmOWcqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlIOihqOWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEV4aXN0VGFibGUoJHRhYmxlKQ0KICAgIHsNCiAgICAgICAgJGEgPSAkdGhpcy0+UXVlcnkoJHRoaXMtPnNxbC0+RXhpc3RUYWJsZSgkdGFibGUsICR0aGlzLT5kYm5hbWUpKTsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRiID0gY3VycmVudCgkYSk7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGIpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkYyA9IChpbnQpIGN1cnJlbnQoJGIpOw0KICAgICAgICBpZiAoJGMgPiAwKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgZnVuY3Rpb24gTG9nc0Vycm9yKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5lcnJvcltdID0gYXJyYXkoUEdTUUxfQkFEX1JFU1BPTlNFLCBwZ19sYXN0X2Vycm9yKCR0aGlzLT5kYikpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS6i+WKoeWkhOeQhg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkcXVlcnkg5oyH5LukDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVHJhbnNhY3Rpb24oJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5RdWVyeSgkdGhpcy0+c3FsLT5UcmFuc2FjdGlvbigkcXVlcnkpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliKTmlq3mlbDmja7ooajnmoTlrZfmrrXmmK/lkKblrZjlnKguDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0YWJsZSDooajlkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRmaWVsZCDlrZfmrrXlkI0NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFeGlzdENvbHVtbigkdGFibGUsICRmaWVsZCkNCiAgICB7DQogICAgICAgICRyID0gbnVsbDsNCiAgICAgICAgJHRhYmxlID0gc3RydG9sb3dlcigkdGFibGUpOw0KICAgICAgICAkZmllbGQgPSBzdHJ0b2xvd2VyKCRmaWVsZCk7DQogICAgICAgIFpCbG9nRXhjZXB0aW9uOjpTdXNwZW5kRXJyb3JIb29rKCk7DQogICAgICAgICRzID0gIlNFTEVDVCAqIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgV0hFUkUgdGFibGVfc2NoZW1hID0gJ3B1YmxpYycgQU5EIHRhYmxlX25hbWUgPSAnJHRhYmxlJyBBTkQgY29sdW1uX25hbWUgPSAnJGZpZWxkJyI7DQogICAgICAgICRyID0gQCR0aGlzLT5RdWVyeSgkcyk7DQogICAgICAgIFpCbG9nRXhjZXB0aW9uOjpSZXN1bWVFcnJvckhvb2soKTsNCiAgICAgICAgaWYgKGlzX2FycmF5KCRyKSAmJiBjb3VudCgkcikgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\database\sqlite.php' crc32='63DD7C8A'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBTUUxpdGUy5pWw5o2u5bqT5pON5L2c57G7Lg0KICovDQpjbGFzcyBEYXRhYmFzZV9fU1FMaXRlIGltcGxlbWVudHMgRGF0YWJhc2VfX0ludGVyZmFjZQ0Kew0KDQogICAgcHVibGljICR0eXBlID0gJ3NxbGl0ZSc7DQoNCiAgICBwdWJsaWMgJHZlcnNpb24gPSAnMic7DQoNCiAgICBwdWJsaWMgJGVycm9yID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nfG51bGwg5pWw5o2u5bqT5ZCN5YmN57yADQogICAgICovDQogICAgcHVibGljICRkYnByZSA9IG51bGw7DQoNCiAgICBwcml2YXRlICRkYiA9IG51bGw7IC8v5pWw5o2u5bqT6L+e5o6l5a6e5L6LDQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZ3xudWxsIOaVsOaNruW6k+WQjQ0KICAgICAqLw0KICAgIHB1YmxpYyAkZGJuYW1lID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgRGJTcWx8bnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyAkc3FsID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIg5a2X56ym6ZuGDQogICAgICovDQogICAgcHVibGljICRjaGFyc2V0ID0gJ3V0ZjgnOw0KDQogICAgLyoqDQogICAgICogQHZhciDlrZfnrKbmjpLluo8NCiAgICAgKi8NCiAgICBwdWJsaWMgJGNvbGxhdGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICog5p6E6YCg5Ye95pWw77yM5a6e5L6L5YyWJHNxbOWPguaVsC4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnNxbCA9IG5ldyBEYlNxbCgkdGhpcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFc2NhcGVTdHJpbmcoJHMpDQogICAgew0KICAgICAgICByZXR1cm4gc3FsaXRlX2VzY2FwZV9zdHJpbmcoJHMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkYXJyYXkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBPcGVuKCRhcnJheSkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+ZGIgPSBzcWxpdGVfb3BlbigkYXJyYXlbMF0sIDA2NjYsICRzcWxpdGVlcnJvcikpIHsNCiAgICAgICAgICAgICR0aGlzLT5kYnByZSA9ICRhcnJheVsxXTsNCiAgICAgICAgICAgICR0aGlzLT5kYm5hbWUgPSAkYXJyYXlbMF07DQogICAgICAgICAgICAkdGhpcy0+dmVyc2lvbiA9IHNxbGl0ZV9saWJ2ZXJzaW9uKCk7DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5YWz6Zet5pWw5o2u5bqT6L+e5o6lLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDbG9zZSgpDQogICAgew0KICAgICAgICBzcWxpdGVfY2xvc2UoJHRoaXMtPmRiKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHMNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnlNdWxpdCgkcykNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+UXVlcnlNdWx0aSgkcyk7DQogICAgfQ0KDQogICAgLy/plJnliKvlrZflh73mlbDvvIzljoblj7Lljp/lm6Dkv53nlZnkuIvmnaUNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBRdWVyeU11bHRpKCRzKQ0KICAgIHsNCiAgICAgICAgLy8kYT1leHBsb2RlKCc7JyxzdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRzKSk7DQogICAgICAgICRhID0gZXhwbG9kZSgnOycsICRzKTsNCiAgICAgICAgZm9yZWFjaCAoJGEgYXMgJHMpIHsNCiAgICAgICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgICAgICBpZiAoJHMgIT0gJycpIHsNCiAgICAgICAgICAgICAgICBzcWxpdGVfcXVlcnkoJHRoaXMtPmRiLCAkdGhpcy0+c3FsLT5GaWx0ZXIoJHMpKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGFycmF5DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFF1ZXJ5KCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgLy8g6YGN5Y6G5Ye65p2lDQogICAgICAgICRyZXN1bHRzID0gQHNxbGl0ZV9xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJGUgPSBzcWxpdGVfbGFzdF9lcnJvcigkdGhpcy0+ZGIpOw0KICAgICAgICBpZiAoJGUgIT0gMCkgew0KICAgICAgICAgICAgdHJpZ2dlcl9lcnJvcigkZSAuIHNxbGl0ZV9lcnJvcl9zdHJpbmcoJGUpLCBFX1VTRVJfTk9USUNFKTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgICRkYXRhID0gYXJyYXkoKTsNCiAgICAgICAgaWYgKGlzX3Jlc291cmNlKCRyZXN1bHRzKSkgew0KICAgICAgICAgICAgd2hpbGUgKCRyb3cgPSBzcWxpdGVfZmV0Y2hfYXJyYXkoJHJlc3VsdHMpKSB7DQogICAgICAgICAgICAgICAgJGRhdGFbXSA9ICRyb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZGF0YVtdID0gJHJlc3VsdHM7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGRhdGE7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRxdWVyeQ0KICAgICAqDQogICAgICogQHJldHVybiBTUUxpdGVSZXN1bHQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVXBkYXRlKCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgJHIgPSBzcWxpdGVfcXVlcnkoJHRoaXMtPmRiLCAkdGhpcy0+c3FsLT5GaWx0ZXIoJHF1ZXJ5KSk7DQogICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgcmV0dXJuICRyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gU1FMaXRlUmVzdWx0DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbGV0ZSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgICRyID0gc3FsaXRlX3F1ZXJ5KCR0aGlzLT5kYiwgJHRoaXMtPnNxbC0+RmlsdGVyKCRxdWVyeSkpOw0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgIHJldHVybiAkcjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbnNlcnQoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAkdGhpcy0+TG9nc0Vycm9yKCk7DQogICAgICAgIHNxbGl0ZV9xdWVyeSgkdGhpcy0+ZGIsICR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCg0KICAgICAgICByZXR1cm4gc3FsaXRlX2xhc3RfaW5zZXJ0X3Jvd2lkKCR0aGlzLT5kYik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICR0YWJsZQ0KICAgICAqIEBwYXJhbSAkZGF0YWluZm8NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8sICRlbmdpbmUgPSBudWxsLCAkY2hhcnNldCA9IG51bGwsICRjb2xsYXRlID0gbnVsbCkNCiAgICB7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkNyZWF0ZVRhYmxlKCR0YWJsZSwgJGRhdGFpbmZvKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICR0YWJsZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWxUYWJsZSgkdGFibGUpDQogICAgew0KICAgICAgICAkdGhpcy0+UXVlcnlNdWxpdCgkdGhpcy0+c3FsLT5EZWxUYWJsZSgkdGFibGUpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHRhYmxlDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRXhpc3RUYWJsZSgkdGFibGUpDQogICAgew0KICAgICAgICAkYSA9ICR0aGlzLT5RdWVyeSgkdGhpcy0+c3FsLT5FeGlzdFRhYmxlKCR0YWJsZSkpOw0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgJGIgPSBjdXJyZW50KCRhKTsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYikpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRjID0gKGludCkgY3VycmVudCgkYik7DQogICAgICAgIGlmICgkYyA+IDApIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBmdW5jdGlvbiBMb2dzRXJyb3IoKQ0KICAgIHsNCiAgICAgICAgJGUgPSBzcWxpdGVfbGFzdF9lcnJvcigkdGhpcy0+ZGIpOw0KICAgICAgICBpZiAoJGUgIT0gMCkgew0KICAgICAgICAgICAgJHRoaXMtPmVycm9yW10gPSBhcnJheSgkZSwgc3FsaXRlX2Vycm9yX3N0cmluZygkZSkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5LqL5Yqh5aSE55CGDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRxdWVyeSDmjIfku6QNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBUcmFuc2FjdGlvbigkcXVlcnkpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPlF1ZXJ5KCR0aGlzLT5zcWwtPlRyYW5zYWN0aW9uKCRxdWVyeSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIpOaWreaVsOaNruihqOeahOWtl+auteaYr+WQpuWtmOWcqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlIOihqOWQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGZpZWxkIOWtl+auteWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEV4aXN0Q29sdW1uKCR0YWJsZSwgJGZpZWxkKQ0KICAgIHsNCiAgICAgICAgJHIgPSBudWxsOw0KICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6U3VzcGVuZEVycm9ySG9vaygpOw0KICAgICAgICAkciA9IEAkdGhpcy0+UXVlcnkoIlBSQUdNQSB0YWJsZV9pbmZvKFskdGFibGVdKSIpOw0KICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6UmVzdW1lRXJyb3JIb29rKCk7DQogICAgICAgICRyID0gc2VyaWFsaXplKCRyKTsNCiAgICAgICAgaWYgKHN0cmlwb3MoJHIsICciJyAuICRmaWVsZCAuICciJykgIT09IGZhbHNlKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\database\sqlite3.php' crc32='BCEBE614'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBTUUxpdGUz5pWw5o2u5bqT5pON5L2c57G7Lg0KICovDQpjbGFzcyBEYXRhYmFzZV9fU1FMaXRlMyBpbXBsZW1lbnRzIERhdGFiYXNlX19JbnRlcmZhY2UNCnsNCg0KICAgIHB1YmxpYyAkdHlwZSA9ICdzcWxpdGUnOw0KDQogICAgcHVibGljICR2ZXJzaW9uID0gJzMnOw0KDQogICAgcHVibGljICRlcnJvciA9IGFycmF5KCk7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZ3xudWxsIOaVsOaNruW6k+WQjeWJjee8gA0KICAgICAqLw0KICAgIHB1YmxpYyAkZGJwcmUgPSBudWxsOw0KDQogICAgcHJpdmF0ZSAkZGIgPSBudWxsOyAvL+aVsOaNruW6k+i/nuaOpeWunuS+iw0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmd8bnVsbCDmlbDmja7lupPlkI0NCiAgICAgKi8NCiAgICBwdWJsaWMgJGRibmFtZSA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIERiU3FsfG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHNxbCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIOWtl+espumbhg0KICAgICAqLw0KICAgIHB1YmxpYyAkY2hhcnNldCA9ICd1dGY4JzsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIg5a2X56ym5o6S5bqPDQogICAgICovDQogICAgcHVibGljICRjb2xsYXRlID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOWHveaVsO+8jOWunuS+i+WMliRzcWzlj4LmlbAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgICR0aGlzLT5zcWwgPSBuZXcgRGJTcWwoJHRoaXMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcw0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRXNjYXBlU3RyaW5nKCRzKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFNRTGl0ZTM6OmVzY2FwZVN0cmluZygkcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRhcnJheQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIE9wZW4oJGFycmF5KQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aGlzLT5kYiA9IG5ldyBTUUxpdGUzKCRhcnJheVswXSkpIHsNCiAgICAgICAgICAgICR0aGlzLT5kYnByZSA9ICRhcnJheVsxXTsNCiAgICAgICAgICAgICR0aGlzLT5kYm5hbWUgPSAkYXJyYXlbMF07DQogICAgICAgICAgICAkdGhpcy0+dmVyc2lvbiA9IHN1YnN0cihHZXRWYWx1ZUluQXJyYXkoU1FMaXRlMzo6dmVyc2lvbigpLCAndmVyc2lvblN0cmluZycpLCAxKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlhbPpl63mlbDmja7lupPov57mjqUuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENsb3NlKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5kYi0+Y2xvc2UoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHMNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnlNdWxpdCgkcykNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+UXVlcnlNdWx0aSgkcyk7DQogICAgfQ0KDQogICAgLy/plJnliKvlrZflh73mlbDvvIzljoblj7Lljp/lm6Dkv53nlZnkuIvmnaUNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBRdWVyeU11bHRpKCRzKQ0KICAgIHsNCiAgICAgICAgLy8kYT1leHBsb2RlKCc7JyxzdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRzKSk7DQogICAgICAgICRhID0gZXhwbG9kZSgnOycsICRzKTsNCiAgICAgICAgZm9yZWFjaCAoJGEgYXMgJHMpIHsNCiAgICAgICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgICAgICBpZiAoJHMgIT0gJycpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcykpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnkoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAvLyDpgY3ljoblh7rmnaUNCiAgICAgICAgJHJlc3VsdHMgPSBAJHRoaXMtPmRiLT5xdWVyeSgkdGhpcy0+c3FsLT5GaWx0ZXIoJHF1ZXJ5KSk7DQogICAgICAgICRlID0gJHRoaXMtPmRiLT5sYXN0RXJyb3JDb2RlKCk7DQogICAgICAgIGlmICgkZSAhPSAwKSB7DQogICAgICAgICAgICB0cmlnZ2VyX2Vycm9yKCRlIC4gJHRoaXMtPmRiLT5sYXN0RXJyb3JNc2coKSwgRV9VU0VSX05PVElDRSk7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICBpZiAoISgkcmVzdWx0cyBpbnN0YW5jZW9mIFNxbGl0ZTNSZXN1bHQpKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoJHJlc3VsdHMpOw0KICAgICAgICB9DQogICAgICAgICRkYXRhID0gYXJyYXkoKTsNCiAgICAgICAgaWYgKCRyZXN1bHRzLT5udW1Db2x1bW5zKCkgPiAwKSB7DQogICAgICAgICAgICB3aGlsZSAoJHJvdyA9ICRyZXN1bHRzLT5mZXRjaEFycmF5KCkpIHsNCiAgICAgICAgICAgICAgICAkZGF0YVtdID0gJHJvdzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRkYXRhW10gPSAkcmVzdWx0cy0+bnVtQ29sdW1ucygpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAkZGF0YTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFVwZGF0ZSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgICRyID0gJHRoaXMtPmRiLT5xdWVyeSgkdGhpcy0+c3FsLT5GaWx0ZXIoJHF1ZXJ5KSk7DQogICAgICAgICR0aGlzLT5Mb2dzRXJyb3IoKTsNCiAgICAgICAgcmV0dXJuICRyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsZXRlKCRxdWVyeSkNCiAgICB7DQogICAgICAgIC8vJHF1ZXJ5PXN0cl9yZXBsYWNlKCclcHJlJScsICR0aGlzLT5kYnByZSwgJHF1ZXJ5KTsNCiAgICAgICAgJHIgPSAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICByZXR1cm4gJHI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRxdWVyeQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbnNlcnQoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJHRoaXMtPkxvZ3NFcnJvcigpOw0KICAgICAgICByZXR1cm4gJHRoaXMtPmRiLT5sYXN0SW5zZXJ0Um93SUQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHRhYmxlDQogICAgICogQHBhcmFtICRkYXRhaW5mbw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDcmVhdGVUYWJsZSgkdGFibGUsICRkYXRhaW5mbywgJGVuZ2luZSA9IG51bGwsICRjaGFyc2V0ID0gbnVsbCwgJGNvbGxhdGUgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPlF1ZXJ5TXVsaXQoJHRoaXMtPnNxbC0+Q3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8pKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHRhYmxlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbFRhYmxlKCR0YWJsZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkRlbFRhYmxlKCR0YWJsZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkdGFibGUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRXhpc3RUYWJsZSgkdGFibGUpDQogICAgew0KICAgICAgICAkYSA9ICR0aGlzLT5RdWVyeSgkdGhpcy0+c3FsLT5FeGlzdFRhYmxlKCR0YWJsZSkpOw0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgJGIgPSBjdXJyZW50KCRhKTsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYikpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRjID0gKGludCkgY3VycmVudCgkYik7DQogICAgICAgIGlmICgkYyA+IDApIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBmdW5jdGlvbiBMb2dzRXJyb3IoKQ0KICAgIHsNCiAgICAgICAgJGUgPSAkdGhpcy0+ZGItPmxhc3RFcnJvckNvZGUoKTsNCiAgICAgICAgaWYgKCRlID4gMCkgew0KICAgICAgICAgICAgJHRoaXMtPmVycm9yW10gPSBhcnJheSgkZSwgJHRoaXMtPmRiLT5sYXN0RXJyb3JNc2coKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkuovliqHlpITnkIYNCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHF1ZXJ5IOaMh+S7pA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKCRxdWVyeSkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+UXVlcnkoJHRoaXMtPnNxbC0+VHJhbnNhY3Rpb24oJHF1ZXJ5KSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yik5pat5pWw5o2u6KGo55qE5a2X5q615piv5ZCm5a2Y5ZyoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdGFibGUg6KGo5ZCNDQogICAgICogQHBhcmFtIHN0cmluZyAkZmllbGQg5a2X5q615ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRXhpc3RDb2x1bW4oJHRhYmxlLCAkZmllbGQpDQogICAgew0KICAgICAgICAkciA9IG51bGw7DQogICAgICAgIFpCbG9nRXhjZXB0aW9uOjpTdXNwZW5kRXJyb3JIb29rKCk7DQogICAgICAgICRyID0gQCR0aGlzLT5RdWVyeSgiUFJBR01BIHRhYmxlX2luZm8oWyR0YWJsZV0pIik7DQogICAgICAgIFpCbG9nRXhjZXB0aW9uOjpSZXN1bWVFcnJvckhvb2soKTsNCiAgICAgICAgJHIgPSBzZXJpYWxpemUoJHIpOw0KICAgICAgICBpZiAoc3RyaXBvcygkciwgJyInIC4gJGZpZWxkIC4gJyInKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQp9DQo=</file>
	<file name='zb_users\language\en.php' crc32='8786A9E4'></file>
	<file name='zb_users\language\zh-cn.php' crc32='BA31574'></file>
	<file name='zb_users\language\zh-tw.php' crc32='CD31FB00'></file>
</files>
