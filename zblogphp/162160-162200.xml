<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\function\c_system_common.php' crc32='1D7CDBDF'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='B154A696'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiB6YnDlhajlsYDmk43kvZznsbsuIA0KICovDQpjbGFzcyBaQmxvZ1BIUA0Kew0KICAgIHByaXZhdGUgc3RhdGljICRfemJwID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDniYjmnKzlj7cNCiAgICAgKi8NCiAgICBwdWJsaWMgJHZlcnNpb24gPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgRGF0YWJhc2VfX0ludGVyZmFjZSDmlbDmja7lupMNCiAgICAgKi8NCiAgICBwdWJsaWMgJGRiID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIGFycmF5IOmFjee9rumAiemhuQ0KICAgICAqLw0KICAgIHB1YmxpYyAkb3B0aW9uID0gYXJyYXkoKTsNCiAgICAvKioNCiAgICAgKiBAdmFyIGFycmF5IOivreiogA0KICAgICAqLw0KICAgIHB1YmxpYyAkbGFuZyA9IGFycmF5KCk7DQogICAgLyoqDQogICAgICogQHZhciBqc29u57G75Z6LIOivreiogA0KICAgICAqLw0KICAgIHB1YmxpYyAkbGFuZ3MgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkg6K+t6KiA5YyFbGlzdA0KICAgICAqLw0KICAgIHB1YmxpYyAkbGFuZ3BhY2tsaXN0ID0gYXJyYXkoKTsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDot6/lvoQNCiAgICAgKi8NCiAgICBwdWJsaWMgJHBhdGggPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOWfn+WQjQ0KICAgICAqLw0KICAgIHB1YmxpYyAkaG9zdCA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcgY29va2ll5L2c55So5Z+fDQogICAgICovDQogICAgcHVibGljICRjb29raWVzcGF0aCA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcgZ3VpZA0KICAgICAqLw0KICAgIHB1YmxpYyAkZ3VpZCA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg5b2T5YmN6ZO+5o6lDQogICAgICovDQogICAgcHVibGljICRjdXJyZW50dXJsID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDlvZPliY3pk77mjqUNCiAgICAgKi8NCiAgICBwdWJsaWMgJGZ1bGxjdXJyZW50dXJsID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDnlKjmiLfnm67lvZUNCiAgICAgKi8NCiAgICBwdWJsaWMgJHVzZXJzZGlyID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZyDpqozor4HnoIHlnLDlnYANCiAgICAgKi8NCiAgICBwdWJsaWMgJHZlcmlmeUNvZGVVcmwgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOmqjOivgeeggeWcsOWdgO+8iOaLvOWGmemUmeivr++8iQ0KICAgICAqDQogICAgICogQGRlcHJlY2F0ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgJHZhbGlkY29kZXVybCA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgJGZlZWR1cmwgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nDQogICAgICovDQogICAgcHVibGljICRzZWFyY2h1cmwgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nDQogICAgICovDQogICAgcHVibGljICRhamF4dXJsID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyAkeG1scnBjdXJsID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIE1lbWJlcltdIOeUqOaIt+aVsOe7hA0KICAgICAqLw0KICAgIHB1YmxpYyAkbWVtYmVycyA9IGFycmF5KCk7DQogICAgLyoqDQogICAgICogQHZhciBNZW1iZXJbXSDnlKjmiLfmlbDnu4TvvIjku6XnlKjmiLflkI3kuLrplK7vvIkNCiAgICAgKi8NCiAgICBwdWJsaWMgJG1lbWJlcnNieW5hbWUgPSBhcnJheSgpOw0KICAgIC8qKg0KICAgICAqIEB2YXIgQ2F0ZWdvcnlbXSDliIbnsbvmlbDnu4QNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNhdGVnb3J5cyA9IGFycmF5KCk7DQogICAgcHVibGljICRjYXRlZ29yaWVzID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIENhdGVnb3J5W10g5YiG57G75pWw57uE77yI5bey5o6S5bqP77yJDQogICAgICovDQogICAgcHVibGljICRjYXRlZ29yeXNieW9yZGVyID0gYXJyYXkoKTsNCiAgICBwdWJsaWMgJGNhdGVnb3JpZXNieW9yZGVyID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIE1vZHVsZVtdIOaooeWdl+aVsOe7hA0KICAgICAqLw0KICAgIHB1YmxpYyAkbW9kdWxlcyA9IGFycmF5KCk7DQogICAgLyoqDQogICAgICogQHZhciBNb2R1bGVbXSDmqKHlnZfmlbDnu4TvvIjku6Xmlofku7blkI3kuLrplK7vvIkNCiAgICAgKi8NCiAgICBwdWJsaWMgJG1vZHVsZXNieWZpbGVuYW1lID0gYXJyYXkoKTsNCiAgICAvKioNCiAgICAgKiBAdmFyIENvbmZpZ1tdIOmFjee9rumAiemhuQ0KICAgICAqLw0KICAgIHB1YmxpYyAkY29uZmlncyA9IGFycmF5KCk7DQogICAgLyoqDQogICAgICogQHZhciBUYWdbXSDmoIfnrb7mlbDnu4QNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRhZ3MgPSBhcnJheSgpOw0KICAgIC8qKg0KICAgICAqIEB2YXIgVGFnW10g5qCH562+5pWw57uE77yI5Lul5qCH562+5ZCN5Li66ZSu77yJDQogICAgICovDQogICAgcHVibGljICR0YWdzYnluYW1lID0gYXJyYXkoKTsNCiAgICAvKioNCiAgICAgKiBAdmFyIENvbW1lbnRbXSDor4TorrrmlbDnu4QNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNvbW1lbnRzID0gYXJyYXkoKTsNCiAgICAvKioNCiAgICAgKiBAdmFyIFBvc3RbXSDmlofnq6DliJfooajmlbDnu4QNCiAgICAgKi8NCiAgICBwdWJsaWMgJHBvc3RzID0gYXJyYXkoKTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOW9k+WJjemhtemdouagh+mimA0KICAgICAqLw0KICAgIHB1YmxpYyAkdGl0bGUgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOe9keermeWQjQ0KICAgICAqLw0KICAgIHB1YmxpYyAkbmFtZSA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcg572R56uZ5a2Q5qCH6aKYDQogICAgICovDQogICAgcHVibGljICRzdWJuYW1lID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIEFwcCDlvZPliY3kuLvpopgNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRoZW1lID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIGFycmF5KCkg5b2T5YmN5Li76aKY54mI5pys5L+h5oGvDQogICAgICovDQogICAgcHVibGljICR0aGVtZWluZm8gPSBhcnJheSgpOw0KICAgIC8qKg0KICAgICAqIEB2YXIgc3RyaW5nIOW9k+WJjeS4u+mimOmjjuagvA0KICAgICAqLw0KICAgIHB1YmxpYyAkc3R5bGUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogQHZhciBNZW1iZXIg5b2T5YmN55So5oi3DQogICAgICovDQogICAgcHVibGljICR1c2VyID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIENvbmZpZyDnvJPlrZgNCiAgICAgKi8NCiAgICBwdWJsaWMgJGNhY2hlID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXl8bnVsbCDmlbDmja7ooagNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRhYmxlID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIGFycmF5fG51bGwg5pWw5o2u6KGo5L+h5oGvDQogICAgICovDQogICAgcHVibGljICRkYXRhaW5mbyA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBhcnJheXxudWxsIOexu+Wei+W6j+WIlw0KICAgICAqLw0KICAgIHB1YmxpYyAkcG9zdHR5cGUgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXl8bnVsbCDmk43kvZzliJfooagNCiAgICAgKi8NCiAgICBwdWJsaWMgJGFjdGlvbnMgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgbWl4ZWR8bnVsbHxzdHJpbmcg5b2T5YmN5pON5L2cDQogICAgICovDQogICAgcHVibGljICRhY3Rpb24gPSBudWxsOw0KDQogICAgcHJpdmF0ZSAkaXNpbml0aWFsaXplZCA9IGZhbHNlOyAvL+aYr+WQpuWIneWni+WMluaIkOWKnw0KICAgIHByaXZhdGUgJGlzY29ubmVjdGVkID0gZmFsc2U7IC8v5piv5ZCm6L+e5o6l5oiQ5YqfDQogICAgcHJpdmF0ZSAkaXNsb2FkID0gZmFsc2U7IC8v5piv5ZCm6L295YWlDQogICAgcHJpdmF0ZSAkaXNzZXNzaW9uID0gZmFsc2U7IC8v5piv5ZCm5L2/55Soc2Vzc2lvbg0KICAgIHB1YmxpYyAkaXNtYW5hZ2UgPSBmYWxzZTsgLy/mmK/lkKbliqDovb3nrqHnkIbmqKHlvI8NCiAgICBwcml2YXRlICRpc0d6aXAgPSBmYWxzZTsgLy/mmK/lkKblvIDlkK9nemlwDQogICAgcHVibGljICRpc0h0dHBzID0gZmFsc2U7IC8v5piv5ZCmSFRUUFMNCiAgICBwdWJsaWMgJGlzY21kID0gZmFsc2U7IC8v5piv5ZCm5Yqg6L29Q01E5qih5byPDQogICAgcHVibGljICRpc2FqYXggPSBmYWxzZTsgLy/mmK/lkKbliqDovb1BSkFY5qih5byPDQoNCiAgICAvKioNCiAgICAgKiBAdmFyIFRlbXBsYXRlIOW9k+WJjeaooeadvw0KICAgICAqLw0KICAgIHB1YmxpYyAkdGVtcGxhdGUgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgbnVsbCDnpL7kvJrljJbor4TorroNCiAgICAgKi8NCiAgICBwdWJsaWMgJHNvY2lhbGNvbW1lbnQgPSBudWxsOw0KICAgIC8qKg0KICAgICAqIEB2YXIgbnVsbCDmqKHmnb/lpLTpg6gNCiAgICAgKi8NCiAgICBwdWJsaWMgJGhlYWRlciA9IG51bGw7DQogICAgLyoqDQogICAgICogQHZhciBudWxsIOaooeadv+WwvumDqA0KICAgICAqLw0KICAgIHB1YmxpYyAkZm9vdGVyID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgYXJyYXkg5r+A5rS755qE5o+S5Lu25YiX6KGoDQogICAgICovDQogICAgcHVibGljICRhY3RpdmVkYXBwcyA9IGFycmF5KCk7DQogICAgcHVibGljICRhY3RpdmVhcHBzOw0KDQogICAgLyoqDQogICAgICogQHZhciBpbnQg566h55CG6aG16Z2i5pi+56S65p2h5pWwDQogICAgICovDQogICAgcHVibGljICRtYW5hZ2Vjb3VudCA9IDUwOw0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOmhteeggeaYvuekuuadoeaVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkcGFnZWJhcmNvdW50ID0gMTA7DQogICAgLyoqDQogICAgICogQHZhciBpbnQg5pCc57Si6L+U5Zue5p2h5pWwDQogICAgICovDQogICAgcHVibGljICRzZWFyY2hjb3VudCA9IDEwOw0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50IOaWh+eroOWIl+ihqOaYvuekuuadoeaVsA0KICAgICAqLw0KICAgIHB1YmxpYyAkZGlzcGxheWNvdW50ID0gMTA7DQogICAgLyoqDQogICAgICogQHZhciBpbnQg6K+E6K665pi+56S65pWw6YePDQogICAgICovDQogICAgcHVibGljICRjb21tZW50ZGlzcGxheWNvdW50ID0gMTA7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIGludCDlvZPliY3lrp7kvovkuItDU1JGIFRva2Vu6L+H5pyf5pe26Ze077yI5bCP5pe277yJDQogICAgICovDQogICAgcHVibGljICRjc3JmRXhwaXJhdGlvbiA9IDE7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIEFwcCDlvZPliY3kuLvpopjnsbsNCiAgICAgKi8NCiAgICBwdWJsaWMgJHRoZW1lYXBwID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIOiOt+WPluWUr+S4gOWunuS+iy4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbHxaQmxvZ1BIUA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gR2V0SW5zdGFuY2UoKQ0KICAgIHsNCiAgICAgICAgaWYgKCFpc3NldChzZWxmOjokX3picCkpIHsNCiAgICAgICAgICAgIGlmIChpc3NldCgkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0dPRFpCUF9GSUxFJ10pICYmIGlzc2V0KCRHTE9CQUxTWydvcHRpb24nXVsnWkNfR09EWkJQX05BTUUnXSkgJiYgaXNfcmVhZGFibGUoWkJQX1BBVEggLiAkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0dPRFpCUF9GSUxFJ10pKSB7DQogICAgICAgICAgICAgICAgcmVxdWlyZSBaQlBfUEFUSCAuICRHTE9CQUxTWydvcHRpb24nXVsnWkNfR09EWkJQX0ZJTEUnXTsNCiAgICAgICAgICAgICAgICBzZWxmOjokX3picCA9IG5ldyAkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0dPRFpCUF9OQU1FJ10oKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgc2VsZjo6JF96YnAgPSBuZXcgc2VsZigpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHNlbGY6OiRfemJwOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIneWni+WMluaVsOaNruW6k+i/nuaOpS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUg5pWw5o2u6L+e5o6l57G75Z6LDQogICAgICoNCiAgICAgKiBAcmV0dXJuIERhdGFiYXNlX19JbnRlcmZhY2UNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEluaXRpYWxpemVEQigkdHlwZSkNCiAgICB7DQogICAgICAgIGlmICghdHJpbSgkdHlwZSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgICRuZXd0eXBlID0gJ0RhdGFiYXNlX18nIC4gdHJpbSgkdHlwZSk7DQoNCiAgICAgICAgcmV0dXJuIG5ldyAkbmV3dHlwZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaehOmAoOWHveaVsO+8jOWKoOi9veWfuuacrOmFjee9ruWIsCR6YnAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkNCiAgICB7DQogICAgICAgIGdsb2JhbCAkb3B0aW9uLCAkbGFuZywgJGxhbmdzLCAkYmxvZ3BhdGgsICRibG9naG9zdCwgJGNvb2tpZXNwYXRoLCAkdXNlcnNkaXIsICR0YWJsZSwNCiAgICAgICAgJGRhdGFpbmZvLCAkYWN0aW9ucywgJGFjdGlvbiwgJGJsb2d2ZXJzaW9uLCAkYmxvZ3RpdGxlLCAkYmxvZ25hbWUsICRibG9nc3VibmFtZSwNCiAgICAgICAgJGJsb2d0aGVtZSwgJGJsb2dzdHlsZSwgJGN1cnJlbnR1cmwsICRhY3RpdmVkYXBwcywgJHBvc3R0eXBlOw0KDQogICAgICAgIGlmIChaQlBfSE9PS0VSUk9SKSB7DQogICAgICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6U2V0RXJyb3JIb29rKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvL+WfuuacrOmFjee9ruWKoOi9veWIsCR6YnDlhoUNCiAgICAgICAgJHRoaXMtPnZlcnNpb24gPSAmJGJsb2d2ZXJzaW9uOw0KICAgICAgICAkdGhpcy0+b3B0aW9uID0gJiRvcHRpb247DQogICAgICAgICR0aGlzLT5sYW5nID0gJiRsYW5nOw0KICAgICAgICAkdGhpcy0+bGFuZ3MgPSAmJGxhbmdzOw0KICAgICAgICAkdGhpcy0+cGF0aCA9ICYkYmxvZ3BhdGg7DQogICAgICAgICR0aGlzLT5ob3N0ID0gJiRibG9naG9zdDsgLy/mraTlgLzlnKjlkI7ovrnliJ3lp4vljJbml7blj6/og73kvJrlj5jljJYhDQogICAgICAgICR0aGlzLT5jb29raWVzcGF0aCA9ICYkY29va2llc3BhdGg7DQogICAgICAgICR0aGlzLT51c2Vyc2RpciA9ICYkdXNlcnNkaXI7DQoNCiAgICAgICAgJHRoaXMtPnRhYmxlID0gJiR0YWJsZTsNCiAgICAgICAgJHRoaXMtPmRhdGFpbmZvID0gJiRkYXRhaW5mbzsNCiAgICAgICAgJHRoaXMtPmFjdGlvbnMgPSAmJGFjdGlvbnM7DQogICAgICAgICR0aGlzLT5wb3N0dHlwZSA9ICYkcG9zdHR5cGU7DQogICAgICAgICR0aGlzLT5jdXJyZW50dXJsID0gJiRjdXJyZW50dXJsOw0KDQogICAgICAgICR0aGlzLT5hY3Rpb24gPSAmJGFjdGlvbjsNCiAgICAgICAgJHRoaXMtPmFjdGl2ZWRhcHBzID0gJiRhY3RpdmVkYXBwczsNCiAgICAgICAgJHRoaXMtPmFjdGl2ZWFwcHMgPSAmJHRoaXMtPmFjdGl2ZWRhcHBzOw0KDQogICAgICAgICR0aGlzLT5ndWlkID0gJiR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfQ0xTSUQnXTsNCg0KICAgICAgICAkdGhpcy0+dGl0bGUgPSAmJGJsb2d0aXRsZTsNCiAgICAgICAgJHRoaXMtPm5hbWUgPSAmJGJsb2duYW1lOw0KICAgICAgICAkdGhpcy0+c3VibmFtZSA9ICYkYmxvZ3N1Ym5hbWU7DQogICAgICAgICR0aGlzLT50aGVtZSA9ICYkYmxvZ3RoZW1lOw0KICAgICAgICAkdGhpcy0+c3R5bGUgPSAmJGJsb2dzdHlsZTsNCg0KICAgICAgICAkdGhpcy0+bWFuYWdlY291bnQgPSAmJHRoaXMtPm9wdGlvblsnWkNfTUFOQUdFX0NPVU5UJ107DQogICAgICAgICR0aGlzLT5wYWdlYmFyY291bnQgPSAmJHRoaXMtPm9wdGlvblsnWkNfUEFHRUJBUl9DT1VOVCddOw0KICAgICAgICAkdGhpcy0+c2VhcmNoY291bnQgPSAmJHRoaXMtPm9wdGlvblsnWkNfU0VBUkNIX0NPVU5UJ107DQogICAgICAgICR0aGlzLT5kaXNwbGF5Y291bnQgPSAmJHRoaXMtPm9wdGlvblsnWkNfRElTUExBWV9DT1VOVCddOw0KICAgICAgICAkdGhpcy0+Y29tbWVudGRpc3BsYXljb3VudCA9ICYkdGhpcy0+b3B0aW9uWydaQ19DT01NRU5UU19ESVNQTEFZX0NPVU5UJ107DQoNCiAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXMgPSAmJHRoaXMtPmNhdGVnb3J5czsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyID0gJiR0aGlzLT5jYXRlZ29yeXNieW9yZGVyOw0KDQogICAgICAgICR0aGlzLT51c2VyID0gbmV3IHN0ZENsYXNzKCk7DQogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5kYXRhaW5mb1snTWVtYmVyJ10gYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgICR0aGlzLT51c2VyLT4ka2V5ID0gJHZhbHVlWzNdOw0KICAgICAgICB9DQogICAgICAgICR0aGlzLT51c2VyLT5NZXRhcyA9IG5ldyBNZXRhcygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAq5p6Q5p6E5Ye95pWw77yM6YeK5pS+6LWE5rqQLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCkNCiAgICB7DQogICAgICAgICR0aGlzLT5UZXJtaW5hdGUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAYXBpIEZpbHRlcl9QbHVnaW5fWmJwX0NhbGwNCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbWV0aG9kDQogICAgICogQHBhcmFtICRhcmdzDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY2FsbCgkbWV0aG9kLCAkYXJncykNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9DYWxsJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRtZXRob2QsICRhcmdzKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdHJpZ2dlcl9lcnJvcigkdGhpcy0+bGFuZ1snZXJyb3InXVs4MV0sIEVfVVNFUl9XQVJOSU5HKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDorr7nva7lj4LmlbDlgLwNCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqIEBwYXJhbSAkdmFsdWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19zZXQoJG5hbWUsICR2YWx1ZSkNCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9TZXQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJG5hbWUsICR2YWx1ZSk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHRyaWdnZXJfZXJyb3IoJHRoaXMtPmxhbmdbJ2Vycm9yJ11bODFdLCBFX1VTRVJfV0FSTklORyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W5Y+C5pWw5YC8DQogICAgICoNCiAgICAgKiBAcGFyYW0gJG5hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJG5hbWUpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfR2V0J10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRuYW1lKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdHJpZ2dlcl9lcnJvcigkdGhpcy0+bGFuZ1snZXJyb3InXVs4MV0sIEVfVVNFUl9XQVJOSU5HKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliJ3lp4vljJYkemJwLg0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBJbml0aWFsaXplKCkNCiAgICB7DQogICAgICAgICRvbGRab25lID0gJHRoaXMtPm9wdGlvblsnWkNfVElNRV9aT05FX05BTUUnXTsNCiAgICAgICAgZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgkb2xkWm9uZSk7DQoNCiAgICAgICAgJG9sZExhbmcgPSAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0xBTkdVQUdFUEFDSyddOw0KICAgICAgICAkdGhpcy0+TG9hZExhbmd1YWdlKCdzeXN0ZW0nLCAnJyk7DQoNCiAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ1pDX0NMT1NFX1dIT0xFX1NJVEUnXSA9PSB0cnVlKSB7DQogICAgICAgICAgICBIdHRwNTAzKCk7DQogICAgICAgICAgICAkdGhpcy0+U2hvd0Vycm9yKDgyLCBfX0ZJTEVfXywgX19MSU5FX18pOw0KDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoISR0aGlzLT5PcGVuQ29ubmVjdCgpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+Q29udmVydFRhYmxlQW5kRGF0YWluZm8oKTsNCg0KICAgICAgICAkdGhpcy0+TG9hZENvbmZpZ3NPbmx5U3lzdGVtKHRydWUpOw0KICAgICAgICAkdGhpcy0+TG9hZE9wdGlvbigpOw0KDQogICAgICAgICR0aGlzLT5SZWdQb3N0VHlwZSgwLCAnYXJ0aWNsZScsICR0aGlzLT5vcHRpb25bJ1pDX0FSVElDTEVfUkVHRVgnXSwgJHRoaXMtPm9wdGlvblsnWkNfUE9TVF9ERUZBVUxUX1RFTVBMQVRFJ10sIDAsIDApOw0KICAgICAgICAkdGhpcy0+UmVnUG9zdFR5cGUoMSwgJ3BhZ2UnLCAkdGhpcy0+b3B0aW9uWydaQ19QQUdFX1JFR0VYJ10sICR0aGlzLT5vcHRpb25bJ1pDX1BPU1RfREVGQVVMVF9URU1QTEFURSddLCBudWxsLCBudWxsKTsNCg0KICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfQkxPR19MQU5HVUFHRVBBQ0snXSA9PT0gJ1NpbXBDaGluZXNlJykgew0KICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfQkxPR19MQU5HVUFHRVBBQ0snXSA9ICd6aC1jbic7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfQkxPR19MQU5HVUFHRVBBQ0snXSA9PT0gJ1RyYWRDaGluZXNlJykgew0KICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfQkxPR19MQU5HVUFHRVBBQ0snXSA9ICd6aC10dyc7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJG9sZExhbmcgIT0gJHRoaXMtPm9wdGlvblsnWkNfQkxPR19MQU5HVUFHRVBBQ0snXSkgew0KICAgICAgICAgICAgJHRoaXMtPkxvYWRMYW5ndWFnZSgnc3lzdGVtJywgJycpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5vcHRpb25bJ1pDX0RFQlVHX01PREVfV0FSTklORyddKSkgew0KICAgICAgICAgICAgWkJsb2dFeGNlcHRpb246OiRpc3dhcm5pbmcgPSAoYm9vbCkgJHRoaXMtPm9wdGlvblsnWkNfREVCVUdfTU9ERV9XQVJOSU5HJ107DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5vcHRpb25bJ1pDX0RFQlVHX01PREVfU1RSSUNUJ10pKSB7DQogICAgICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6JGlzc3RyaWN0ID0gKGJvb2wpICR0aGlzLT5vcHRpb25bJ1pDX0RFQlVHX01PREVfU1RSSUNUJ107DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5vcHRpb25bJ1pDX0RFQlVHX0xPR19FUlJPUiddKSkgew0KICAgICAgICAgICAgWkJsb2dFeGNlcHRpb246OiRpc2xvZ2Vycm9yID0gKGJvb2wpICR0aGlzLT5vcHRpb25bJ1pDX0RFQlVHX0xPR19FUlJPUiddOw0KICAgICAgICB9DQoNCiAgICAgICAgLy9aQ19QRVJNQU5FTlRfRE9NQUlOX1dIT0xFX0RJU0FCTEXkuI3lrZjlnKgg5oiW5pivIFpDX1BFUk1BTkVOVF9ET01BSU5fV0hPTEVfRElTQUJMReWtmOWcqOS9huS4uuWBhw0KICAgICAgICAkZG9tYWluX2Rpc2FibGUgPSBHZXRWYWx1ZUluQXJyYXkoJHRoaXMtPm9wdGlvbiwnWkNfUEVSTUFORU5UX0RPTUFJTl9XSE9MRV9ESVNBQkxFJyk7DQogICAgICAgIGlmICgkZG9tYWluX2Rpc2FibGUgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgIC8v5aaC5p6cWkNfUEVSTUFORU5UX0RPTUFJTl9GT1JDRURfVVJM5a2Y5ZyoIOS4lOS4jeS4uuepug0KICAgICAgICAgICAgJGZvcmNlZF91cmwgPSBHZXRWYWx1ZUluQXJyYXkoJHRoaXMtPm9wdGlvbiwnWkNfUEVSTUFORU5UX0RPTUFJTl9GT1JDRURfVVJMJyk7DQogICAgICAgICAgICBpZiAoJGZvcmNlZF91cmwgIT0gJycpew0KICAgICAgICAgICAgICAgICR0aGlzLT5ob3N0ID0gKHN0cmluZykgJGZvcmNlZF91cmw7DQogICAgICAgICAgICAgICAgJHRoaXMtPmNvb2tpZXNwYXRoID0gc3Ryc3RyKHN0cl9yZXBsYWNlKCc6Ly8nLCAnJywgJHRoaXMtPmhvc3QpLCAnLycpOw0KICAgICAgICAgICAgLy/lpoLmnpxaQ19QRVJNQU5FTlRfRE9NQUlOX0VOQUJMReW3suW8gOWQr+eahOivnQ0KICAgICAgICAgICAgfWVsc2VpZiAoJHRoaXMtPm9wdGlvblsnWkNfUEVSTUFORU5UX0RPTUFJTl9FTkFCTEUnXSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPmhvc3QgPSAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0hPU1QnXTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y29va2llc3BhdGggPSBzdHJzdHIoc3RyX3JlcGxhY2UoJzovLycsICcnLCAkdGhpcy0+aG9zdCksICcvJyk7DQogICAgICAgICAgICAvL+m7mOiupOiHquWKqOivhuWIq+Wfn+WQjQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0hPU1QnXSA9ICR0aGlzLT5ob3N0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfQkxPR19IT1NUJ10gPSAkdGhpcy0+aG9zdDsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfUFJPRFVDVCddID0gJ1otQmxvZ1BIUCc7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfVkVSU0lPTiddID0gWkNfQkxPR19WRVJTSU9OOw0KICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19OT1dfVkVSU0lPTiddID0gJHRoaXMtPnZlcnNpb247ICAvL1pDX0xBU1RfVkVSU0lPTg0KICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1RfRlVMTCddID0gJHRoaXMtPm9wdGlvblsnWkNfQkxPR19QUk9EVUNUJ10gLiAnICcgLiBaQ19WRVJTSU9OX0RJU1BMQVk7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfUFJPRFVDVF9GVUxMSFRNTCddID0gJzxhIGhyZWY9Imh0dHBzOi8vd3d3LnpibG9nY24uY29tLyIgdGl0bGU9IlotQmxvZ1BIUCAnIC4gWkNfQkxPR19WRVJTSU9OIC4gJyIgdGFyZ2V0PSJfYmxhbmsiPicgLiAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1RfRlVMTCddIC4gJzwvYT4nOw0KICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1RfSFRNTCddID0gJzxhIGhyZWY9Imh0dHBzOi8vd3d3LnpibG9nY24uY29tLyIgdGl0bGU9IlotQmxvZ1BIUCAnIC4gWkNfQkxPR19WRVJTSU9OIC4gJyIgdGFyZ2V0PSJfYmxhbmsiPicgLiAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX1BST0RVQ1QnXSAuICc8L2E+JzsNCg0KICAgICAgICBpZiAoJG9sZFpvbmUgIT0gJHRoaXMtPm9wdGlvblsnWkNfVElNRV9aT05FX05BTUUnXSkgew0KICAgICAgICAgICAgZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgkdGhpcy0+b3B0aW9uWydaQ19USU1FX1pPTkVfTkFNRSddKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qaWYoaXNzZXQoJF9DT09LSUVbJ3RpbWV6b25lJ10pKXsNCiAgICAgICAgICAgICR0ej1HZXRWYXJzKCd0aW1lem9uZScsJ0NPT0tJRScpOw0KICAgICAgICAgICAgaWYoaXNfbnVtZXJpYygkdHopKXsNCiAgICAgICAgICAgICR0ej1zcHJpbnRmKCclK2QnLC0kdHopOw0KICAgICAgICAgICAgZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgnRXRjL0dNVCcgLiAkdHopOw0KICAgICAgICAgICAgJHRoaXMtPnRpbWV6b25lPWRhdGVfZGVmYXVsdF90aW1lem9uZV9nZXQoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgKi8NCg0KICAgICAgICBpZiAoJHRoaXMtPm9wdGlvblsnWkNfVkVSU0lPTl9JTl9IRUFERVInXSAmJiAhaGVhZGVyc19zZW50KCkpIHsNCiAgICAgICAgICAgIGhlYWRlcignUHJvZHVjdDonIC4gJHRoaXMtPm9wdGlvblsnWkNfQkxPR19QUk9EVUNUX0ZVTEwnXSk7DQogICAgICAgIH0NCg0KICAgICAgICAkcGFyc2VkSG9zdCA9IHBhcnNlX3VybCgkdGhpcy0+aG9zdCk7DQogICAgICAgICR0aGlzLT5mdWxsY3VycmVudHVybCA9ICRwYXJzZWRIb3N0WydzY2hlbWUnXSAuICc6Ly8nIC4gJHBhcnNlZEhvc3RbJ2hvc3QnXTsNCiAgICAgICAgaWYgKGlzc2V0KCRwYXJzZWRIb3N0Wydwb3J0J10pKSB7DQogICAgICAgICAgICAkdGhpcy0+ZnVsbGN1cnJlbnR1cmwgLj0gJzonIC4gJHBhcnNlZEhvc3RbJ3BvcnQnXTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+ZnVsbGN1cnJlbnR1cmwgLj0gJHRoaXMtPmN1cnJlbnR1cmw7DQoNCiAgICAgICAgaWYgKHN1YnN0cigkdGhpcy0+aG9zdCwgMCwgOCkgPT0gJ2h0dHBzOi8vJykgew0KICAgICAgICAgICAgJHRoaXMtPmlzSHR0cHMgPSB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPnZlcmlmeUNvZGVVcmwgPSAkdGhpcy0+aG9zdCAuICd6Yl9zeXN0ZW0vc2NyaXB0L2NfdmFsaWRjb2RlLnBocCc7DQogICAgICAgICR0aGlzLT52YWxpZGNvZGV1cmwgPSAmJHRoaXMtPnZlcmlmeUNvZGVVcmw7DQogICAgICAgICR0aGlzLT5mZWVkdXJsID0gJHRoaXMtPmhvc3QgLiAnZmVlZC5waHAnOw0KICAgICAgICAkdGhpcy0+c2VhcmNodXJsID0gJHRoaXMtPmhvc3QgLiAnc2VhcmNoLnBocCc7DQogICAgICAgICR0aGlzLT5hamF4dXJsID0gJHRoaXMtPmhvc3QgLiAnemJfc3lzdGVtL2NtZC5waHA/YWN0PWFqYXgmc3JjPSc7DQogICAgICAgICR0aGlzLT54bWxycGN1cmwgPSAkdGhpcy0+aG9zdCAuICd6Yl9zeXN0ZW0veG1sLXJwYy9pbmRleC5waHAnOw0KDQogICAgICAgICR0aGlzLT5Mb2FkQ29uZmlnc09ubHlTeXN0ZW0oZmFsc2UpOw0KDQogICAgICAgICR0aGlzLT5Mb2FkQ2FjaGUoKTsNCg0KICAgICAgICAhZGVmaW5lZCgnWkJQX0lOX0NNRCcpIHx8ICR0aGlzLT5pc2NtZCA9IHRydWU7DQogICAgICAgICFkZWZpbmVkKCdaQlBfSU5fQUpBWCcpIHx8ICR0aGlzLT5pc2FqYXggPSB0cnVlOw0KDQogICAgICAgICR0aGlzLT5pc2luaXRpYWxpemVkID0gdHJ1ZTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDku47mlbDmja7lupPph4zor7vlj5bkv6Hmga/vvIzlkK/liqjmlbTkuKpaQlAuDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWQoKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX0xvYWRfUHJlJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCEkdGhpcy0+aXNpbml0aWFsaXplZCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR0aGlzLT5pc2xvYWQpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5TdGFydEd6aXAoKTsNCg0KICAgICAgICBpZiAoIWhlYWRlcnNfc2VudCgpKSB7DQogICAgICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtdHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Jyk7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+Q29udmVydFRhYmxlQW5kRGF0YWluZm8oKTsNCg0KICAgICAgICAkdGhpcy0+TG9hZE1lbWJlcnMoJHRoaXMtPm9wdGlvblsnWkNfTE9BRE1FTUJFUlNfTEVWRUwnXSk7DQogICAgICAgICR0aGlzLT5Mb2FkQ2F0ZWdvcmllcygpOw0KICAgICAgICAvLyR0aGlzLT5Mb2FkVGFncygpOw0KICAgICAgICAkdGhpcy0+TG9hZE1vZHVsZXMoKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlcygpOw0KDQogICAgICAgIGlmICghKGdldF9jbGFzcygkdGhpcy0+dXNlcikgPT09ICdNZW1iZXInICYmICR0aGlzLT51c2VyLT5MZXZlbCA+IDAgJiYgIWVtcHR5KCR0aGlzLT51c2VyLT5JRCkpKSB7DQogICAgICAgICAgICAkdGhpcy0+VmVyaWZ5KCk7DQogICAgICAgIH0NCg0KICAgICAgICAvL+WIm+W7uuaooeadv+exuw0KICAgICAgICAkdGhpcy0+dGVtcGxhdGUgPSAkdGhpcy0+UHJlcGFyZVRlbXBsYXRlKCk7DQoNCiAgICAgICAgLy8g6K+75Li76aKY54mI5pys5L+h5oGvDQogICAgICAgICR0aGlzLT50aGVtZWFwcCA9ICR0aGlzLT5Mb2FkQXBwKCd0aGVtZScsICR0aGlzLT50aGVtZSk7DQogICAgICAgICR0aGlzLT50aGVtZWluZm8gPSAkdGhpcy0+dGhlbWVhcHAtPkdldEluZm9BcnJheSgpOw0KDQogICAgICAgIGlmICgkdGhpcy0+aXNtYW5hZ2UpIHsNCiAgICAgICAgICAgICR0aGlzLT5Mb2FkTWFuYWdlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9Mb2dpbl9IZWFkZXInLCAnSW5jbHVkZV9BZGRvbkFkbWluRm9udCcpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9PdGhlcl9IZWFkZXInLCAnSW5jbHVkZV9BZGRvbkFkbWluRm9udCcpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9BZG1pbl9IZWFkZXInLCAnSW5jbHVkZV9BZGRvbkFkbWluRm9udCcpOw0KDQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9Mb2FkJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnBuYW1lKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkdGhpcy0+UmVmbHVzaExhbmd1YWdlcygpOw0KDQogICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19ERUJVR19NT0RFJ10gfHwgJHRoaXMtPmlzbWFuYWdlKSB7DQogICAgICAgICAgICAkdGhpcy0+Q2hlY2tUZW1wbGF0ZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPmlzbG9hZCA9IHRydWU7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl566h55CGLg0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZE1hbmFnZSgpDQogICAgew0KICAgICAgICAvL2lmICgkdGhpcy0+b3B0aW9uWydaQ19QRVJNQU5FTlRfRE9NQUlOX1dJVEhfQURNSU4nXSA9PSBmYWxzZSkgew0KICAgICAgICAvLyAgICAgJHRoaXMtPmhvc3QgPSBHZXRDdXJyZW50SG9zdCgkdGhpcy0+cGF0aCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgLy99DQoNCiAgICAgICAgLy9pZiAoc3Vic3RyKCR0aGlzLT5ob3N0LCAwLCA4KSA9PSAnaHR0cHM6Ly8nKSB7DQogICAgICAgIC8vICAgICR0aGlzLT5pc0h0dHBzID0gdHJ1ZTsNCiAgICAgICAgLy99DQoNCiAgICAgICAgaWYgKCR0aGlzLT51c2VyLT5TdGF0dXMgPT0gWkNfTUVNQkVSX1NUQVRVU19BVURJVElORykgew0KICAgICAgICAgICAgJHRoaXMtPlNob3dFcnJvcig3OSwgX19GSUxFX18sIF9fTElORV9fKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdGhpcy0+dXNlci0+U3RhdHVzID09IFpDX01FTUJFUl9TVEFUVVNfTE9DS0VEKSB7DQogICAgICAgICAgICAkdGhpcy0+U2hvd0Vycm9yKDgwLCBfX0ZJTEVfXywgX19MSU5FX18pOw0KICAgICAgICB9DQoNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fUGFnZU1uZ19TdWJNZW51JywgJ0luY2x1ZGVfQWRtaW5fQWRkcGFnZXN1Ym1lbnUnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fVGFnTW5nX1N1Yk1lbnUnLCAnSW5jbHVkZV9BZG1pbl9BZGR0YWdzdWJtZW51Jyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0FkbWluX0NhdGVnb3J5TW5nX1N1Yk1lbnUnLCAnSW5jbHVkZV9BZG1pbl9BZGRjYXRlc3VibWVudScpOw0KICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9BZG1pbl9NZW1iZXJNbmdfU3ViTWVudScsICdJbmNsdWRlX0FkbWluX0FkZG1lbXN1Ym1lbnUnKTsNCiAgICAgICAgQWRkX0ZpbHRlcl9QbHVnaW4oJ0ZpbHRlcl9QbHVnaW5fQWRtaW5fTW9kdWxlTW5nX1N1Yk1lbnUnLCAnSW5jbHVkZV9BZG1pbl9BZGRtb2RzdWJtZW51Jyk7DQogICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0FkbWluX0NvbW1lbnRNbmdfU3ViTWVudScsICdJbmNsdWRlX0FkbWluX0FkZGNtdHN1Ym1lbnUnKTsNCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfTG9hZE1hbmFnZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwbmFtZSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog57uI5q2i6L+e5o6l77yM6YeK5pS+6LWE5rqQLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBUZXJtaW5hdGUoKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aGlzLT5pc2luaXRpYWxpemVkKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfVGVybWluYXRlJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAgICAgJGZwbmFtZSgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkdGhpcy0+Q2xvc2VDb25uZWN0KCk7DQogICAgICAgICAgICB1bnNldCgkdGhpcy0+ZGIpOw0KICAgICAgICAgICAgJHRoaXMtPmlzaW5pdGlhbGl6ZWQgPSBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi/nuaOpeaVsOaNruW6ky4NCiAgICAgKg0KICAgICAqIEB0aHJvd3MgRXhjZXB0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gT3BlbkNvbm5lY3QoKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aGlzLT5pc2Nvbm5lY3RlZCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCEkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10pIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHN3aXRjaCAoJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKSB7DQogICAgICAgICAgICBjYXNlICdzcWxpdGUnOg0KICAgICAgICAgICAgY2FzZSAnc3FsaXRlMyc6DQogICAgICAgICAgICBjYXNlICdwZG9fc3FsaXRlJzoNCiAgICAgICAgICAgICAgICAkdGhpcy0+ZGIgPSBzZWxmOjpJbml0aWFsaXplREIoJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKTsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmRiLT5PcGVuKGFycmF5KA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+dXNlcnNkaXIgLiAnZGF0YS8nIC4gJHRoaXMtPm9wdGlvblsnWkNfU1FMSVRFX05BTUUnXSwNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfU1FMSVRFX1BSRSddLA0KICAgICAgICAgICAgICAgICkpID09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5TaG93RXJyb3IoNjksIF9fRklMRV9fLCBfX0xJTkVfXyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAncGdzcWwnOg0KICAgICAgICAgICAgY2FzZSAncGRvX3Bnc3FsJzoNCiAgICAgICAgICAgICAgICAkdGhpcy0+ZGIgPSBzZWxmOjpJbml0aWFsaXplREIoJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddKTsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmRiLT5PcGVuKGFycmF5KA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9TRVJWRVInXSwNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfVVNFUk5BTUUnXSwNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfUEFTU1dPUkQnXSwNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfTkFNRSddLA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9QUkUnXSwNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfUEdTUUxfUE9SVCddLA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19QR1NRTF9QRVJTSVNURU5UJ10sDQogICAgICAgICAgICAgICAgKSkgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPlNob3dFcnJvcig2NywgX19GSUxFX18sIF9fTElORV9fKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICdteXNxbCc6DQogICAgICAgICAgICBjYXNlICdteXNxbGknOg0KICAgICAgICAgICAgY2FzZSAncGRvX215c3FsJzoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ1pDX0RBVEFCQVNFX1RZUEUnXSA9PSAnbXlzcWwnICYmIHZlcnNpb25fY29tcGFyZShQSFBfVkVSU0lPTiwgJzcuMC4wJykgPj0gMCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uX2xvYWRlZCgnbXlzcWxpJykpew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddID0gJ215c3FsaSc7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlaWYgKGV4dGVuc2lvbl9sb2FkZWQoJ3Bkb19teXNxbCcpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0RBVEFCQVNFX1RZUEUnXSA9ICdwZG9fbXlzcWwnOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICR0aGlzLT5kYiA9IHNlbGY6OkluaXRpYWxpemVEQigkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10pOw0KICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+ZGItPk9wZW4oYXJyYXkoDQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1NFUlZFUiddLA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9VU0VSTkFNRSddLA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9QQVNTV09SRCddLA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9OQU1FJ10sDQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BSRSddLA0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+b3B0aW9uWydaQ19NWVNRTF9QT1JUJ10sDQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX01ZU1FMX1BFUlNJU1RFTlQnXSwNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPm9wdGlvblsnWkNfTVlTUUxfRU5HSU5FJ10sDQogICAgICAgICAgICAgICAgKSkgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPlNob3dFcnJvcig2NywgX19GSUxFX18sIF9fTElORV9fKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCiAgICAgICAgLy8gdXRmOG1iNOaUr+aMgQ0KICAgICAgICBpZiAoJHRoaXMtPmRiLT50eXBlID09ICdteXNxbCcgJiYgdmVyc2lvbl9jb21wYXJlKCR0aGlzLT5kYi0+dmVyc2lvbiwgJzUuNS4zJykgPCAwKSB7DQogICAgICAgICAgICBBZGRfRmlsdGVyX1BsdWdpbignRmlsdGVyX1BsdWdpbl9EYlNxbF9GaWx0ZXInLCAndXRmODRtYl9maWx0ZXInKTsNCiAgICAgICAgICAgIEFkZF9GaWx0ZXJfUGx1Z2luKCdGaWx0ZXJfUGx1Z2luX0VkaXRfQmVnaW4nLCAndXRmODRtYl9maXhIdG1sU3BlY2lhbENoYXJzJyk7DQogICAgICAgIH0NCiAgICAgICAgJHRoaXMtPmlzY29ubmVjdGVkID0gdHJ1ZTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlr7nooajlkI3lkozmlbDmja7nu5PmnoTov5vooYzpooTovazmjaIuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENvbnZlcnRUYWJsZUFuZERhdGFpbmZvKCkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+ZGItPmRicHJlKSB7DQogICAgICAgICAgICAkdGhpcy0+dGFibGUgPSBzdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGItPmRicHJlLCAkdGhpcy0+dGFibGUpOw0KICAgICAgICB9DQogICAgICAgIGlmICgkdGhpcy0+ZGItPnR5cGUgPT09ICdwb3N0Z3Jlc3FsJykgew0KICAgICAgICAgICAgZm9yZWFjaCAoJHRoaXMtPmRhdGFpbmZvIGFzICRrZXkgPT4gJiR2YWx1ZSkgew0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2YWx1ZSBhcyAkazIgPT4gJiR2Mikgew0KICAgICAgICAgICAgICAgICAgICAkdjJbMF0gPSBzdHJ0b2xvd2VyKCR2MlswXSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5YWz6Zet5pWw5o2u5bqT6L+e5o6lLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDbG9zZUNvbm5lY3QoKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aGlzLT5pc2Nvbm5lY3RlZCkgew0KICAgICAgICAgICAgJHRoaXMtPmRiLT5DbG9zZSgpOw0KICAgICAgICAgICAgJHRoaXMtPmlzY29ubmVjdGVkID0gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlkK/nlKhzZXNzaW9uLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFN0YXJ0U2Vzc2lvbigpDQogICAgew0KICAgICAgICBpZiAoc2Vzc2lvbl9zdGF0dXMoKSA9PSAxKSB7DQogICAgICAgICAgICBzZXNzaW9uX3N0YXJ0KCk7DQogICAgICAgICAgICAkdGhpcy0+aXNzZXNzaW9uID0gdHJ1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog57uI5q2ic2Vzc2lvbi4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBFbmRTZXNzaW9uKCkNCiAgICB7DQogICAgICAgIGlmIChzZXNzaW9uX3N0YXR1cygpID09IDIpIHsNCiAgICAgICAgICAgIHNlc3Npb25fd3JpdGVfY2xvc2UoKTsNCiAgICAgICAgICAgICR0aGlzLT5pc3Nlc3Npb24gPSBmYWxzZTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTG9hZCBvciBSZUxvYWTmj5Lku7ZDb25maWdz6KGoLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkQ29uZmlncygpDQogICAgew0KICAgICAgICAkdGhpcy0+TG9hZENvbmZpZ3NPbmx5U3lzdGVtKHRydWUpOw0KICAgICAgICAkdGhpcy0+TG9hZENvbmZpZ3NPbmx5U3lzdGVtKGZhbHNlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXmj5Lku7ZDb25maWdz6KGoIE9ubHkgU3lzdGVtIE9wdGlvbi4NCiAgICAgKi8NCiAgICBwcml2YXRlICRwcnZDb25maWdMaXN0ID0gYXJyYXkoKTsNCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkQ29uZmlnc09ubHlTeXN0ZW0oJG9ubHlzeXN0ZW1vcHRpb24gPSB0cnVlKQ0KICAgIHsNCiAgICAgICAgaWYgKCRvbmx5c3lzdGVtb3B0aW9uID09IHRydWUpIHsNCiAgICAgICAgICAgICR0aGlzLT5jb25maWdzID0gYXJyYXkoKTsNCiAgICAgICAgICAgICR0aGlzLT5wcnZDb25maWdMaXN0ID0gYXJyYXkoKTsNCg0KICAgICAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydDb25maWcnXSwgJycsICcnLCAnJywgJycsICcnKTsNCiAgICAgICAgICAgIC8qIEB2YXIgQ29uZmlnW10gJGFycmF5ICovDQogICAgICAgICAgICAkdGhpcy0+cHJ2Q29uZmlnTGlzdCA9ICR0aGlzLT5HZXRMaXN0T3JpZ2luKCRzcWwpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHR5cGUgPSAnQ29uZmlnJzsNCg0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+cHJ2Q29uZmlnTGlzdCBhcyAkYykgew0KDQogICAgICAgICAgICAkbmFtZSA9ICRjWyR0aGlzLT5kYXRhaW5mb1snQ29uZmlnJ11bJ05hbWUnXVswXV07DQoNCg0KDQogICAgICAgICAgICBpZiAoKCRuYW1lID09ICdzeXN0ZW0nICYmICRvbmx5c3lzdGVtb3B0aW9uID09IHRydWUpIHx8ICgkbmFtZSAhPSAnc3lzdGVtJyAmJiAkb25seXN5c3RlbW9wdGlvbiA9PSBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgJGwgPSBuZXcgJHR5cGUoJG5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y29uZmlnc1skbmFtZV0gPSAkbDsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkbCA9ICR0aGlzLT5jb25maWdzWyRuYW1lXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGdldF9jbGFzcygkbCkgIT0gJHR5cGUpIHsNCiAgICAgICAgICAgICAgICAgICAgJGwgPSBuZXcgJHR5cGUoJG5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y29uZmlnc1skbmFtZV0gPSAkbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjWydjb25mX0tleSddKSAmJiAkY1snY29uZl9LZXknXSAhPSAnJykgew0KICAgICAgICAgICAgICAgICAgICAkbC0+TG9hZEluZm9CeUFzc29jU2luZ2xlV2l0aFByZSgkYyk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJGwtPkxvYWRJbmZvQnlBc3NvYygkYyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIC8v5bCG6K+75Ye65p2l55qE5pWw57uE5YaN5ou85oiQ5bqP5YiX5YyW5pWw5o2u5YaN5Y+N5bqP5YiX5YyWDQogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5jb25maWdzIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoaXNfb2JqZWN0KCR2YWx1ZSkgJiYgKCRrZXkgPT0gJ3N5c3RlbScgJiYgJG9ubHlzeXN0ZW1vcHRpb24gPT0gdHJ1ZSkgfHwgKCRrZXkgIT0gJ3N5c3RlbScgJiYgJG9ubHlzeXN0ZW1vcHRpb24gPT0gZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgJHZhbHVlLT5Mb2FkSW5mb0J5QXNzb2NTaW5nbGVXaXRoQWZ0ZXIoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkb25seXN5c3RlbW9wdGlvbiA9PSBmYWxzZSkgew0KICAgICAgICAgICAgJHRoaXMtPnBydkNvbmZpZ0xpc3QgPSBhcnJheSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5L+d5a2YQ29uZmlnc+ihqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgQ29uZmlnc+ihqOWQjQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNhdmVDb25maWcoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5jb25maWdzWyRuYW1lXS0+U2F2ZSgpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpENvbmZpZ3PooaguDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lIENvbmZpZ3PooajlkI0NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBEZWxDb25maWcoJG5hbWUpDQogICAgew0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5jb25maWdzWyRuYW1lXS0+RGVsZXRlKCk7DQogICAgICAgIHVuc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+WQ29uZmlnc+ihqOWAvA0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSBDb25maWdz6KGo5ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENvbmZpZygkbmFtZSkNCiAgICB7DQogICAgICAgIGlmICghaXNzZXQoJHRoaXMtPmNvbmZpZ3NbJG5hbWVdKSkgew0KICAgICAgICAgICAgJG5hbWUgPSBGaWx0ZXJDb3JyZWN0TmFtZSgkbmFtZSk7DQogICAgICAgICAgICBpZiAoISRuYW1lKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkdGhpcy0+Y29uZmlnc1skbmFtZV0gPSBuZXcgQ29uZmlnKCRuYW1lKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+Y29uZmlnc1skbmFtZV07DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p+l5p+QQ29uZmln5piv5ZCm5a2Y5ZyoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSBDb25maWdz6KGo5ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gSGFzQ29uZmlnKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGlzc2V0KCR0aGlzLT5jb25maWdzWyRuYW1lXSkgJiYgJHRoaXMtPmNvbmZpZ3NbJG5hbWVdLT5Db3VudEl0ZW0oKSA+IDA7DQogICAgfQ0KDQogICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiAgICAvL0NhY2hl55u45YWzDQogICAgcHJpdmF0ZSAkY2FjaGVfaGFzaCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiDkv53lrZjnvJPlrZguDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2F2ZUNhY2hlKCkNCiAgICB7DQogICAgICAgIC8vJHM9JHRoaXMtPnVzZXJzZGlyIC4gJ2NhY2hlLycgLiAkdGhpcy0+Z3VpZCAuICcuY2FjaGUnOw0KICAgICAgICAvLyRjPXNlcmlhbGl6ZSgkdGhpcy0+Y2FjaGUpOw0KICAgICAgICAvL0BmaWxlX3B1dF9jb250ZW50cygkcywgJGMpOw0KICAgICAgICAvLyR0aGlzLT5jb25maWdzWydjYWNoZSddPSR0aGlzLT5jYWNoZTsNCiAgICAgICAgJG5ld19oYXNoID0gbWQ1KCR0aGlzLT5Db25maWcoJ2NhY2hlJykpOw0KICAgICAgICBpZiAoJHRoaXMtPmNhY2hlX2hhc2ggPT0gJG5ld19oYXNoKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5TYXZlQ29uZmlnKCdjYWNoZScpOw0KICAgICAgICAkdGhpcy0+Y2FjaGVfaGFzaCA9ICRuZXdfaGFzaDsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDliqDovb3nvJPlrZguDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZENhY2hlKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5jYWNoZSA9ICR0aGlzLT5Db25maWcoJ2NhY2hlJyk7DQogICAgICAgICR0aGlzLT5jYWNoZV9oYXNoID0gbWQ1KCR0aGlzLT5Db25maWcoJ2NhY2hlJykpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS/neWtmOmFjee9ri4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTYXZlT3B0aW9uKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0JMT0dfQ0xTSUQnXSA9ICR0aGlzLT5ndWlkOw0KDQogICAgICAgIHVuc2V0KCR0aGlzLT5vcHRpb25bJ1pDX1BFUk1BTkVOVF9ET01BSU5fV0hPTEVfRElTQUJMRSddKTsNCiAgICAgICAgdW5zZXQoJHRoaXMtPm9wdGlvblsnWkNfUEVSTUFORU5UX0RPTUFJTl9GT1JDRURfVVJMJ10pOw0KDQogICAgICAgICRzID0gJ1pDX0RBVEFCQVNFX1RZUEV8WkNfU1FMSVRFX05BTUV8WkNfU1FMSVRFX1BSRXxaQ19NWVNRTF9TRVJWRVJ8WkNfTVlTUUxfVVNFUk5BTUV8WkNfTVlTUUxfUEFTU1dPUkR8WkNfTVlTUUxfTkFNRXxaQ19NWVNRTF9DSEFSU0VUfFpDX01ZU1FMX0NPTExBVEV8WkNfTVlTUUxfUFJFfFpDX01ZU1FMX0VOR0lORXxaQ19NWVNRTF9QT1JUfFpDX01ZU1FMX1BFUlNJU1RFTlR8WkNfTVlTUUxfUE9SVHxaQ19QR1NRTF9TRVJWRVJ8WkNfUEdTUUxfVVNFUk5BTUV8WkNfUEdTUUxfUEFTU1dPUkR8WkNfUEdTUUxfTkFNRXxaQ19QR1NRTF9DSEFSU0VUfFpDX1BHU1FMX1BSRXxaQ19QR1NRTF9QT1JUfFpDX1BHU1FMX1BFUlNJU1RFTlR8WkNfQ0xPU0VfV0hPTEVfU0lURXxaQ19QRVJNQU5FTlRfRE9NQUlOX0ZPUkNFRF9VUkx8WkNfUEVSTUFORU5UX0RPTUFJTl9XSE9MRV9ESVNBQkxFJzsNCiAgICAgICAgJHJlc2VydmVfa2V5cyA9IGV4cGxvZGUoJ3wnLCAkcyk7DQoNCiAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCR0aGlzLT51c2Vyc2RpciAuICdjX29wdGlvbi5waHAnKSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgJHMgPSAiPCIgLiAiPyIgLiAicGhwXHJcbiI7DQogICAgICAgICAgICAkcyAuPSAicmV0dXJuICI7DQogICAgICAgICAgICAkb3B0aW9uID0gYXJyYXkoKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCR0aGlzLT5vcHRpb24gYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgICAgICBpZiAoKCRrZXkgPT0gJ1pDX0RBVEFCQVNFX1RZUEUnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfU1FMSVRFX05BTUUnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfU1FMSVRFX1BSRScpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9TRVJWRVInKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfTVlTUUxfVVNFUk5BTUUnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfTVlTUUxfUEFTU1dPUkQnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfTVlTUUxfTkFNRScpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9DSEFSU0VUJykgfHwNCiAgICAgICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX01ZU1FMX1BSRScpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9FTkdJTkUnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfTVlTUUxfUE9SVCcpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9QRVJTSVNURU5UJykgfHwNCiAgICAgICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX1NFUlZFUicpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19QR1NRTF9VU0VSTkFNRScpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19QR1NRTF9QQVNTV09SRCcpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19QR1NRTF9OQU1FJykgfHwNCiAgICAgICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX0NIQVJTRVQnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfUEdTUUxfUFJFJykgfHwNCiAgICAgICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX1BPUlQnKSB8fA0KICAgICAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfUEdTUUxfUEVSU0lTVEVOVCcpIHx8DQogICAgICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19DTE9TRV9XSE9MRV9TSVRFJykNCiAgICAgICAgICAgICAgICApIHsNCiAgICAgICAgICAgICAgICAgICAgJG9wdGlvblska2V5XSA9ICR2YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgJHJlc2VydmVfa2V5c1tdID0gJGtleTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkcyAuPSB2YXJfZXhwb3J0KCRvcHRpb24sIHRydWUpOw0KICAgICAgICAgICAgJHMgLj0gIjsiOw0KICAgICAgICAgICAgQGZpbGVfcHV0X2NvbnRlbnRzKCR0aGlzLT51c2Vyc2RpciAuICdjX29wdGlvbi5waHAnLCAkcyk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+b3B0aW9uIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAkdGhpcy0+Q29uZmlnKCdzeXN0ZW0nKS0+JGtleSA9ICR2YWx1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCRyZXNlcnZlX2tleXMgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgICR0aGlzLT5Db25maWcoJ3N5c3RlbScpLT5EZWxLZXkoJHZhbHVlKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5Db25maWcoJ3N5c3RlbScpLT5aQ19CTE9HX0hPU1QgPSBjaHVua19zcGxpdCgkdGhpcy0+Q29uZmlnKCdzeXN0ZW0nKS0+WkNfQkxPR19IT1NULCAxLCAifCIpOw0KDQogICAgICAgICR0aGlzLT5TYXZlQ29uZmlnKCdzeXN0ZW0nKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXphY3nva4uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZE9wdGlvbigpDQogICAgew0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+Q29uZmlnKCdzeXN0ZW0nKS0+R2V0RGF0YSgpOw0KDQogICAgICAgIGlmIChlbXB0eSgkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgLy9pZigka2V5PT0nWkNfUEVSTUFORU5UX0RPTUFJTl9FTkFCTEUnKWNvbnRpbnVlOw0KICAgICAgICAgICAgLy9pZigka2V5PT0nWkNfQkxPR19IT1NUJyljb250aW51ZTsNCiAgICAgICAgICAgIC8vaWYoJGtleT09J1pDX0JMT0dfQ0xTSUQnKWNvbnRpbnVlOw0KICAgICAgICAgICAgLy9pZigka2V5PT0nWkNfQkxPR19MQU5HVUFHRVBBQ0snKWNvbnRpbnVlOw0KICAgICAgICAgICAgaWYgKCRrZXkgPT0gJ1pDX0JMT0dfSE9TVCcpIHsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSBzdHJfcmVwbGFjZSgnfCcsICcnLCAkdmFsdWUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoKCRrZXkgPT0gJ1pDX0RBVEFCQVNFX1RZUEUnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19TUUxJVEVfTkFNRScpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1NRTElURV9QUkUnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9TRVJWRVInKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9VU0VSTkFNRScpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX01ZU1FMX1BBU1NXT1JEJykgfHwNCiAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfTVlTUUxfTkFNRScpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX01ZU1FMX0NIQVJTRVQnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9QUkUnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9FTkdJTkUnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19NWVNRTF9QT1JUJykgfHwNCiAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfTVlTUUxfUEVSU0lTVEVOVCcpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX1NFUlZFUicpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX1VTRVJOQU1FJykgfHwNCiAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfUEdTUUxfUEFTU1dPUkQnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19QR1NRTF9OQU1FJykgfHwNCiAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfUEdTUUxfQ0hBUlNFVCcpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX1BSRScpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BHU1FMX1BPUlQnKSB8fA0KICAgICAgICAgICAgICAgICgka2V5ID09ICdaQ19QR1NRTF9QRVJTSVNURU5UJykgfHwNCiAgICAgICAgICAgICAgICAoJGtleSA9PSAnWkNfQ0xPU0VfV0hPTEVfU0lURScpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BFUk1BTkVOVF9ET01BSU5fV0hPTEVfRElTQUJMRScpIHx8DQogICAgICAgICAgICAgICAgKCRrZXkgPT0gJ1pDX1BFUk1BTkVOVF9ET01BSU5fRk9SQ0VEX1VSTCcpDQogICAgICAgICAgICApIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHRoaXMtPm9wdGlvblska2V5XSA9ICR2YWx1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWV4dGVuc2lvbl9sb2FkZWQoJ2dkJykpIHsNCiAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ1pDX0NPTU1FTlRfVkVSSUZZX0VOQUJMRSddID0gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4Hmk43kvZzmnYPpmZAuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAkYWN0aW9uIOaTjeS9nA0KICAgICAqIEBwYXJhbSBpbnR8c3RyaW5nICRsZXZlbA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrUmlnaHRzKCRhY3Rpb24sICRsZXZlbCA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoJGxldmVsID09PSBudWxsKSB7DQogICAgICAgICAgICAkbGV2ZWwgPSAkdGhpcy0+dXNlci0+TGV2ZWw7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfQ2hlY2tSaWdodHMnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGFjdGlvbiwgJGxldmVsKTsNCiAgICAgICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+YWN0aW9uc1skYWN0aW9uXSkpIHsNCiAgICAgICAgICAgIGlmIChpc19udW1lcmljKCRhY3Rpb24pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICRsZXZlbCA8PSAkYWN0aW9uOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGxldmVsIDw9ICR0aGlzLT5hY3Rpb25zWyRhY3Rpb25dOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOagueaNrueUqOaIt+etiee6p+mqjOivgeaTjeS9nOadg+mZkCAxLjXlvIDlp4vlj4LmlbDmjaLpobrluo8uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhY3Rpb24g5pON5L2cDQogICAgICogQHBhcmFtIGludCAgICAkbGV2ZWwgIOeUqOaIt+etiee6pw0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrUmlnaHRzQnlMZXZlbCgkYWN0aW9uLCAkbGV2ZWwpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkNoZWNrUmlnaHRzKCRhY3Rpb24sICRsZXZlbCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2VLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZlcmlmeSgpDQogICAgew0KICAgICAgICAkdXNlcm5hbWUgPSB0cmltKEdldFZhcnMoJ3VzZXJuYW1lJywgJ0NPT0tJRScpKTsNCiAgICAgICAgJHRva2VuID0gdHJpbShHZXRWYXJzKCd0b2tlbicsICdDT09LSUUnKSk7DQogICAgICAgICR1c2VyID0gJHRoaXMtPlZlcmlmeVVzZXJUb2tlbigkdG9rZW4sICR1c2VybmFtZSk7DQogICAgICAgIGlmICghaXNfbnVsbCgkdXNlcikpIHsNCiAgICAgICAgICAgICR0aGlzLT51c2VyID0gJHVzZXI7DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgICR0aGlzLT51c2VyID0gbmV3IE1lbWJlcigpOw0KICAgICAgICAkdGhpcy0+dXNlci0+R3VpZCA9IEdldEd1aWQoKTsNCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L+U5Zue55m75b2V5oiQ5Yqf5ZCO5bqU5L+d5a2Y55qEY29va2ll5L+h5oGvLg0KICAgICAqDQogICAgICogQHBhcmFtIE1lbWJlciAkbSDlt7Lpqozov4fmiJDlip/nmoRtZW1iZXINCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZlcmlmeVJlc3VsdCgkbSkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2VuZXJhdGVVc2VyVG9rZW4oJG0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOeUn+aIkFVzZXIgVG9rZW7vvIznlKjkuo7nmbvlvZXpqozor4ENCiAgICAgKg0KICAgICAqIEBwYXJhbSBNZW1iZXIgJHVzZXINCiAgICAgKiBAcGFyYW0gaW50ICAgICR0aW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZW5lcmF0ZVVzZXJUb2tlbigkdXNlciwgJHRpbWUgPSAwKQ0KICAgIHsNCiAgICAgICAgaWYgKCR0aW1lID09PSAwKSB7DQogICAgICAgICAgICAkdGltZSA9IHRpbWUoKSArIDM2MDAgKiAyNDsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBDcmVhdGVXZWJUb2tlbigkdXNlci0+SUQsICR0aW1lLCAkdXNlci0+R3VpZCwgJHVzZXItPlBhc3NXb3JkX01ENVBhdGgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgeeUqOaIt+eZu+W9lVRva2VuLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdG9rZW4NCiAgICAgKiBAcGFyYW0gc3RyaW5nICR1c2VybmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBNZW1iZXINCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5VXNlclRva2VuKCR0b2tlbiwgJHVzZXJuYW1lKQ0KICAgIHsNCiAgICAgICAgJHVzZXIgPSAkdGhpcy0+R2V0TWVtYmVyQnlOYW1lKCR1c2VybmFtZSk7DQogICAgICAgIGlmICgkdXNlci0+SUQgPiAwKSB7DQogICAgICAgICAgICBpZiAoVmVyaWZ5V2ViVG9rZW4oJHRva2VuLCAkdXNlci0+SUQsICR1c2VyLT5HdWlkLCAkdXNlci0+UGFzc1dvcmRfTUQ1UGF0aCkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHVzZXI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4HnlKjmiLfnmbvlvZXvvIjkuIDmrKFNRDXlr4bnoIHvvIkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lICAg55So5oi35ZCNDQogICAgICogQHBhcmFtIHN0cmluZyAkbWQ1cHcgIG1kNeWKoOWvhuWQjueahOWvhueggQ0KICAgICAqIEBwYXJhbSBNZW1iZXIgJG1lbWJlciDov5Tlm57or7vlj5bmiJDlip/nmoRtZW1iZXLlr7nosaENCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWZXJpZnlfTUQ1KCRuYW1lLCAkbWQ1cHcsICYkbWVtYmVyKQ0KICAgIHsNCiAgICAgICAgaWYgKCRuYW1lID09ICcnIHx8ICRtZDVwdyA9PSAnJykgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgICRtZW1iZXIgPSAkdGhpcy0+R2V0TWVtYmVyQnlOYW1lKCRuYW1lKTsNCiAgICAgICAgaWYgKCRtZW1iZXItPklEID4gMCkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5WZXJpZnlfRmluYWwoJG5hbWUsIG1kNSgkbWQ1cHcgLiAkbWVtYmVyLT5HdWlkKSwgJG1lbWJlcik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2V77yI5Y6f5aeL5piO5paH5a+G56CB77yJLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSAgICAgICDnlKjmiLflkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRvcmlnaW5hbHB3IOWvhueggeaYjuaWhw0KICAgICAqIEBwYXJhbSBNZW1iZXIgJG1lbWJlciAgICAg6L+U5Zue6K+75Y+W5oiQ5Yqf55qEbWVtYmVy5a+56LGhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5X09yaWdpbmFsKCRuYW1lLCAkb3JpZ2luYWxwdywgJiRtZW1iZXIgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgaWYgKCRuYW1lID09ICcnIHx8ICRvcmlnaW5hbHB3ID09ICcnKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgJG0gPSAkdGhpcy0+R2V0TWVtYmVyQnlOYW1lKCRuYW1lKTsNCiAgICAgICAgaWYgKCRtLT5JRCA+IDApIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+VmVyaWZ5X01ENSgkbmFtZSwgbWQ1KCRvcmlnaW5hbHB3KSwgJG1lbWJlcik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2V77yI5pWw5o2u5bqT5L+d5a2Y55qE5pyA57uI6L+Q566X5ZCO5a+G56CB77yJLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSAgICAg55So5oi35ZCNDQogICAgICogQHBhcmFtIHN0cmluZyAkcGFzc3dvcmQg5LqM5qyh5Yqg5a+G5ZCO55qE5a+G56CBDQogICAgICogQHBhcmFtIG9iamVjdCAkbWVtYmVyICAg6L+U5Zue6K+75Y+W5oiQ5Yqf55qEbWVtYmVy5a+56LGhDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmVyaWZ5X0ZpbmFsKCRuYW1lLCAkcGFzc3dvcmQsICYkbWVtYmVyID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmICgkbmFtZSA9PSAnJyB8fCAkcGFzc3dvcmQgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWUoJG5hbWUpOw0KICAgICAgICBpZiAoJG0tPklEID4gMCkgew0KICAgICAgICAgICAgaWYgKHN0cmNhc2VjbXAoJG0tPlBhc3N3b3JkLCAkcGFzc3dvcmQpID09IDApIHsNCiAgICAgICAgICAgICAgICAkbWVtYmVyID0gJG07DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4HnlKjmiLfnmbvlvZXvvIjkvb/nlKhUb2tlbu+8jOabv+S7o+WvhueggeS/neWtmO+8iS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgICDnlKjmiLflkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICR3dCAgICAgV2ViVG9rZW4NCiAgICAgKiBAcGFyYW0gc3RyaW5nICR3dF9pZCAgV2ViVG9rZW7nmoRJROivhuWIq+espg0KICAgICAqIEBwYXJhbSBvYmplY3QgJG1lbWJlciDov5Tlm57or7vlj5bmiJDlip/nmoRtZW1iZXLlr7nosaENCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWZXJpZnlfVG9rZW4oJG5hbWUsICR3dCwgJHd0X2lkLCAmJG1lbWJlciA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoJG5hbWUgPT0gJycgfHwgJHd0ID09ICcnKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgJG0gPSBudWxsOw0KICAgICAgICAkbSA9ICR0aGlzLT5HZXRNZW1iZXJCeU5hbWUoJG5hbWUpOw0KICAgICAgICBpZiAoJG0tPklEID4gMCkgew0KICAgICAgICAgICAgaWYgKFZlcmlmeVdlYlRva2VuKCR3dCwgJHd0X2lkLCAkdGhpcy0+Z3VpZCwgJG0tPklELCAkbS0+UGFzc3dvcmQpID09PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgJG1lbWJlciA9ICRtOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl55So5oi35YiX6KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIGludCAkbGV2ZWwg55So5oi3562J57qnDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZE1lbWJlcnMoJGxldmVsID0gMCkNCiAgICB7DQogICAgICAgIGlmICgkbGV2ZWwgPCAwKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkd2hlcmUgPSBudWxsOw0KICAgICAgICBpZiAoJGxldmVsID4gMCkgew0KICAgICAgICAgICAgJHdoZXJlID0gYXJyYXkoYXJyYXkoJzw9JywgJ21lbV9MZXZlbCcsICRsZXZlbCkpOw0KICAgICAgICB9DQogICAgICAgICR0aGlzLT5tZW1iZXJzID0gYXJyYXkoKTsNCiAgICAgICAgJHRoaXMtPm1lbWJlcnNieW5hbWUgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TWVtYmVyTGlzdChudWxsLCAkd2hlcmUpOw0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJG0pIHsNCiAgICAgICAgICAgICR0aGlzLT5tZW1iZXJzWyRtLT5JRF0gPSAkbTsNCiAgICAgICAgICAgICR0aGlzLT5tZW1iZXJzYnluYW1lWyRtLT5OYW1lXSA9ICYkdGhpcy0+bWVtYmVyc1skbS0+SURdOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl5YiG57G75YiX6KGoLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRDYXRlZ29yaWVzKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5jYXRlZ29yaWVzID0gYXJyYXkoKTsNCiAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyID0gYXJyYXkoKTsNCiAgICAgICAgJGx2MCA9IGFycmF5KCk7DQogICAgICAgICRsdjEgPSBhcnJheSgpOw0KICAgICAgICAkbHYyID0gYXJyYXkoKTsNCiAgICAgICAgJGx2MyA9IGFycmF5KCk7DQogICAgICAgICRhcnJheSA9ICR0aGlzLT5HZXRDYXRlZ29yeUxpc3QobnVsbCwgbnVsbCwgYXJyYXkoJ2NhdGVfT3JkZXInID0+ICdBU0MnKSwgbnVsbCwgbnVsbCk7DQogICAgICAgIGlmIChjb3VudCgkYXJyYXkpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYykgew0KICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNbJGMtPklEXSA9ICRjOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yZWFjaCAoJHRoaXMtPmNhdGVnb3JpZXMgYXMgJGlkID0+ICRjKSB7DQogICAgICAgICAgICAkbCA9ICdsdicgLiAkYy0+TGV2ZWw7DQogICAgICAgICAgICAkeyRsfVskYy0+UGFyZW50SURdW10gPSAkaWQ7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWlzX2FycmF5KCRsdjBbMF0pKSB7DQogICAgICAgICAgICAkbHYwWzBdID0gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qDQogICAgICAgICAqIOS7peS4i+Weg+WcvuS7o+egge+8jOW/hemhu+mHjeaehO+8gQ0KICAgICAgICAgKi8NCiAgICAgICAgZm9yZWFjaCAoJGx2MFswXSBhcyAkaWQwKSB7DQogICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc2J5b3JkZXJbJGlkMF0gPSAmJHRoaXMtPmNhdGVnb3JpZXNbJGlkMF07DQogICAgICAgICAgICBpZiAoIWlzc2V0KCRsdjFbJGlkMF0pKSB7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmb3JlYWNoICgkbHYxWyRpZDBdIGFzICRpZDEpIHsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNhdGVnb3JpZXNbJGlkMV0tPlBhcmVudElEID09ICRpZDApIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNbJGlkMV0tPlJvb3RJRCA9ICRpZDA7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzWyRpZDBdLT5TdWJDYXRlZ29yaWVzW10gPSAkdGhpcy0+Y2F0ZWdvcmllc1skaWQxXTsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNbJGlkMF0tPkNoaWxkcmVuQ2F0ZWdvcmllc1tdID0gJHRoaXMtPmNhdGVnb3JpZXNbJGlkMV07DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzYnlvcmRlclskaWQxXSA9ICYkdGhpcy0+Y2F0ZWdvcmllc1skaWQxXTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc3NldCgkbHYyWyRpZDFdKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGx2MlskaWQxXSBhcyAkaWQyKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNhdGVnb3JpZXNbJGlkMl0tPlBhcmVudElEID09ICRpZDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc1skaWQyXS0+Um9vdElEID0gJGlkMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc1skaWQwXS0+Q2hpbGRyZW5DYXRlZ29yaWVzW10gPSAkdGhpcy0+Y2F0ZWdvcmllc1skaWQyXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc1skaWQxXS0+U3ViQ2F0ZWdvcmllc1tdID0gJHRoaXMtPmNhdGVnb3JpZXNbJGlkMl07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNbJGlkMV0tPkNoaWxkcmVuQ2F0ZWdvcmllc1tdID0gJHRoaXMtPmNhdGVnb3JpZXNbJGlkMl07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyWyRpZDJdID0gJiR0aGlzLT5jYXRlZ29yaWVzWyRpZDJdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJGx2M1skaWQyXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRsdjNbJGlkMl0gYXMgJGlkMykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNhdGVnb3JpZXNbJGlkM10tPlBhcmVudElEID09ICRpZDIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzWyRpZDNdLT5Sb290SUQgPSAkaWQwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNbJGlkMF0tPkNoaWxkcmVuQ2F0ZWdvcmllc1tdID0gJHRoaXMtPmNhdGVnb3JpZXNbJGlkM107DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y2F0ZWdvcmllc1skaWQxXS0+Q2hpbGRyZW5DYXRlZ29yaWVzW10gPSAkdGhpcy0+Y2F0ZWdvcmllc1skaWQzXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzWyRpZDJdLT5TdWJDYXRlZ29yaWVzW10gPSAkdGhpcy0+Y2F0ZWdvcmllc1skaWQzXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5jYXRlZ29yaWVzWyRpZDJdLT5DaGlsZHJlbkNhdGVnb3JpZXNbXSA9ICR0aGlzLT5jYXRlZ29yaWVzWyRpZDNdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNhdGVnb3JpZXNieW9yZGVyWyRpZDNdID0gJiR0aGlzLT5jYXRlZ29yaWVzWyRpZDNdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl5qCH562+5YiX6KGoLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRUYWdzKCkNCiAgICB7DQogICAgICAgICR0aGlzLT50YWdzID0gYXJyYXkoKTsNCiAgICAgICAgJHRoaXMtPnRhZ3NieW5hbWUgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0VGFnTGlzdCgpOw0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJHQpIHsNCiAgICAgICAgICAgICR0aGlzLT50YWdzWyR0LT5JRF0gPSAkdDsNCiAgICAgICAgICAgICR0aGlzLT50YWdzYnluYW1lWyR0LT5OYW1lXSA9ICYkdGhpcy0+dGFnc1skdC0+SURdOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6L295YWl5qih5Z2X5YiX6KGoLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRNb2R1bGVzKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5tb2R1bGVzID0gYXJyYXkoKTsNCiAgICAgICAgJHRoaXMtPm1vZHVsZXNieWZpbGVuYW1lID0gYXJyYXkoKTsNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldE1vZHVsZUxpc3QoKTsNCiAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRtKSB7DQogICAgICAgICAgICAkdGhpcy0+bW9kdWxlc1tdID0gJG07DQogICAgICAgICAgICAkdGhpcy0+bW9kdWxlc2J5ZmlsZW5hbWVbJG0tPkZpbGVOYW1lXSA9ICRtOw0KICAgICAgICB9DQoNCiAgICAgICAgJGRpciA9ICR0aGlzLT51c2Vyc2RpciAuICd0aGVtZS8nIC4gJHRoaXMtPnRoZW1lIC4gJy9pbmNsdWRlLyc7DQogICAgICAgIGlmIChmaWxlX2V4aXN0cygkZGlyKSkgew0KICAgICAgICAgICAgJGZpbGVzID0gR2V0RmlsZXNJbkRpcigkZGlyLCAncGhwJyk7DQogICAgICAgICAgICBmb3JlYWNoICgkZmlsZXMgYXMgJHNvcnRuYW1lID0+ICRmdWxsbmFtZSkgew0KICAgICAgICAgICAgICAgICRtID0gbmV3IE1vZHVsZSgpOw0KICAgICAgICAgICAgICAgICRtLT5GaWxlTmFtZSA9ICRzb3J0bmFtZTsNCiAgICAgICAgICAgICAgICAkbS0+TmFtZSA9ICRtLT5GaWxlTmFtZTsNCiAgICAgICAgICAgICAgICAkbS0+SHRtbElEID0gJG0tPkZpbGVOYW1lOw0KICAgICAgICAgICAgICAgICRtLT5Db250ZW50ID0gZmlsZV9nZXRfY29udGVudHMoJGZ1bGxuYW1lKTsNCiAgICAgICAgICAgICAgICBpZiAoIHN0cmlwb3MoJG0tPkNvbnRlbnQsJzxsaScpICE9PSBmYWxzZSAmJiBzdHJpcG9zKCRtLT5Db250ZW50LCc8L2xpPicpICE9PSBmYWxzZSApIHsNCiAgICAgICAgICAgICAgICAgICAgJG0tPlR5cGUgPSAndWwnOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICRtLT5UeXBlID0gJ2Rpdic7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRtLT5Tb3VyY2UgPSAndGhlbWVpbmNsdWRlXycgLiAkdGhpcy0+dGhlbWU7Ow0KICAgICAgICAgICAgICAgICRtLT5Jc0luY2x1ZGVGaWxlID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bW9kdWxlc1tdID0gJG07DQogICAgICAgICAgICAgICAgJHRoaXMtPm1vZHVsZXNieWZpbGVuYW1lWyRtLT5GaWxlTmFtZV0gPSAkbTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeS4u+mimOWIl+ihqC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQXBwW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZFRoZW1lcygpDQogICAgew0KICAgICAgICAkYWxsVGhlbWVzID0gYXJyYXkoKTsNCiAgICAgICAgJGRpcnMgPSBHZXREaXJzSW5EaXIoJHRoaXMtPnVzZXJzZGlyIC4gJ3RoZW1lLycpOw0KICAgICAgICBuYXRjYXNlc29ydCgkZGlycyk7DQogICAgICAgIGFycmF5X3Vuc2hpZnQoJGRpcnMsICR0aGlzLT50aGVtZSk7DQogICAgICAgICRkaXJzID0gYXJyYXlfdW5pcXVlKCRkaXJzKTsNCiAgICAgICAgZm9yZWFjaCAoJGRpcnMgYXMgJGlkKSB7DQogICAgICAgICAgICAkYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICAgICAgaWYgKCRhcHAtPkxvYWRJbmZvQnlYbWwoJ3RoZW1lJywgJGlkKSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgJGFsbFRoZW1lc1tdID0gJGFwcDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYWxsVGhlbWVzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeaPkuS7tuWIl+ihqC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQXBwW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gTG9hZFBsdWdpbnMoKQ0KICAgIHsNCiAgICAgICAgJGFsbFBsdWdpbnMgPSBhcnJheSgpOw0KICAgICAgICAkZGlycyA9IEdldERpcnNJbkRpcigkdGhpcy0+dXNlcnNkaXIgLiAncGx1Z2luLycpOw0KICAgICAgICBuYXRjYXNlc29ydCgkZGlycyk7DQoNCiAgICAgICAgZm9yZWFjaCAoJGRpcnMgYXMgJGlkKSB7DQogICAgICAgICAgICAkYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICAgICAgaWYgKCRhcHAtPkxvYWRJbmZvQnlYbWwoJ3BsdWdpbicsICRpZCkgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICRhbGxQbHVnaW5zW10gPSAkYXBwOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhbGxQbHVnaW5zOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOi9veWFpeaMh+WumuW6lOeUqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUg5bqU55So57G75Z6LKHRoZW1lfHBsdWdpbikNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZCAgIOW6lOeUqElEDQogICAgICoNCiAgICAgKiBAcmV0dXJuIEFwcA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkQXBwKCR0eXBlLCAkaWQpDQogICAgew0KICAgICAgICAkYXBwID0gbmV3IEFwcCgpOw0KICAgICAgICBpZiAoJGFwcC0+TG9hZEluZm9CeVhtbCgkdHlwZSwgJGlkKSAhPSB0cnVlKSB7DQogICAgICAgICAgICAkYXBwLT5pc2xvYWRlZCA9IGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcHA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5p+l5bqU55So5piv5ZCm5a6J6KOF5bm25ZCv55SoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZSDlupTnlKjvvIjmj5Lku7bmiJbkuLvpopjvvInnmoRJRA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrUGx1Z2luKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGluX2FycmF5KCRuYW1lLCAkdGhpcy0+YWN0aXZlZGFwcHMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeW6lOeUqOaYr+WQpuWuieijheW5tuWQr+eUqC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUg5bqU55SoSUTvvIjmj5Lku7bmiJbkuLvpopjvvIkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja0FwcCgkbmFtZSkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+Q2hlY2tQbHVnaW4oJG5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPlumihOa/gOa0u+aPkuS7tuWQjeaVsOe7hC4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UHJlQWN0aXZlUGx1Z2luKCkNCiAgICB7DQogICAgICAgICRhcCA9IGV4cGxvZGUoInwiLCAkdGhpcy0+b3B0aW9uWydaQ19VU0lOR19QTFVHSU5fTElTVCddKTsNCiAgICAgICAgJGFwID0gYXJyYXlfdW5pcXVlKCRhcCk7DQoNCiAgICAgICAgcmV0dXJuICRhcDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDovb3lhaXmjIflrprlupTnlKjor63oqIDljIUuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0eXBlICAgIOW6lOeUqOexu+WeiyhzeXN0ZW18dGhlbWV8cGx1Z2luKQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGlkICAgICAg5bqU55SoSUQNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRkZWZhdWx0IOm7mOiupOivreiogA0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkTGFuZ3VhZ2UoJHR5cGUsICRpZCwgJGRlZmF1bHQgPSAnJykNCiAgICB7DQogICAgICAgICRsYW5ndWFnZVBhdGggPSAkdGhpcy0+cGF0aDsNCiAgICAgICAgJGxhbmd1YWdlUmVnRXggPSAnL14oWzAtOUEtWlwtX10qKVwucGhwJC91aSc7DQogICAgICAgICRsYW5ndWFnZUxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkbGFuZ3VhZ2UgPSAnJzsNCiAgICAgICAgJGRlZmF1bHQgPSBzdHJfcmVwbGFjZShhcnJheSgnLycsICdcXCcpLCAnJywgJGRlZmF1bHQpOw0KICAgICAgICAkbGFuZ3VhZ2VQdHIgPSAmJHRoaXMtPmxhbmc7DQoNCiAgICAgICAgaWYgKCRkZWZhdWx0ID09PSAnJykgew0KICAgICAgICAgICAgJGRlZmF1bHQgPSAkdGhpcy0+b3B0aW9uWydaQ19CTE9HX0xBTkdVQUdFUEFDSyddOw0KICAgICAgICB9DQoNCiAgICAgICAgJGRlZmF1bHRMYW5ndWFnZUxpc3QgPSBhcnJheSgkZGVmYXVsdCwgJ3poLWNuJywgJ3poLXR3JywgJ2VuJyk7DQoNCiAgICAgICAgc3dpdGNoICgkdHlwZSkgew0KICAgICAgICAgICAgY2FzZSAnc3lzdGVtJzoNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2VQYXRoIC49ICd6Yl91c2Vycy9sYW5ndWFnZS8nOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAncGx1Z2luJzoNCiAgICAgICAgICAgIGNhc2UgJ3RoZW1lJzoNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2VQYXRoIC49ICd6Yl91c2Vycy8nIC4gJHR5cGUgLiAnLycgLiAkaWQgLiAnL2xhbmd1YWdlLyc7DQogICAgICAgICAgICAgICAgJGxhbmd1YWdlUHRyID0gJiR0aGlzLT5sYW5nWyRpZF07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICRsYW5ndWFnZVBhdGggLj0gJHR5cGUgLiAnL2xhbmd1YWdlLyc7DQogICAgICAgICAgICAgICAgJGxhbmd1YWdlUHRyID0gJiR0aGlzLT5sYW5nWyRpZF07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCg0KICAgICAgICAkaGFuZGxlID0gQG9wZW5kaXIoJGxhbmd1YWdlUGF0aCk7DQogICAgICAgICRtYXRjaCA9IG51bGw7DQogICAgICAgIGlmICgkaGFuZGxlKSB7DQogICAgICAgICAgICB3aGlsZSAoZmFsc2UgIT09ICgkZmlsZSA9IHJlYWRkaXIoJGhhbmRsZSkpKSB7DQogICAgICAgICAgICAgICAgaWYgKHByZWdfbWF0Y2goJGxhbmd1YWdlUmVnRXgsICRmaWxlLCAkbWF0Y2gpKSB7DQogICAgICAgICAgICAgICAgICAgICRsYW5ndWFnZUxpc3RbXSA9ICRtYXRjaFsxXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjbG9zZWRpcigkaGFuZGxlKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIOi/memHjOS4jeS8muaJp+ihjOWIsO+8jOWcqG9wZW5kaXLml7blsLHlt7Lnu4/mipvlh7pFX1dBUk5JTkcNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0Nhbm5vdCBvcGVuZGlyKCcgLiAkbGFuZ3VhZ2VQYXRoIC4gJyknKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjb3VudCgkbGFuZ3VhZ2VMaXN0KSA9PT0gMCkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTm8gbGFuZ3VhZ2UgaW4gJyAuICRsYW5ndWFnZVBhdGgpOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIDwgY291bnQoJGRlZmF1bHRMYW5ndWFnZUxpc3QpOyAkaSsrKSB7DQogICAgICAgICAgICAvLyDlnKjmlYjnjofkuIrvvIxhcnJheV9zZWFyY2jlkozlkb3lkI3mlbDnu4TmsqHmnInmnKzotKjljLrliKvvvIzoh7PlsJHlnKjov5nph4zlpoLmraTjgIINCiAgICAgICAgICAgIGlmIChmYWxzZSAhPT0gYXJyYXlfc2VhcmNoKCRkZWZhdWx0TGFuZ3VhZ2VMaXN0WyRpXSwgJGxhbmd1YWdlTGlzdCkpIHsNCiAgICAgICAgICAgICAgICAkbGFuZ3VhZ2UgPSAkZGVmYXVsdExhbmd1YWdlTGlzdFskaV07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRsYW5ndWFnZSA9PT0gJycpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0xhbmd1YWdlICcgLiAkZGVmYXVsdCAuICcgaXMgbm90IGZvdW5kIGluICcgLiAkbGFuZ3VhZ2VQYXRoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRsYW5ndWFnZVBhdGggLj0gJGxhbmd1YWdlIC4gJy5waHAnOw0KICAgICAgICAkbGFuZ3VhZ2VQdHIgPSByZXF1aXJlICRsYW5ndWFnZVBhdGg7DQogICAgICAgICR0aGlzLT5sYW5ncGFja2xpc3RbXSA9IGFycmF5KCR0eXBlLCAkaWQsICRsYW5ndWFnZSk7DQogICAgICAgIGlmICgkdHlwZSA9PSAnc3lzdGVtJykgew0KICAgICAgICAgICAgJHRoaXMtPmxhbmdzID0ganNvbl9kZWNvZGUoanNvbl9lbmNvZGUoJHRoaXMtPmxhbmcpKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGlmICgkaWQgIT0gJycgJiYgaXNzZXQoJHRoaXMtPmxhbmdbJGlkXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bGFuZ3MtPiRpZCA9IGpzb25fZGVjb2RlKGpzb25fZW5jb2RlKCR0aGlzLT5sYW5nWyRpZF0pKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWZsdXNoTGFuZ3VhZ2VzKCkNCiAgICB7DQogICAgICAgICR0aGlzLT5sYW5nWydlcnJvciddWyc3NyddID0gc3RyX3JlcGxhY2UoYXJyYXkoJyVtaW4nLCAnJW1heCcpLCBhcnJheSgkdGhpcy0+b3B0aW9uWydaQ19VU0VSTkFNRV9NSU4nXSwgJHRoaXMtPm9wdGlvblsnWkNfVVNFUk5BTUVfTUFYJ10pLCAkdGhpcy0+bGFuZ1snZXJyb3InXVsnNzcnXSk7DQogICAgICAgICR0aGlzLT5sYW5ncyA9IGpzb25fZGVjb2RlKGpzb25fZW5jb2RlKCR0aGlzLT5sYW5nKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YeN5paw6K+75Y+W6K+t6KiA5YyFLg0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVsb2FkTGFuZ3VhZ2VzKCkNCiAgICB7DQogICAgICAgICRhcnJheSA9ICR0aGlzLT5sYW5ncGFja2xpc3Q7DQogICAgICAgICR0aGlzLT5sYW5nID0gJHRoaXMtPmxhbmdwYWNrbGlzdCA9IGFycmF5KCk7DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkdikgew0KICAgICAgICAgICAgJHRoaXMtPkxvYWRMYW5ndWFnZSgkdlswXSwgJHZbMV0sICR2WzJdKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIm+W7uuaooeadv+Wvueixoe+8jOmihOWKoOi9veW3sue8luivkeaooeadvw0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdGhlbWUg5oyH5a6a5Li76aKY5ZCNDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFRlbXBsYXRlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFByZXBhcmVUZW1wbGF0ZSgkdGhlbWUgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgaWYgKGlzX251bGwoJHRoZW1lKSkgew0KICAgICAgICAgICAgJHRoZW1lID0gJiR0aGlzLT50aGVtZTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpOw0KICAgICAgICAkdGVtcGxhdGUtPk1ha2VUZW1wbGF0ZVRhZ3MoKTsNCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfTWFrZVRlbXBsYXRldGFncyddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwbmFtZSgkdGVtcGxhdGUtPnRlbXBsYXRlVGFncyk7DQogICAgICAgIH0NCg0KICAgICAgICAkdGVtcGxhdGUtPlNldFBhdGgoJHRoaXMtPnVzZXJzZGlyIC4gJ2NhY2hlL2NvbXBpbGVkLycgLiAkdGhlbWUgLiAnLycpOw0KICAgICAgICAkdGVtcGxhdGUtPnRoZW1lID0gJHRoZW1lOw0KDQogICAgICAgICR0ZW1wbGF0ZS0+TG9hZFRlbXBsYXRlcygpOw0KDQogICAgICAgIHJldHVybiAkdGVtcGxhdGU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qih5p2/6Kej5p6QLg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEJ1aWxkVGVtcGxhdGUoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnRlbXBsYXRlLT5Mb2FkVGVtcGxhdGVzKCk7DQoNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fWmJwX0J1aWxkVGVtcGxhdGUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcG5hbWUoJHRoaXMtPnRlbXBsYXRlLT50ZW1wbGF0ZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT50ZW1wbGF0ZS0+QnVpbGRUZW1wbGF0ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOabtOaWsOaooeadv+e8k+WtmC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBib29sICRvbmx5Y2hlY2sgIOS4uuecn+eahOivne+8jOWPquWIpOaWreaYr+WQpumcgOimgeiAjOS4jUJ1aWxkDQogICAgICogQHBhcmFtIGJvb2wgJGZvcmNlYnVpbGQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gdHJ1ZSBvciBmYWxzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja1RlbXBsYXRlKCRvbmx5Y2hlY2sgPSBmYWxzZSwgJGZvcmNlYnVpbGQgPSBmYWxzZSkNCiAgICB7DQogICAgICAgICR0aGlzLT50ZW1wbGF0ZS0+TG9hZFRlbXBsYXRlcygpOw0KICAgICAgICAkcyA9IGltcGxvZGUoJHRoaXMtPnRlbXBsYXRlLT50ZW1wbGF0ZXMpOw0KICAgICAgICAkbWQ1ID0gbWQ1KCRzKTsNCg0KICAgICAgICAvL+acrOWHveaVsOeahOi/lOWbnuWAvOW+iOacieaEj+aAne+8jOS4umZhbHNl6KGo56S66ZyA6KaBcmVidWlsZCDkuLp0cnVl6KGo56S65bey6YeN5bu65a6M5oiQ5oiW5piv5LiN6ZyA6KaBcmVidWlsZA0KICAgICAgICAvLyR6YnAtPkNoZWNrVGVtcGxhdGUodHJ1ZSkgPT0gZmFsc2Ug55qE5oSP5oCd77yM5bCx5piv5Yik5pat5qih5p2/6ZyA6ZyA6KaB6YeN5Yi35paw5ZCX77yfDQoNCiAgICAgICAgLy/lpoLmnpzlr7nmr5TkuI3kuIDmoLcsJG9ubHljaGVja+WwseacieeUqOS6hg0KICAgICAgICBpZiAoJG1kNSAhPSAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDUpIHsNCiAgICAgICAgICAgIGlmICgkb25seWNoZWNrID09IHRydWUgJiYgJGZvcmNlYnVpbGQgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkdGhpcy0+QnVpbGRUZW1wbGF0ZSgpOw0KICAgICAgICAgICAgJHRoaXMtPmNhY2hlLT50ZW1wbGF0ZXNfbWQ1ID0gJG1kNTsNCiAgICAgICAgICAgICR0aGlzLT5TYXZlQ2FjaGUoKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgLy/lpoLmnpzlr7nmr5TkuIDmoLfnmoTor53vvIwkZm9yY2VidWlsZOWwseacieeUqOS6hg0KICAgICAgICBpZiAoJG1kNSA9PSAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDUpIHsNCiAgICAgICAgICAgIGlmICgkZm9yY2VidWlsZCA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPkJ1aWxkVGVtcGxhdGUoKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2FjaGUtPnRlbXBsYXRlc19tZDUgPSAkbWQ1Ow0KICAgICAgICAgICAgICAgICR0aGlzLT5TYXZlQ2FjaGUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOeUn+aIkOaJgOaciei/m1JlYWR5IExpc3TnmoTmqKHlnZfnmoRDb250ZW505YaF5a655bm25L+d5a2YLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBCdWlsZE1vZHVsZSgpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfQnVpbGRNb2R1bGUnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgICAgICRmcG5hbWUoKTsNCiAgICAgICAgfQ0KICAgICAgICBNb2R1bGVCdWlsZGVyOjpCdWlsZCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmHjeW7uuaooeWdly4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1vZHVsZUZpbGVOYW1lIOaooeWdl+WQjQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1vZHVsZUZ1bmN0aW9uIOeUqOaIt+WHveaVsA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWdCdWlsZE1vZHVsZSgkbW9kdWxlRmlsZU5hbWUsICRtb2R1bGVGdW5jdGlvbikNCiAgICB7DQogICAgICAgIE1vZHVsZUJ1aWxkZXI6OlJlZygkbW9kdWxlRmlsZU5hbWUsICRtb2R1bGVGdW5jdGlvbik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog57O757uf6buY6K6k5rOo5YaM5qih5Z2XLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWdCdWlsZE1vZHVsZXMoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdjYXRhbG9nJywgJ01vZHVsZUJ1aWxkZXI6OkNhdGFsb2cnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdjYWxlbmRhcicsICdNb2R1bGVCdWlsZGVyOjpDYWxlbmRhcicpOw0KICAgICAgICAkdGhpcy0+UmVnQnVpbGRNb2R1bGUoJ2NvbW1lbnRzJywgJ01vZHVsZUJ1aWxkZXI6OkNvbW1lbnRzJyk7DQogICAgICAgICR0aGlzLT5SZWdCdWlsZE1vZHVsZSgncHJldmlvdXMnLCAnTW9kdWxlQnVpbGRlcjo6TGF0ZXN0QXJ0aWNsZXMnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdhcmNoaXZlcycsICdNb2R1bGVCdWlsZGVyOjpBcmNoaXZlcycpOw0KICAgICAgICAkdGhpcy0+UmVnQnVpbGRNb2R1bGUoJ25hdmJhcicsICdNb2R1bGVCdWlsZGVyOjpOYXZiYXInKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCd0YWdzJywgJ01vZHVsZUJ1aWxkZXI6OlRhZ0xpc3QnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdzdGF0aXN0aWNzJywgJ01vZHVsZUJ1aWxkZXI6OlN0YXRpc3RpY3MnKTsNCiAgICAgICAgJHRoaXMtPlJlZ0J1aWxkTW9kdWxlKCdhdXRob3JzJywgJ01vZHVsZUJ1aWxkZXI6OkF1dGhvcnMnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmt7vliqDov5vlhaVCdWlsZCBSZWFkeeWIl+ihqOeahOaooeWdly4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG1vZHVsZUZpbGVOYW1lIOaooeWdl+WQjQ0KICAgICAqIEBwYXJhbSBudWxsICAgJHBhcmFtZXRlcnMgICAgIOaooeWdl+WPguaVsA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBBZGRCdWlsZE1vZHVsZSgkbW9kdWxlRmlsZU5hbWUsICRwYXJhbWV0ZXJzID0gbnVsbCkNCiAgICB7DQogICAgICAgICRwID0gZnVuY19nZXRfYXJncygpOw0KICAgICAgICBjYWxsX3VzZXJfZnVuY19hcnJheSgnTW9kdWxlQnVpbGRlcjo6QWRkJywgJHApOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpOi/m+WFpUJ1aWxkIFJlYWR55YiX6KGo5qih5Z2XLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbW9kdWxlRmlsZU5hbWUg5qih5Z2X5ZCNDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbEJ1aWxkTW9kdWxlKCRtb2R1bGVGaWxlTmFtZSkNCiAgICB7DQogICAgICAgIE1vZHVsZUJ1aWxkZXI6OkRlbCgkbW9kdWxlRmlsZU5hbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOafpeivouaMh+WumuaVsOaNrue7k+aehOeahHNxbOW5tui/lOWbnkJhc2Xlr7nosaHliJfooaguDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nfGFycmF5ICR0YWJsZSAgICDmlbDmja7ooagNCiAgICAgKiBAcGFyYW0gYXJyYXkgICAgICAgICRkYXRhaW5mbyDmlbDmja7lrZfmrrUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAgICRzcWwgICAgICBTUUzmk43kvZzor63lj6UNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TGlzdEN1c3RvbSgkdGFibGUsICRkYXRhaW5mbywgJHNxbCkNCiAgICB7DQogICAgICAgICRhcnJheSA9IG51bGw7DQogICAgICAgICRsaXN0ID0gYXJyYXkoKTsNCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPmRiLT5RdWVyeSgkc3FsKTsNCiAgICAgICAgaWYgKCFpc3NldCgkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGEpIHsNCiAgICAgICAgICAgICRsID0gbmV3IEJhc2UoJHRhYmxlLCAkZGF0YWluZm8pOw0KICAgICAgICAgICAgJGwtPkxvYWRJbmZvQnlBc3NvYygkYSk7DQogICAgICAgICAgICAkbGlzdFtdID0gJGw7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGxpc3Q7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5p+l6K+iSUTmlbDmja7nmoTmjIflrprmlbDmja7nu5PmnoTnmoRzcWzlubbov5Tlm55CYXNl5a+56LGh5YiX6KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZ3xhcnJheSAkdGFibGUgICAg5pWw5o2u6KGoDQogICAgICogQHBhcmFtIGFycmF5ICAgICAgICAkZGF0YWluZm8g5pWw5o2u5a2X5q61DQogICAgICogQHBhcmFtIGFycmF5ICAgICAgICAkYXJyYXkgICAgSUTmlbDnu4QNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldExpc3RDdXN0b21CeUFycmF5KCR0YWJsZSwgJGRhdGFpbmZvLCAkYXJyYXkpDQogICAgew0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGNvdW50KCRhcnJheSkgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICAkd2hlcmUgPSBhcnJheSgpOw0KICAgICAgICAkd2hlcmVbXSA9IGFycmF5KCdJTicsICRkYXRhaW5mb1snSUQnXVswXSwgaW1wbG9kZSgnLCcsICRhcnJheSkpOw0KICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGFibGUsICcqJywgJHdoZXJlKTsNCiAgICAgICAgJGFycmF5ID0gbnVsbDsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgICAgICBpZiAoIWlzc2V0KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgJGwgPSBuZXcgQmFzZSgkdGFibGUsICRkYXRhaW5mbyk7DQogICAgICAgICAgICAkbC0+TG9hZEluZm9CeUFzc29jKCRhKTsNCiAgICAgICAgICAgICRsaXN0W10gPSAkbDsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbGlzdDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlt7LmlLnlkI1HZXRMaXN0VHlwZSwxLjXniYjkuK3miZTmjonmnInmrafkuYnnmoRHZXRMaXN0Lg0KICAgICAqDQogICAgICogQHBhcmFtICR0eXBlDQogICAgICogQHBhcmFtICRzcWwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldExpc3RUeXBlKCR0eXBlLCAkc3FsKQ0KICAgIHsNCiAgICAgICAgJGFycmF5ID0gbnVsbDsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgICAgICBpZiAoIWlzc2V0KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgLyoqIEB2YXIgQmFzZSAkbCAqLw0KICAgICAgICAgICAgJGwgPSBuZXcgJHR5cGUoKTsNCiAgICAgICAgICAgICRsLT5Mb2FkSW5mb0J5QXNzb2MoJGEpOw0KICAgICAgICAgICAgJGxpc3RbXSA9ICRsOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRsaXN0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldExpc3RPcmlnaW4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHNxbA0KICAgICAqDQogICAgICogQHJldHVybiBCYXNlW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TGlzdE9yaWdpbigkc3FsKQ0KICAgIHsNCiAgICAgICAgJGFycmF5ID0gbnVsbDsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgICAgICBpZiAoIWlzc2V0KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgJGxpc3RbXSA9ICRhOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRsaXN0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOafpeivoklE5pWw5o2u55qE5oyH5a6a57G75Z6L55qEc3Fs5bm26L+U5Zue5oyH5a6a57G75Z6L5a+56LGh5YiX6KGoLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdHlwZSAg57G75Z6LDQogICAgICogQHBhcmFtIG1peGVkICAkYXJyYXkgSUTmlbDnu4QNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldExpc3RUeXBlQnlBcnJheSgkdHlwZSwgJGFycmF5KQ0KICAgIHsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjb3VudCgkYXJyYXkpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHdoZXJlID0gYXJyYXkoKTsNCiAgICAgICAgJHdoZXJlW10gPSBhcnJheSgnSU4nLCAkdGhpcy0+ZGF0YWluZm9bJHR5cGVdWydJRCddWzBdLCBpbXBsb2RlKCcsJywgJGFycmF5KSk7DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVskdHlwZV0sICcqJywgJHdoZXJlKTsNCiAgICAgICAgJGFycmF5ID0gbnVsbDsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgICAgICBpZiAoIWlzc2V0KCRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgLyoqIEB2YXIgQmFzZSAkbCAqLw0KICAgICAgICAgICAgJGwgPSBuZXcgJHR5cGUoKTsNCiAgICAgICAgICAgICRsLT5Mb2FkSW5mb0J5QXNzb2MoJGEpOw0KICAgICAgICAgICAgJGxpc3RbXSA9ICRsOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRsaXN0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBtaXhlZCAkc2VsZWN0DQogICAgICogQHBhcmFtIG1peGVkICR3aGVyZQ0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3JkZXINCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGxpbWl0DQogICAgICogQHBhcmFtIG1peGVkICRvcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gUG9zdFtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChlbXB0eSgkc2VsZWN0KSkgew0KICAgICAgICAgICAgJHNlbGVjdCA9IGFycmF5KCcqJyk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGVtcHR5KCR3aGVyZSkpIHsNCiAgICAgICAgICAgICR3aGVyZSA9IGFycmF5KCk7DQogICAgICAgIH0NCiAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydQb3N0J10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KDQogICAgICAgIC8qKiBAdmFyIFBvc3RbXSAkYXJyYXkgKi8NCiAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldExpc3RUeXBlKCdQb3N0JywgJHNxbCk7DQogICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkYSkgew0KICAgICAgICAgICAgJHRoaXMtPnBvc3RzWyRhLT5JRF0gPSAkYTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkYXJyYXk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTmlbDnu4Tojrflj5bmlofnq6Dlrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gbWl4ZWRbXSAkYXJyYXkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gUG9zdFtdfEJhc2VbXSBQb3N0cw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQb3N0QnlBcnJheSgkYXJyYXkpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldExpc3RUeXBlQnlBcnJheSgnUG9zdCcsICRhcnJheSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG1peGVkICRzZWxlY3QNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHdoZXJlDQogICAgICogQHBhcmFtIG1peGVkICRvcmRlcg0KICAgICAqIEBwYXJhbSBtaXhlZCAkbGltaXQNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9wdGlvbg0KICAgICAqIEBwYXJhbSBtaXhlZCAkcmVhZHRhZ3MNCiAgICAgKg0KICAgICAqIEByZXR1cm4gUG9zdFtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldEFydGljbGVMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCwgJHJlYWR0YWdzID0gdHJ1ZSkNCiAgICB7DQogICAgICAgIGlmIChlbXB0eSgkc2VsZWN0KSkgew0KICAgICAgICAgICAgJHNlbGVjdCA9IGFycmF5KCcqJyk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGVtcHR5KCR3aGVyZSkpIHsNCiAgICAgICAgICAgICR3aGVyZSA9IGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNfYXJyYXkoJHdoZXJlKSkgew0KICAgICAgICAgICAgJGhhc1R5cGUgPSBmYWxzZTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCR3aGVyZSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgIGlmIChpc19hcnJheSgkdmFsdWUpKSB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2YWx1ZSBhcyAka2V5MiA9PiAkdmFsdWUyKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGtleTIgPT0gMSAmJiAkdmFsdWUyID09ICdsb2dfVHlwZScpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaGFzVHlwZSA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoISRoYXNUeXBlKSB7DQogICAgICAgICAgICAgICAgYXJyYXlfdW5zaGlmdCgkd2hlcmUsIGFycmF5KCc9JywgJ2xvZ19UeXBlJywgJzAnKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGhpcy0+dGFibGVbJ1Bvc3QnXSwgJHNlbGVjdCwgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbik7DQoNCiAgICAgICAgLyoqIEB2YXIgUG9zdFtdICRhcnJheSAqLw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ1Bvc3QnLCAkc3FsKTsNCg0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGEpIHsNCiAgICAgICAgICAgICR0aGlzLT5wb3N0c1skYS0+SURdID0gJGE7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHJlYWR0YWdzKSB7DQogICAgICAgICAgICAkdGFnc3RyaW5nID0gJyc7DQogICAgICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGEpIHsNCiAgICAgICAgICAgICAgICAkdGFnc3RyaW5nIC49ICRhLT5UYWc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkdGhpcy0+TG9hZFRhZ3NCeUlEU3RyaW5nKCR0YWdzdHJpbmcpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFBvc3RbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQYWdlTGlzdCgkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoZW1wdHkoJHNlbGVjdCkpIHsNCiAgICAgICAgICAgICRzZWxlY3QgPSBhcnJheSgnKicpOw0KICAgICAgICB9DQogICAgICAgIGlmIChlbXB0eSgkd2hlcmUpKSB7DQogICAgICAgICAgICAkd2hlcmUgPSBhcnJheSgpOw0KICAgICAgICB9DQogICAgICAgIGlmIChpc19hcnJheSgkd2hlcmUpKSB7DQogICAgICAgICAgICBhcnJheV91bnNoaWZ0KCR3aGVyZSwgYXJyYXkoJz0nLCAnbG9nX1R5cGUnLCAnMScpKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnUG9zdCddLCAkc2VsZWN0LCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKTsNCiAgICAgICAgLyoqIEB2YXIgUG9zdFtdICRhcnJheSAqLw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ1Bvc3QnLCAkc3FsKTsNCiAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRhKSB7DQogICAgICAgICAgICAkdGhpcy0+cG9zdHNbJGEtPklEXSA9ICRhOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIENvbW1lbnRbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRDb21tZW50TGlzdCgkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoZW1wdHkoJHNlbGVjdCkpIHsNCiAgICAgICAgICAgICRzZWxlY3QgPSBhcnJheSgnKicpOw0KICAgICAgICB9DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnQ29tbWVudCddLCAkc2VsZWN0LCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKTsNCiAgICAgICAgLyoqIEB2YXIgQ29tbWVudFtdICRhcnJheSAqLw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ0NvbW1lbnQnLCAkc3FsKTsNCiAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRjb21tZW50KSB7DQogICAgICAgICAgICAkdGhpcy0+Y29tbWVudHNbJGNvbW1lbnQtPklEXSA9ICRjb21tZW50Ow0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRhcnJheTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcltdfEJhc2VbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRNZW1iZXJMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChlbXB0eSgkc2VsZWN0KSkgew0KICAgICAgICAgICAgJHNlbGVjdCA9IGFycmF5KCcqJyk7DQogICAgICAgIH0NCiAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydNZW1iZXInXSwgJHNlbGVjdCwgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbik7DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRMaXN0VHlwZSgnTWVtYmVyJywgJHNxbCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIG1peGVkICRzZWxlY3QNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHdoZXJlDQogICAgICogQHBhcmFtIG1peGVkICRvcmRlcg0KICAgICAqIEBwYXJhbSBtaXhlZCAkbGltaXQNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9wdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBUYWdbXXxCYXNlW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0VGFnTGlzdCgkc2VsZWN0ID0gbnVsbCwgJHdoZXJlID0gbnVsbCwgJG9yZGVyID0gbnVsbCwgJGxpbWl0ID0gbnVsbCwgJG9wdGlvbiA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoZW1wdHkoJHNlbGVjdCkpIHsNCiAgICAgICAgICAgICRzZWxlY3QgPSBhcnJheSgnKicpOw0KICAgICAgICB9DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnVGFnJ10sICRzZWxlY3QsICR3aGVyZSwgJG9yZGVyLCAkbGltaXQsICRvcHRpb24pOw0KDQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0TGlzdFR5cGUoJ1RhZycsICRzcWwpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBtaXhlZCAkc2VsZWN0DQogICAgICogQHBhcmFtIG1peGVkICR3aGVyZQ0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3JkZXINCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGxpbWl0DQogICAgICogQHBhcmFtIG1peGVkICRvcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gQ2F0ZWdvcnlbXXxCYXNlW10NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0Q2F0ZWdvcnlMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChlbXB0eSgkc2VsZWN0KSkgew0KICAgICAgICAgICAgJHNlbGVjdCA9IGFycmF5KCcqJyk7DQogICAgICAgIH0NCiAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydDYXRlZ29yeSddLCAkc2VsZWN0LCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKTsNCg0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldExpc3RUeXBlKCdDYXRlZ29yeScsICRzcWwpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBtaXhlZCAkc2VsZWN0DQogICAgICogQHBhcmFtIG1peGVkICR3aGVyZQ0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3JkZXINCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGxpbWl0DQogICAgICogQHBhcmFtIG1peGVkICRvcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gTW9kdWxlW118QmFzZVtdDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1vZHVsZUxpc3QoJHNlbGVjdCA9IG51bGwsICR3aGVyZSA9IG51bGwsICRvcmRlciA9IG51bGwsICRsaW1pdCA9IG51bGwsICRvcHRpb24gPSBudWxsKQ0KICAgIHsNCiAgICAgICAgaWYgKGVtcHR5KCRzZWxlY3QpKSB7DQogICAgICAgICAgICAkc2VsZWN0ID0gYXJyYXkoJyonKTsNCiAgICAgICAgfQ0KICAgICAgICAkc3FsID0gJHRoaXMtPmRiLT5zcWwtPlNlbGVjdCgkdGhpcy0+dGFibGVbJ01vZHVsZSddLCAkc2VsZWN0LCAkd2hlcmUsICRvcmRlciwgJGxpbWl0LCAkb3B0aW9uKTsNCg0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldExpc3RUeXBlKCdNb2R1bGUnLCAkc3FsKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlbGVjdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkd2hlcmUNCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9yZGVyDQogICAgICogQHBhcmFtIG1peGVkICRsaW1pdA0KICAgICAqIEBwYXJhbSBtaXhlZCAkb3B0aW9uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFVwbG9hZFtdfEJhc2VbXQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRVcGxvYWRMaXN0KCRzZWxlY3QgPSBudWxsLCAkd2hlcmUgPSBudWxsLCAkb3JkZXIgPSBudWxsLCAkbGltaXQgPSBudWxsLCAkb3B0aW9uID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmIChlbXB0eSgkc2VsZWN0KSkgew0KICAgICAgICAgICAgJHNlbGVjdCA9IGFycmF5KCcqJyk7DQogICAgICAgIH0NCiAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5TZWxlY3QoJHRoaXMtPnRhYmxlWydVcGxvYWQnXSwgJHNlbGVjdCwgJHdoZXJlLCAkb3JkZXIsICRsaW1pdCwgJG9wdGlvbik7DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRMaXN0VHlwZSgnVXBsb2FkJywgJHNxbCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRzcWwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0X3Jlc3VsdHMoJHNxbCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+ZGItPlF1ZXJ5KCRzcWwpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOagueaNruWIq+WQjeW+l+WIsOebuOW6lOaVsOaNri4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBCYXNlW118c3RyaW5nICYkb2JqZWN0ICAg57yT5a2Y5a+56LGhDQogICAgICogQHBhcmFtIHN0cmluZyAgICAgICAgJHZhbA0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICAgICRiYWNrQXR0cg0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICAgICRjbGFzc05hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQmFzZXxudWxsDQogICAgICovDQogICAgcHJpdmF0ZSBmdW5jdGlvbiBHZXRTb21lVGhpbmdCeUFsaWFzKCRvYmplY3QsICR2YWwsICRiYWNrQXR0ciA9IG51bGwsICRjbGFzc05hbWUgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmcoJG9iamVjdCwgJ0FsaWFzJywgJHZhbCk7DQoNCiAgICAgICAgaWYgKCFpc19udWxsKCRyZXQpKSB7DQogICAgICAgICAgICByZXR1cm4gJHJldDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGlmIChpc19udWxsKCRiYWNrQXR0cikpIHsNCiAgICAgICAgICAgICAgICAkYmFja0F0dHIgPSAkdGhpcy0+b3B0aW9uWydaQ19BTElBU19CQUNLX0FUVFInXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmcoJG9iamVjdCwgJGJhY2tBdHRyLCAkdmFsLCAkY2xhc3NOYW1lKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOagueaNrklE5b6X5Yiw55u45bqU5pWw5o2uLg0KICAgICAqDQogICAgICogQHBhcmFtIEJhc2VbXSAgICAgJiRvYmplY3QgICDnvJPlrZjlr7nosaENCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAkY2xhc3NOYW1lIOaJvuS4jeWIsElE5pe25Yid5aeL5YyW5a+56LGh55qE57G75ZCNDQogICAgICogQHBhcmFtIGludHxzdHJpbmcgJGlkICAgICAgICDkuI7mraTnsbvnm7jlhbPnmoRJRA0KICAgICAqDQogICAgICogQHJldHVybiBCYXNlfG51bGwNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIEdldFNvbWVUaGluZ0J5SWQoJiRvYmplY3QsICRjbGFzc05hbWUsICRpZCkNCiAgICB7DQogICAgICAgIGlmICgkaWQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmICgkb2JqZWN0ICE9IG51bGwpIHsNCiAgICAgICAgICAgIC8vJG1vZHVsZXPpnZ5JROS4umtleQ0KICAgICAgICAgICAgaWYgKCRjbGFzc05hbWUgPT0gIk1vZHVsZSIpIHsNCiAgICAgICAgICAgICAgICBpZiAoJGlkID4gMCkgew0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkb2JqZWN0IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHZhbHVlLT5JRCA9PSAkaWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRtID0gbmV3IE1vZHVsZSgpOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRtOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoaXNzZXQoJG9iamVjdFskaWRdKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkb2JqZWN0WyRpZF07DQogICAgICAgICAgICB9IGVsc2VpZiAoJGNsYXNzTmFtZSA9PSAiUG9zdCIgfHwgJGNsYXNzTmFtZSA9PSAiQ29tbWVudCIgfHwgJGNsYXNzTmFtZSA9PSAiVGFnIikgew0KICAgICAgICAgICAgICAgIC8vIOaWh+eroOmcgOimgeivu+WPlu+8jOWFtuS7lueahOebtOaOpei/lOWbnuepuuWvueixoeWNs+WPrw0KICAgICAgICAgICAgICAgIC8qKiBAdmFyIEJhc2UgJHAgKi8NCiAgICAgICAgICAgICAgICAkcCA9IG5ldyAkY2xhc3NOYW1lKCk7DQogICAgICAgICAgICAgICAgJHAtPkxvYWRJbmZvQnlJRCgkaWQpOw0KICAgICAgICAgICAgICAgICRvYmplY3RbJGlkXSA9ICRwOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICRwOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZ0J5QXR0cigkb2JqZWN0LCAnSUQnLCAkaWQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLyoqIEB2YXIgQmFzZSAkcCAqLw0KICAgICAgICAgICAgJHAgPSBuZXcgJGNsYXNzTmFtZSgpOw0KICAgICAgICAgICAgJHAtPkxvYWRJbmZvQnlJRCgkaWQpOw0KDQogICAgICAgICAgICByZXR1cm4gJHA7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmoLnmja7lsZ7mgKflgLzlvpfliLDnm7jlupTmlbDmja4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gQmFzZVtdICYkb2JqZWN0IOe8k+WtmOWvueixoQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGF0dHIgICAg5bGe5oCn5ZCNDQogICAgICogQHBhcmFtIG1peGVkICAkdmFsICAgICDopoHmn6Xmib7nmoTlgLwNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbA0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gR2V0U29tZVRoaW5nQnlBdHRyKCYkb2JqZWN0LCAkYXR0ciwgJHZhbCkNCiAgICB7DQogICAgICAgICR2YWwgPSB0cmltKCR2YWwpOw0KICAgICAgICBmb3JlYWNoICgkb2JqZWN0IGFzICRrZXkgPT4gJiR2YWx1ZSkgew0KICAgICAgICAgICAgaWYgKGlzX251bGwoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCR2YWx1ZS0+JGF0dHIgPT0gJHZhbCkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkdmFsdWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bmlbDmja7pgJrnlKjlh73mlbAuDQogICAgICoNCiAgICAgKiBAcGFyYW0gQmFzZVtdfHN0cmluZyAkb2JqZWN0ICAgIOe8k+WtmOWvueixoe+8iHN0cmluZyAvIG9iamVjdO+8iQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgICAgICAgICRhdHRyICAgICAg5qyy5p+l5om+55qE5bGe5oCnDQogICAgICogQHBhcmFtIG1peGVkICAgICAgICAgJHZhbCAgICAgICDopoHmn6Xmib7lhoXlrrkNCiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAgICAkY2xhc3NOYW1lIOWvueixoeacquaJvuWIsOaXtu+8jOWIneWni+WMluexu+WQjQ0KICAgICAqDQogICAgICogQHJldHVybiBCYXNlfG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0U29tZVRoaW5nKCRvYmplY3QsICRhdHRyLCAkdmFsLCAkY2xhc3NOYW1lID0gbnVsbCkNCiAgICB7DQogICAgICAgICRjYWNoZU9iamVjdCA9IG51bGw7DQogICAgICAgIGlmIChpc19vYmplY3QoJG9iamVjdCkpIHsNCiAgICAgICAgICAgICRjYWNoZU9iamVjdCA9ICRvYmplY3Q7DQogICAgICAgIH0gZWxzZWlmICgkb2JqZWN0ICE9ICIiKSB7DQogICAgICAgICAgICAkY2FjaGVPYmplY3QgPSAmJHRoaXMtPiRvYmplY3Q7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRhdHRyID09ICJJRCIpIHsNCiAgICAgICAgICAgICRyZXQgPSAkdGhpcy0+R2V0U29tZVRoaW5nQnlJZCgkY2FjaGVPYmplY3QsICRjbGFzc05hbWUsICR2YWwpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmdCeUF0dHIoJGNhY2hlT2JqZWN0LCAkYXR0ciwgJHZhbCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCRyZXQgPT09IG51bGwgJiYgIWlzX251bGwoJGNsYXNzTmFtZSkpIHsNCiAgICAgICAgICAgIC8qKiBAdmFyIEJhc2UgJHJldCAqLw0KICAgICAgICAgICAgJHJldCA9IG5ldyAkY2xhc3NOYW1lKCk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJHJldDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPluaWh+eroOWunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFBvc3R8QmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQb3N0QnlJRCgkaWQpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygncG9zdHMnLCAnSUQnLCAkaWQsICdQb3N0Jyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+HSUTojrflj5bliIbnsbvlrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gaW50ICRpZA0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeXxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlJRCgkaWQpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygnY2F0ZWdvcmllcycsICdJRCcsICRpZCwgJ0NhdGVnb3J5Jyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H5YiG57G75ZCN6I635Y+W5YiG57G75a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeXxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlOYW1lKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmcoJ2NhdGVnb3JpZXMnLCAnTmFtZScsICRuYW1lLCAnQ2F0ZWdvcnknKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4fliIbnsbvliKvlkI3ojrflj5bliIbnsbvlrp7kvosuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIG51bGwgICAkYmFja0tleQ0KICAgICAqDQogICAgICogQHJldHVybiBDYXRlZ29yeXxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlBbGlhcygkbmFtZSwgJGJhY2tLZXkgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmdCeUFsaWFzKCdjYXRlZ29yaWVzJywgJG5hbWUsICRiYWNrS2V5LCAnQ2F0ZWdvcnknKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDkuI7ogIHniYjmnKzkv53mjIHlhbzlrrnlh73mlbAuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIENhdGVnb3J5DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENhdGVnb3J5QnlBbGlhc09yTmFtZSgkbmFtZSkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0Q2F0ZWdvcnlCeUFsaWFzKCRuYW1lLCAnTmFtZScpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0lE6I635Y+W5qih5Z2X5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIGludCAkaWQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gTW9kdWxlfEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TW9kdWxlQnlJRCgkaWQpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygnbW9kdWxlcycsICdJRCcsICRpZCwgJ01vZHVsZScpOyAvLyBXaGF0IHRoZSBmdWNrPw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0ZpbGVOYW1l6I635Y+W5qih5Z2X5a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkZm4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gTW9kdWxlfEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0TW9kdWxlQnlGaWxlTmFtZSgkZm4pDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldFNvbWVUaGluZygnbW9kdWxlc2J5ZmlsZW5hbWUnLCAnRmlsZU5hbWUnLCAkZm4sICdNb2R1bGUnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPlueUqOaIt+WunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcnxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1lbWJlckJ5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgLyoqIEB2YXIgTWVtYmVyICRyZXQgKi8NCiAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmcoJ21lbWJlcnMnLCAnSUQnLCAkaWQsICdNZW1iZXInKTsNCiAgICAgICAgaWYgKCRyZXQtPklEID09IDApIHsNCiAgICAgICAgICAgICRyZXQtPkd1aWQgPSBHZXRHdWlkKCk7DQogICAgICAgICAgICBpZiAoJHJldC0+TG9hZEluZm9CeUlEKCRpZCkgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5tZW1iZXJzWyRyZXQtPklEXSA9ICRyZXQ7DQogICAgICAgICAgICAgICAgJHRoaXMtPm1lbWJlcnNieW5hbWVbJHJldC0+TmFtZV0gPSAmJHRoaXMtPm1lbWJlcnNbJHJldC0+SURdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRyZXQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H55So5oi35ZCN6I635Y+W55So5oi35a6e5L6LKOS4jeWMuuWIhuWkp+Wwj+WGmSkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcnxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldE1lbWJlckJ5TmFtZSgkbmFtZSkNCiAgICB7DQogICAgICAgICRuYW1lID0gdHJpbSgkbmFtZSk7DQogICAgICAgIGlmICghJG5hbWUgfHwgIUNoZWNrUmVnRXhwKCRuYW1lLCAnW3VzZXJuYW1lXScpKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IE1lbWJlcigpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5tZW1iZXJzYnluYW1lWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+bWVtYmVyc2J5bmFtZVskbmFtZV07DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkYXJyYXkgPSBhcnJheV9rZXlzKCR0aGlzLT5tZW1iZXJzYnluYW1lKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkayA9PiAkdikgew0KICAgICAgICAgICAgICAgIGlmIChzdHJjYXNlY21wKCRuYW1lLCAkdikgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPm1lbWJlcnNieW5hbWVbJHZdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRsaWtlID0gKCR0aGlzLT5kYi0+dHlwZSA9PSAncGdzcWwnKSA/ICdJTElLRScgOiAnTElLRSc7DQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnTWVtYmVyJ10sICcqJywgYXJyYXkoYXJyYXkoJGxpa2UsICdtZW1fTmFtZScsICRuYW1lKSksIG51bGwsIDEsIG51bGwpOw0KDQogICAgICAgIC8qKiBAdmFyIE1lbWJlcltdICRhbSAqLw0KICAgICAgICAkYW0gPSAkdGhpcy0+R2V0TGlzdFR5cGUoJ01lbWJlcicsICRzcWwpOw0KICAgICAgICBpZiAoY291bnQoJGFtKSA+IDApIHsNCiAgICAgICAgICAgICRtID0gJGFtWzBdOw0KICAgICAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+bWVtYmVyc1skbS0+SURdKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5tZW1iZXJzWyRtLT5JRF0gPSAkbTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghaXNzZXQoJHRoaXMtPm1lbWJlcnNieW5hbWVbJG0tPk5hbWVdKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5tZW1iZXJzYnluYW1lWyRtLT5OYW1lXSA9ICYkdGhpcy0+bWVtYmVyc1skbS0+SURdOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gJG07DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gbmV3IE1lbWJlcigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h+iOt+WPlueUqOaIt+WQjeaIluWIq+WQjeWunuS+iyjkuI3ljLrliIblpKflsI/lhpkpLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBNZW1iZXJ8QmFzZQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRNZW1iZXJCeU5hbWVPckFsaWFzKCRuYW1lKQ0KICAgIHsNCiAgICAgICAgJG5hbWUgPSB0cmltKCRuYW1lKTsNCiAgICAgICAgaWYgKCEkbmFtZSB8fCAhKENoZWNrUmVnRXhwKCRuYW1lLCAnW3VzZXJuYW1lXScpIHx8IENoZWNrUmVnRXhwKCRuYW1lLCAnW25pY2tuYW1lXScpKSkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBNZW1iZXIoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5tZW1iZXJzIGFzICRrZXkgPT4gJiR2YWx1ZSkgew0KICAgICAgICAgICAgaWYgKHN0cmNhc2VjbXAoJHZhbHVlLT5OYW1lLCAkbmFtZSkgPT0gMCB8fCBzdHJjYXNlY21wKCR2YWx1ZS0+QWxpYXMsICRuYW1lKSA9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICR2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRsaWtlID0gKCR0aGlzLT5kYi0+dHlwZSA9PSAncGdzcWwnKSA/ICdJTElLRScgOiAnTElLRSc7DQoNCiAgICAgICAgJHNxbCA9ICR0aGlzLT5kYi0+c3FsLT5nZXQoKS0+c2VsZWN0KCR0aGlzLT50YWJsZVsnTWVtYmVyJ10pLT53aGVyZShhcnJheSgiJGxpa2UgYXJyYXkiLCBhcnJheSgNCiAgICAgICAgICAgIGFycmF5KCdtZW1fTmFtZScsICRuYW1lKSwNCiAgICAgICAgICAgIGFycmF5KCdtZW1fQWxpYXMnLCAkbmFtZSksDQogICAgICAgICkpKS0+bGltaXQoMSktPnNxbDsNCg0KICAgICAgICAvKiogQHZhciBNZW1iZXJbXSAkYW0gKi8NCiAgICAgICAgJGFtID0gJHRoaXMtPkdldExpc3RUeXBlKCdNZW1iZXInLCAkc3FsKTsNCiAgICAgICAgaWYgKGNvdW50KCRhbSkgPiAwKSB7DQogICAgICAgICAgICAkbSA9ICRhbVswXTsNCiAgICAgICAgICAgIGlmICghaXNzZXQoJHRoaXMtPm1lbWJlcnNbJG0tPklEXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bWVtYmVyc1skbS0+SURdID0gJG07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5tZW1iZXJzYnluYW1lWyRtLT5OYW1lXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bWVtYmVyc2J5bmFtZVskbS0+TmFtZV0gPSAmJHRoaXMtPm1lbWJlcnNbJG0tPklEXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICRtOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIG5ldyBNZW1iZXIoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4fpgq7nrrHlkI3ojrflj5bnlKjmiLflrp7kvoso5LiN5Yy65YiG5aSn5bCP5YaZKS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGVtYWlsDQogICAgICoNCiAgICAgKiBAcmV0dXJuIE1lbWJlcg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRNZW1iZXJCeUVtYWlsKCRlbWFpbCkNCiAgICB7DQogICAgICAgICRlbWFpbCA9IHN0cnRvbG93ZXIodHJpbSgkZW1haWwpKTsNCiAgICAgICAgaWYgKCEkZW1haWwgfHwgIUNoZWNrUmVnRXhwKCRlbWFpbCwgJ1tlbWFpbF0nKSkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBNZW1iZXIoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRzcWwgPSAkdGhpcy0+ZGItPnNxbC0+U2VsZWN0KCR0aGlzLT50YWJsZVsnTWVtYmVyJ10sICcqJywgYXJyYXkoYXJyYXkoJ0xJS0UnLCAnbWVtX0VtYWlsJywgJGVtYWlsKSksIG51bGwsIDEsIG51bGwpOw0KICAgICAgICAvKiogQHZhciBNZW1iZXJbXSAkYW0gKi8NCiAgICAgICAgJGFtID0gJHRoaXMtPkdldExpc3RUeXBlKCdNZW1iZXInLCAkc3FsKTsNCiAgICAgICAgaWYgKGNvdW50KCRhbSkgPiAwKSB7DQogICAgICAgICAgICAkbSA9ICRhbVswXTsNCiAgICAgICAgICAgIGlmICghaXNzZXQoJHRoaXMtPm1lbWJlcnNbJG0tPklEXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bWVtYmVyc1skbS0+SURdID0gJG07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5tZW1iZXJzYnluYW1lWyRtLT5OYW1lXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+bWVtYmVyc2J5bmFtZVskbS0+TmFtZV0gPSAmJHRoaXMtPm1lbWJlcnNbJG0tPklEXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICRtOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIG5ldyBNZW1iZXIoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmo4Dmn6XmjIflrprlkI3np7DnmoTnlKjmiLfmmK/lkKblrZjlnKgo5LiN5Yy65YiG5aSn5bCP5YaZKS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrTWVtYmVyTmFtZUV4aXN0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgJG0gPSAkdGhpcy0+R2V0TWVtYmVyQnlOYW1lKCRuYW1lKTsNCg0KICAgICAgICByZXR1cm4gJG0tPklEID4gMDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmo4Dmn6XmjIflrprlkI3np7DmiJbliKvlkI3nmoTnlKjmiLfmmK/lkKblrZjlnKgo5LiN5Yy65YiG5aSn5bCP5YaZKS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrTWVtYmVyQnlOYW1lT3JBbGlhc0V4aXN0KCRuYW1lKQ0KICAgIHsNCiAgICAgICAgJG0gPSAkdGhpcy0+R2V0TWVtYmVyQnlOYW1lT3JBbGlhcygkbmFtZSk7DQoNCiAgICAgICAgcmV0dXJuICRtLT5JRCA+IDA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5p+l5oyH5a6a6YKu566x55qE55So5oi35piv5ZCm5a2Y5ZyoKOS4jeWMuuWIhuWkp+Wwj+WGmSkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gJGVtYWlsDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tNZW1iZXJCeUVtYWlsRXhpc3QoJGVtYWlsKQ0KICAgIHsNCiAgICAgICAgJG0gPSAkdGhpcy0+R2V0TWVtYmVyQnlFbWFpbCgkZW1haWwpOw0KDQogICAgICAgIHJldHVybiAkbS0+SUQgPiAwOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h0lE6I635Y+W6K+E6K665a6e5L6LLg0KICAgICAqDQogICAgICogQHBhcmFtIGludCAkaWQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gQ29tbWVudHxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENvbW1lbnRCeUlEKCRpZCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+R2V0U29tZVRoaW5nKCdjb21tZW50cycsICdJRCcsICRpZCwgJ0NvbW1lbnQnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPlumZhOS7tuWunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFVwbG9hZHxCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFVwbG9hZEJ5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRTb21lVGhpbmcoJycsICdJRCcsICRpZCwgJ1VwbG9hZCcpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h3RhZ+WQjeiOt+WPlnRhZ+WunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKiBAcGFyYW0gbnVsbCAgICRiYWNrS2V5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIFRhZ3xCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFRhZ0J5QWxpYXMoJG5hbWUsICRiYWNrS2V5ID0gbnVsbCkNCiAgICB7DQogICAgICAgICRyZXQgPSAkdGhpcy0+R2V0U29tZVRoaW5nQnlBbGlhcygndGFncycsICRuYW1lLCAkYmFja0tleSwgJ1RhZycpOw0KICAgICAgICBpZiAoJHJldC0+SUQgPj0gMCkgew0KICAgICAgICAgICAgJHRoaXMtPnRhZ3NieW5hbWVbJHJldC0+SURdID0gJiR0aGlzLT50YWdzWyRyZXQtPklEXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkcmV0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h3RhZ+WQjeiOt+WPlnRhZ+WunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gVGFnfEJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0VGFnQnlBbGlhc09yTmFtZSgkbmFtZSkNCiAgICB7DQogICAgICAgIC8vcmV0dXJuICR0aGlzLT5HZXRUYWdCeUFsaWFzKCRuYW1lLCAnTmFtZScpOw0KICAgICAgICAkYSA9IGFycmF5KCk7DQogICAgICAgICRhW10gPSBhcnJheSgndGFnX0FsaWFzJywgJG5hbWUpOw0KICAgICAgICAkYVtdID0gYXJyYXkoJ3RhZ19OYW1lJywgJG5hbWUpOw0KICAgICAgICAkYXJyYXkgPSAkdGhpcy0+R2V0VGFnTGlzdCgnKicsIGFycmF5KGFycmF5KCdhcnJheScsICRhKSksICcnLCAxLCAnJyk7DQogICAgICAgIGlmIChjb3VudCgkYXJyYXkpID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgVGFnKCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkdGhpcy0+dGFnc1skYXJyYXlbMF0tPklEXSA9ICRhcnJheVswXTsNCiAgICAgICAgICAgICR0aGlzLT50YWdzYnluYW1lWyRhcnJheVswXS0+SURdID0gJiR0aGlzLT50YWdzWyRhcnJheVswXS0+SURdOw0KDQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnRhZ3NbJGFycmF5WzBdLT5JRF07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpgJrov4dJROiOt+WPlnRhZ+WunuS+iy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIFRhZ3xCYXNlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFRhZ0J5SUQoJGlkKQ0KICAgIHsNCiAgICAgICAgJHJldCA9ICR0aGlzLT5HZXRTb21lVGhpbmcoJ3RhZ3MnLCAnSUQnLCAkaWQsICdUYWcnKTsNCiAgICAgICAgaWYgKCRyZXQtPklEID4gMCkgew0KICAgICAgICAgICAgJHRoaXMtPnRhZ3NieW5hbWVbJHJldC0+SURdID0gJiR0aGlzLT50YWdzWyRyZXQtPklEXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkcmV0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h+exu+S8vCd7MX17Mn17M317NH0n6L295YWldGFncy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkcw0KICAgICAqDQogICAgICogQHJldHVybiBhcnJheQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkVGFnc0J5SURTdHJpbmcoJHMpDQogICAgew0KICAgICAgICAkcyA9IHRyaW0oJHMpOw0KICAgICAgICBpZiAoJHMgPT09ICcnKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRzID0gc3RyX3JlcGxhY2UoJ317JywgJ3wnLCAkcyk7DQogICAgICAgICRzID0gc3RyX3JlcGxhY2UoJ3snLCAnJywgJHMpOw0KICAgICAgICAkcyA9IHN0cl9yZXBsYWNlKCd9JywgJycsICRzKTsNCiAgICAgICAgJGEgPSBleHBsb2RlKCd8JywgJHMpOw0KICAgICAgICAkYiA9IGFycmF5KCk7DQogICAgICAgIGZvcmVhY2ggKCRhIGFzICYkdmFsdWUpIHsNCiAgICAgICAgICAgICR2YWx1ZSA9IHRyaW0oJHZhbHVlKTsNCiAgICAgICAgICAgIGlmICgkdmFsdWUpIHsNCiAgICAgICAgICAgICAgICAkYltdID0gJHZhbHVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICR0ID0gYXJyYXlfdW5pcXVlKCRiKTsNCg0KICAgICAgICBpZiAoY291bnQoJHQpID09PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRhID0gYXJyYXkoKTsNCiAgICAgICAgJGIgPSBhcnJheSgpOw0KICAgICAgICAkYyA9IGFycmF5KCk7DQogICAgICAgIGZvcmVhY2ggKCR0IGFzICR2KSB7DQogICAgICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT50YWdzWyR2XSkpIHsNCiAgICAgICAgICAgICAgICAkYVtdID0gYXJyYXkoJ3RhZ19JRCcsICR2KTsNCiAgICAgICAgICAgICAgICAkY1tdID0gJHY7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICRiWyR2XSA9ICYkdGhpcy0+dGFnc1skdl07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoY291bnQoJGEpID09PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gJGI7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkdCA9IGFycmF5KCk7DQogICAgICAgICAgICAvLyRhcnJheT0kdGhpcy0+R2V0VGFnTGlzdCgnJyxhcnJheShhcnJheSgnYXJyYXknLCRhKSksJycsJycsJycpOw0KICAgICAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldFRhZ0xpc3QoJycsIGFycmF5KGFycmF5KCdJTicsICd0YWdfSUQnLCAkYykpLCAnJywgJycsICcnKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRhcnJheSBhcyAkdikgew0KICAgICAgICAgICAgICAgICR0aGlzLT50YWdzWyR2LT5JRF0gPSAkdjsNCiAgICAgICAgICAgICAgICAkdGhpcy0+dGFnc2J5bmFtZVskdi0+TmFtZV0gPSAmJHRoaXMtPnRhZ3NbJHYtPklEXTsNCiAgICAgICAgICAgICAgICAkdFskdi0+SURdID0gJiR0aGlzLT50YWdzWyR2LT5JRF07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBhcnJheV9tZXJnZSgkYiwgJHQpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6YCa6L+H57G75Ly8J2FhYSxiYmIsY2NjLGRkZCfovb3lhaV0YWdzLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkcyDmoIfnrb7lkI3lrZfnrKbkuLLvvIzlpoInYWFhLGJiYixjY2MsZGRkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGFycmF5DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIExvYWRUYWdzQnlOYW1lU3RyaW5nKCRzKQ0KICAgIHsNCiAgICAgICAgJHMgPSB0cmltKCRzKTsNCiAgICAgICAgJHMgPSBzdHJfcmVwbGFjZSgnOycsICcsJywgJHMpOw0KICAgICAgICAkcyA9IHN0cl9yZXBsYWNlKCfvvIwnLCAnLCcsICRzKTsNCiAgICAgICAgJHMgPSBzdHJfcmVwbGFjZSgn44CBJywgJywnLCAkcyk7DQogICAgICAgICRzID0gdHJpbSgkcyk7DQogICAgICAgICRzID0gc3RyaXBfdGFncygkcyk7DQogICAgICAgIGlmICgkcyA9PT0gJycgfHwgJHMgPT09ICcsJykgew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICAkYSA9IGV4cGxvZGUoJywnLCAkcyk7DQogICAgICAgICR0ID0gYXJyYXlfdW5pcXVlKCRhKTsNCg0KICAgICAgICBpZiAoY291bnQoJHQpID09PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRhID0gYXJyYXkoKTsNCiAgICAgICAgJGIgPSBhcnJheSgpOw0KICAgICAgICBmb3JlYWNoICgkdCBhcyAkdmFsdWUpIHsNCiAgICAgICAgICAgICR2ID0gdHJpbSgkdmFsdWUpOw0KICAgICAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT50YWdzYnluYW1lWyR2XSkgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAkYVtdID0gYXJyYXkoJ3RhZ19OYW1lJywgJHYpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkYlskdl0gPSAmJHRoaXMtPnRhZ3NieW5hbWVbJHZdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGNvdW50KCRhKSA9PT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuICRiOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHQgPSBhcnJheSgpOw0KICAgICAgICAgICAgJGFycmF5ID0gJHRoaXMtPkdldFRhZ0xpc3QoJycsIGFycmF5KGFycmF5KCdhcnJheScsICRhKSksICcnLCAnJywgJycpOw0KICAgICAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICR2KSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPnRhZ3NbJHYtPklEXSA9ICR2Ow0KICAgICAgICAgICAgICAgICR0aGlzLT50YWdzYnluYW1lWyR2LT5OYW1lXSA9ICYkdGhpcy0+dGFnc1skdi0+SURdOw0KICAgICAgICAgICAgICAgICR0WyR2LT5OYW1lXSA9ICYkdGhpcy0+dGFnc1skdi0+SURdOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZm9yZWFjaCAoJHQgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgICAgICAkYlska2V5XSA9ICR2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiAkYjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmAmui/h+aVsOe7hGFycmF5WzExMSwzMzMsNDQ0LDU1NSw2NjZd6L2s5o2i5oiQ5a2Y5YKo5LiyLg0KICAgICAqDQogICAgICogQHBhcmFtIGFycmF5ICRhcnJheSDmoIfnrb5JROaVsOe7hA0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ29udmVydFRhZ0lEdG9TdHJpbmcoJGFycmF5KQ0KICAgIHsNCiAgICAgICAgJHMgPSAnJzsNCiAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRhKSB7DQogICAgICAgICAgICAkcyAuPSAneycgLiAkYSAuICd9JzsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5blhajpg6jnva7pobbmlofnq6DvvIjkvJjlhYjku45jYWNoZemHjOivu+aVsOe7hO+8iS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBpbnQgJHR5cGUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0VG9wQXJ0aWNsZSgkdHlwZSA9IDApDQogICAgew0KICAgICAgICAkdmFybmFtZSA9ICd0b3BfcG9zdF9hcnJheV8nIC4gJHR5cGU7DQogICAgICAgIGlmICgkdGhpcy0+Y2FjaGUtPkhhc0tleSgkdmFybmFtZSkgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJGFydGljbGVzX3RvcF9ub3RvcmRlcl9pZGFycmF5ID0gdW5zZXJpYWxpemUoJHRoaXMtPmNhY2hlLT4kdmFybmFtZSk7DQogICAgICAgIGlmICghaXNfYXJyYXkoJGFydGljbGVzX3RvcF9ub3RvcmRlcl9pZGFycmF5KSkgew0KICAgICAgICAgICAgQ291bnRUb3BBcnRpY2xlKCR0eXBlLCBudWxsLCBudWxsKTsNCiAgICAgICAgICAgICRhcnRpY2xlc190b3Bfbm90b3JkZXJfaWRhcnJheSA9IHVuc2VyaWFsaXplKCR0aGlzLT5jYWNoZS0+JHZhcm5hbWUpOw0KICAgICAgICB9DQogICAgICAgICRhcnRpY2xlc190b3Bfbm90b3JkZXIgPSAkdGhpcy0+R2V0UG9zdEJ5QXJyYXkoJGFydGljbGVzX3RvcF9ub3RvcmRlcl9pZGFycmF5KTsNCg0KICAgICAgICByZXR1cm4gJGFydGljbGVzX3RvcF9ub3RvcmRlcjsNCiAgICB9DQoNCiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KICAgIC8v6aqM6K+B55u45YWzDQoNCiAgICAvKioNCiAgICAgKiDojrflj5bor4TorrprZXkuDQogICAgICoNCiAgICAgKiBAcGFyYW0gJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRDbXRLZXkoJGlkKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIG1kNSgkdGhpcy0+Z3VpZCAuICRpZCAuIGRhdGUoJ1ltZGgnKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6aqM6K+B6K+E6K66a2V5Lg0KICAgICAqDQogICAgICogQHBhcmFtICRpZA0KICAgICAqIEBwYXJhbSAka2V5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gVmFsaWRDbXRLZXkoJGlkLCAka2V5KQ0KICAgIHsNCiAgICAgICAgJG5vd2tleSA9IG1kNSgkdGhpcy0+Z3VpZCAuICRpZCAuIGRhdGUoJ1ltZGgnKSk7DQogICAgICAgICRub3drZXkyID0gbWQ1KCR0aGlzLT5ndWlkIC4gJGlkIC4gZGF0ZSgnWW1kaCcsIHRpbWUoKSAtICgzNjAwICogMSkpKTsNCg0KICAgICAgICByZXR1cm4gJGtleSA9PSAkbm93a2V5IHx8ICRrZXkgPT0gJG5vd2tleTI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+WQ1NSRiBUb2tlbi4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGlkIOW6lOeUqElE77yM5Y+v5Lul5L+d6K+B5q+P5Liq5bqU55So6I635Y+W5LiN5ZCM55qEVG9rZW4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldENTUkZUb2tlbigkaWQgPSAnJykNCiAgICB7DQogICAgICAgICRzID0gJHRoaXMtPnVzZXItPklEIC4gJHRoaXMtPnVzZXItPlBhc3N3b3JkIC4gJHRoaXMtPnVzZXItPlN0YXR1czsNCg0KICAgICAgICByZXR1cm4gbWQ1KCR0aGlzLT5ndWlkIC4gJHMgLiAkaWQgLiBkYXRlKCdZbWRoJykpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgUNTUkYgVG9rZW4uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0b2tlbg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGlkICAgIOW6lOeUqElE77yM5Y+v5Li65q+P5Liq5bqU55So55Sf5oiQ5LiA5Liq5LiT5bGedG9rZW4NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWZXJpZnlDU1JGVG9rZW4oJHRva2VuLCAkaWQgPSAnJykNCiAgICB7DQogICAgICAgICR1c2VyU3RyaW5nID0gJHRoaXMtPnVzZXItPklEIC4gJHRoaXMtPnVzZXItPlBhc3N3b3JkIC4gJHRoaXMtPnVzZXItPlN0YXR1czsNCiAgICAgICAgJHRva2VuU3RyaW5nID0gJHRoaXMtPmd1aWQgLiAkdXNlclN0cmluZyAuICRpZDsNCg0KICAgICAgICBmb3IgKCRpID0gMDsgJGkgPD0gJHRoaXMtPmNzcmZFeHBpcmF0aW9uOyAkaSsrKSB7DQogICAgICAgICAgICBpZiAoJHRva2VuID09PSBtZDUoJHRva2VuU3RyaW5nIC4gZGF0ZSgnWW1kaCcsIHRpbWUoKSAtICgzNjAwICogJGkpKSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmmL7npLrpqozor4HnoIENCiAgICAgKg0KICAgICAqIEBhcGkgRmlsdGVyX1BsdWdpbl9aYnBfU2hvd1ZhbGlkQ29kZSDlpoLor6XmjqXlj6PmnKrooqvmjILovb3liJnmmL7npLrpu5jorqTpqozor4Hlm77niYcNCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGlkIOWRveWQjeS6i+S7tg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNob3dWYWxpZENvZGUoJGlkID0gJycpDQogICAgew0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfU2hvd1ZhbGlkQ29kZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgcmV0dXJuICRmcG5hbWUoJGlkKTsgLy8qDQogICAgICAgIH0NCg0KICAgICAgICAkX3ZjID0gbmV3IFZhbGlkYXRlQ29kZSgpOw0KICAgICAgICAkX3ZjLT5HZXRJbWcoKTsNCiAgICAgICAgc2V0Y29va2llKCdjYXB0Y2hhXycgLiBjcmMzMigkdGhpcy0+Z3VpZCAuICRpZCksIG1kNSgkdGhpcy0+Z3VpZCAuIGRhdGUoIlltZGgiKSAuICRfdmMtPkdldENvZGUoKSksIG51bGwsICR0aGlzLT5jb29raWVzcGF0aCk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5q+U5a+56aqM6K+B56CBDQogICAgICoNCiAgICAgKiBAYXBpIEZpbHRlcl9QbHVnaW5fWmJwX0NoZWNrVmFsaWRDb2RlIOWmguivpeaOpeWPo+acquiiq+aMgui9veWImeavlOWvuem7mOiupOmqjOivgeeggQ0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkdmVyaWZ5Q29kZSDpqozor4HnoIHmlbDlgLwNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZCAgICAgICAgIOWRveWQjeS6i+S7tg0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENoZWNrVmFsaWRDb2RlKCR2ZXJpZnlDb2RlLCAkaWQgPSAnJykNCiAgICB7DQogICAgICAgICR2ZXJpZnlDb2RlID0gc3RydG9sb3dlcigkdmVyaWZ5Q29kZSk7DQogICAgICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX1picF9DaGVja1ZhbGlkQ29kZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgcmV0dXJuICRmcG5hbWUoJHZlcmlmeUNvZGUsICRpZCk7IC8vKg0KICAgICAgICB9DQoNCiAgICAgICAgJG9yaWdpbmFsID0gR2V0VmFycygnY2FwdGNoYV8nIC4gY3JjMzIoJHRoaXMtPmd1aWQgLiAkaWQpLCAnQ09PS0lFJyk7DQogICAgICAgIHNldGNvb2tpZSgnY2FwdGNoYV8nIC4gY3JjMzIoJHRoaXMtPmd1aWQgLiAkaWQpLCAnJywgdGltZSgpIC0gMzYwMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCg0KICAgICAgICByZXR1cm4gbWQ1KCR0aGlzLT5ndWlkIC4gZGF0ZSgiWW1kaCIpIC4gc3RydG9sb3dlcigkdmVyaWZ5Q29kZSkpID09ICRvcmlnaW5hbA0KICAgICAgICAgICAgICAgIHx8DQogICAgICAgICAgICAgICAgbWQ1KCR0aGlzLT5ndWlkIC4gZGF0ZSgiWW1kaCIsIHRpbWUoKSAtICgzNjAwICogMSkpIC4gc3RydG9sb3dlcigkdmVyaWZ5Q29kZSkpID09ICRvcmlnaW5hbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDlkJHlr7zoiKroj5zljZXmt7vliqDnm7jlupTmnaHnm64uDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0eXBlICR0eXBlPWNhdGVnb3J5LHRhZyxwYWdlLGl0ZW0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRpZA0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR1cmwNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQWRkSXRlbVRvTmF2YmFyKCR0eXBlLCAkaWQsICRuYW1lLCAkdXJsKQ0KICAgIHsNCiAgICAgICAgaWYgKCEkdHlwZSkgew0KICAgICAgICAgICAgJHR5cGUgPSAnaXRlbSc7DQogICAgICAgIH0NCg0KICAgICAgICAkbSA9ICR0aGlzLT5tb2R1bGVzYnlmaWxlbmFtZVsnbmF2YmFyJ107DQogICAgICAgICRzID0gJG0tPkNvbnRlbnQ7DQoNCiAgICAgICAgJGEgPSAnPGxpIGlkPSJuYXZiYXItJyAuICR0eXBlIC4gJy0nIC4gJGlkIC4gJyI+PGEgaHJlZj0iJyAuICR1cmwgLiAnIj4nIC4gJG5hbWUgLiAnPC9hPjwvbGk+JzsNCg0KICAgICAgICBpZiAoJHRoaXMtPkNoZWNrSXRlbVRvTmF2YmFyKCR0eXBlLCAkaWQpKSB7DQogICAgICAgICAgICAkcyA9IHByZWdfcmVwbGFjZSgnLzxsaSBpZD0ibmF2YmFyLScgLiAkdHlwZSAuICctJyAuICRpZCAuICciPi4qPzxcL2xpPi8nLCAkYSwgJHMpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHMgLj0gJzxsaSBpZD0ibmF2YmFyLScgLiAkdHlwZSAuICctJyAuICRpZCAuICciPjxhIGhyZWY9IicgLiAkdXJsIC4gJyI+JyAuICRuYW1lIC4gJzwvYT48L2xpPic7DQogICAgICAgIH0NCg0KICAgICAgICAkbS0+Q29udGVudCA9ICRzOw0KICAgICAgICAkbS0+U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWIoOmZpOWvvOiIquiPnOWNleS4reebuOW6lOadoeebri4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUNCiAgICAgKiBAcGFyYW0gJGlkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbEl0ZW1Ub05hdmJhcigkdHlwZSwgJGlkKQ0KICAgIHsNCiAgICAgICAgaWYgKCEkdHlwZSkgew0KICAgICAgICAgICAgJHR5cGUgPSAnaXRlbSc7DQogICAgICAgIH0NCg0KICAgICAgICAkbSA9ICR0aGlzLT5tb2R1bGVzYnlmaWxlbmFtZVsnbmF2YmFyJ107DQogICAgICAgICRzID0gJG0tPkNvbnRlbnQ7DQoNCiAgICAgICAgJHMgPSBwcmVnX3JlcGxhY2UoJy88bGkgaWQ9Im5hdmJhci0nIC4gJHR5cGUgLiAnLScgLiAkaWQgLiAnIj4uKj88XC9saT4vJywgJycsICRzKTsNCg0KICAgICAgICAkbS0+Q29udGVudCA9ICRzOw0KICAgICAgICAkbS0+U2F2ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOafpeadoeebruaYr+WQpuWcqOWvvOiIquiPnOWNleS4rS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUNCiAgICAgKiBAcGFyYW0gJGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tJdGVtVG9OYXZiYXIoJHR5cGUsICRpZCkNCiAgICB7DQogICAgICAgIGlmICghJHR5cGUpIHsNCiAgICAgICAgICAgICR0eXBlID0gJ2l0ZW0nOw0KICAgICAgICB9DQoNCiAgICAgICAgJG0gPSAkdGhpcy0+bW9kdWxlc2J5ZmlsZW5hbWVbJ25hdmJhciddOw0KICAgICAgICAkcyA9ICRtLT5Db250ZW50Ow0KDQogICAgICAgIHJldHVybiAoYm9vbCkgc3RycG9zKCRzLCAnaWQ9Im5hdmJhci0nIC4gJHR5cGUgLiAnLScgLiAkaWQgLiAnIicpOw0KICAgIH0NCg0KICAgIC8vJHNpZ25hbCA9IGdvb2QsYmFkLHRpcHMNCiAgICBwcml2YXRlICRoaW50MSA9IG51bGw7DQogICAgcHJpdmF0ZSAkaGludDIgPSBudWxsOw0KICAgIHByaXZhdGUgJGhpbnQzID0gbnVsbDsNCiAgICBwcml2YXRlICRoaW50NCA9IG51bGw7DQogICAgcHJpdmF0ZSAkaGludDUgPSBudWxsOw0KDQogICAgLyoqDQogICAgICog6K6+572u5o+Q56S65raI5oGv5bm25a2Y5YWlQ29va2llLg0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkc2lnbmFsICDmj5DnpLrnsbvlnovvvIhnb29kfGJhZHx0aXBz77yJDQogICAgICogQHBhcmFtIHN0cmluZyAkY29udGVudCDmj5DnpLrlhoXlrrkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2V0SGludCgkc2lnbmFsLCAkY29udGVudCA9ICcnKQ0KICAgIHsNCiAgICAgICAgaWYgKCRjb250ZW50ID09ICcnKSB7DQogICAgICAgICAgICBpZiAoc3Vic3RyKCRzaWduYWwsIDAsIDQpID09ICdnb29kJykgew0KICAgICAgICAgICAgICAgICRjb250ZW50ID0gJHRoaXMtPmxhbmdbJ21zZyddWydvcGVyYXRpb25fc3VjY2VlZCddOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoc3Vic3RyKCRzaWduYWwsIDAsIDMpID09ICdiYWQnKSB7DQogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdGhpcy0+bGFuZ1snbXNnJ11bJ29wZXJhdGlvbl9mYWlsZWQnXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkY29udGVudCA9IHN1YnN0cigkY29udGVudCwgMCwgMjU1KTsNCiAgICAgICAgaWYgKCR0aGlzLT5oaW50MSA9PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+aGludDEgPSAkc2lnbmFsIC4gJ3wnIC4gJGNvbnRlbnQ7DQogICAgICAgICAgICBzZXRjb29raWUoImhpbnRfc2lnbmFsMSIsICRzaWduYWwgLiAnfCcgLiAkY29udGVudCwgMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgfSBlbHNlaWYgKCR0aGlzLT5oaW50MiA9PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+aGludDIgPSAkc2lnbmFsIC4gJ3wnIC4gJGNvbnRlbnQ7DQogICAgICAgICAgICBzZXRjb29raWUoImhpbnRfc2lnbmFsMiIsICRzaWduYWwgLiAnfCcgLiAkY29udGVudCwgMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgfSBlbHNlaWYgKCR0aGlzLT5oaW50MyA9PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+aGludDMgPSAkc2lnbmFsIC4gJ3wnIC4gJGNvbnRlbnQ7DQogICAgICAgICAgICBzZXRjb29raWUoImhpbnRfc2lnbmFsMyIsICRzaWduYWwgLiAnfCcgLiAkY29udGVudCwgMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgfSBlbHNlaWYgKCR0aGlzLT5oaW50NCA9PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+aGludDQgPSAkc2lnbmFsIC4gJ3wnIC4gJGNvbnRlbnQ7DQogICAgICAgICAgICBzZXRjb29raWUoImhpbnRfc2lnbmFsNCIsICRzaWduYWwgLiAnfCcgLiAkY29udGVudCwgMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgfSBlbHNlaWYgKCR0aGlzLT5oaW50NSA9PSBudWxsKSB7DQogICAgICAgICAgICAkdGhpcy0+aGludDUgPSAkc2lnbmFsIC4gJ3wnIC4gJGNvbnRlbnQ7DQogICAgICAgICAgICBzZXRjb29raWUoImhpbnRfc2lnbmFsNSIsICRzaWduYWwgLiAnfCcgLiAkY29udGVudCwgMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOaPkOWPlkNvb2tpZeS4reeahOaPkOekuua2iOaBry4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0SGludCgpDQogICAgew0KICAgICAgICBmb3IgKCRpID0gMTsgJGkgPD0gNTsgJGkrKykgew0KICAgICAgICAgICAgJHNpZ25hbCA9ICdoaW50JyAuICRpOw0KICAgICAgICAgICAgJHNpZ25hbCA9ICR0aGlzLT4kc2lnbmFsOw0KICAgICAgICAgICAgaWYgKCRzaWduYWwpIHsNCiAgICAgICAgICAgICAgICAkYSA9IGV4cGxvZGUoJ3wnLCAkc2lnbmFsKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+U2hvd0hpbnQoJGFbMF0sICRhWzFdKTsNCiAgICAgICAgICAgICAgICBzZXRjb29raWUoImhpbnRfc2lnbmFsIiAuICRpLCAnJywgdGltZSgpIC0gMzYwMCwgJHRoaXMtPmNvb2tpZXNwYXRoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBmb3IgKCRpID0gMTsgJGkgPD0gNTsgJGkrKykgew0KICAgICAgICAgICAgJHNpZ25hbCA9IEdldFZhcnMoJ2hpbnRfc2lnbmFsJyAuICRpLCAnQ09PS0lFJyk7DQogICAgICAgICAgICBpZiAoJHNpZ25hbCkgew0KICAgICAgICAgICAgICAgICRhID0gZXhwbG9kZSgnfCcsICRzaWduYWwpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5TaG93SGludCgkYVswXSwgJGFbMV0pOw0KICAgICAgICAgICAgICAgIHNldGNvb2tpZSgiaGludF9zaWduYWwiIC4gJGksICcnLCB0aW1lKCkgLSAzNjAwLCAkdGhpcy0+Y29va2llc3BhdGgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog55Sx5o+Q56S65raI5oGv6I635Y+WSFRNTC4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHNpZ25hbCAg5o+Q56S657G75Z6L77yIZ29vZHxiYWR8dGlwc++8iQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvbnRlbnQg5o+Q56S65YaF5a65DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFNob3dIaW50KCRzaWduYWwsICRjb250ZW50ID0gJycpDQogICAgew0KICAgICAgICBpZiAoJGNvbnRlbnQgPT0gJycpIHsNCiAgICAgICAgICAgIGlmIChzdWJzdHIoJHNpZ25hbCwgMCwgNCkgPT0gJ2dvb2QnKSB7DQogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdGhpcy0+bGFuZ1snbXNnJ11bJ29wZXJhdGlvbl9zdWNjZWVkJ107DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzdWJzdHIoJHNpZ25hbCwgMCwgMykgPT0gJ2JhZCcpIHsNCiAgICAgICAgICAgICAgICAkY29udGVudCA9ICR0aGlzLT5sYW5nWydtc2cnXVsnb3BlcmF0aW9uX2ZhaWxlZCddOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVjaG8gIjxkaXYgY2xhc3M9XCJoaW50XCI+PHAgY2xhc3M9XCJoaW50IGhpbnRfJHNpZ25hbFwiPiRjb250ZW50PC9wPjwvZGl2PiI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5pi+56S66ZSZ6K+v5L+h5oGvLg0KICAgICAqDQogICAgICogQGFwaSBGaWx0ZXJfUGx1Z2luX1picF9TaG93RXJyb3INCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcvaW50ICRlcnJvclRleHQNCiAgICAgKiBAcGFyYW0gbnVsbCAgICAgICAkZmlsZQ0KICAgICAqIEBwYXJhbSBudWxsICAgICAgICRsaW5lDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTaG93RXJyb3IoJGVycm9yVGV4dCwgJGZpbGUgPSBudWxsLCAkbGluZSA9IG51bGwpDQogICAgew0KICAgICAgICAkZXJyb3JDb2RlID0gMDsNCiAgICAgICAgaWYgKGlzX251bWVyaWMoJGVycm9yVGV4dCkpIHsNCiAgICAgICAgICAgICRlcnJvckNvZGUgPSAoaW50KSAkZXJyb3JUZXh0Ow0KICAgICAgICAgICAgJGVycm9yVGV4dCA9ICR0aGlzLT5sYW5nWydlcnJvciddWyRlcnJvclRleHRdOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCRlcnJvckNvZGUgPT0gMikgew0KICAgICAgICAgICAgSHR0cDQwNCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgWkJsb2dFeGNlcHRpb246OiRlcnJvcl9pZCA9ICRlcnJvckNvZGU7DQogICAgICAgIFpCbG9nRXhjZXB0aW9uOjokZXJyb3JfZmlsZSA9ICRmaWxlOw0KICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6JGVycm9yX2xpbmUgPSAkbGluZTsNCg0KICAgICAgICBpZiAoc3RyaXBvcygneycgLiBzaGExKCdtdXN0c2hvd2Vycm9yJykgLiAnfScsICRlcnJvclRleHQpID09PSAwKSB7DQogICAgICAgICAgICAkZXJyb3JUZXh0ID0gc3RyX3JlcGxhY2UoJ3snIC4gc2hhMSgnbXVzdHNob3dlcnJvcicpIC4gJ30nLCAnJywgJGVycm9yVGV4dCk7DQogICAgICAgICAgICAkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9EZWJ1Z19EaXNwbGF5J10gPSBhcnJheSgpOw0KICAgICAgICAgICAgJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fRGVidWdfSGFuZGxlciddID0gYXJyYXkoKTsNCg0KICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigkZXJyb3JUZXh0KTsNCiAgICAgICAgICAgIGV4aXQoMSk7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9aYnBfU2hvd0Vycm9yJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRlcnJvckNvZGUsICRlcnJvclRleHQsICRmaWxlLCAkbGluZSk7DQogICAgICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigkZXJyb3JUZXh0KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDmo4Dmn6XlubblvIDlkK9Hemlw5Y6L57ypLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDaGVja0d6aXAoKQ0KICAgIHsNCiAgICAgICAgaWYgKGV4dGVuc2lvbl9sb2FkZWQoInpsaWIiKSAmJg0KICAgICAgICAgICAgaXNzZXQoJF9TRVJWRVJbIkhUVFBfQUNDRVBUX0VOQ09ESU5HIl0pICYmDQogICAgICAgICAgICBzdHJzdHIoJF9TRVJWRVJbIkhUVFBfQUNDRVBUX0VOQ09ESU5HIl0sICJnemlwIikNCiAgICAgICAgKSB7DQogICAgICAgICAgICAkdGhpcy0+aXNHemlwID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOWQr+eUqEd6aXAuDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFN0YXJ0R3ppcCgpDQogICAgew0KICAgICAgICBpZiAoIWhlYWRlcnNfc2VudCgpICYmICR0aGlzLT5pc0d6aXAgJiYgJHRoaXMtPm9wdGlvblsnWkNfR1pJUF9FTkFCTEUnXSkgew0KICAgICAgICAgICAgaWYgKGluaV9nZXQoJ291dHB1dF9oYW5kbGVyJykpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRhID0gb2JfbGlzdF9oYW5kbGVycygpOw0KICAgICAgICAgICAgaWYgKGluX2FycmF5KCdvYl9nemhhbmRsZXInLCAkYSkgfHwgaW5fYXJyYXkoJ3psaWIgb3V0cHV0IGNvbXByZXNzaW9uJywgJGEpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdpbmlfc2V0JykgJiYgZnVuY3Rpb25fZXhpc3RzKCd6bGliX2VuY29kZScpKSB7DQogICAgICAgICAgICAgICAgQG9iX2VuZF9jbGVhbigpOw0KICAgICAgICAgICAgICAgIEBpbmlfc2V0KCd6bGliLm91dHB1dF9jb21wcmVzc2lvbicsICdPbicpOw0KICAgICAgICAgICAgICAgIEBpbmlfc2V0KCd6bGliLm91dHB1dF9jb21wcmVzc2lvbl9sZXZlbCcsICc1Jyk7DQogICAgICAgICAgICB9IGVsc2VpZiAoZnVuY3Rpb25fZXhpc3RzKCdvYl9nemhhbmRsZXInKSkgew0KICAgICAgICAgICAgICAgIEBvYl9lbmRfY2xlYW4oKTsNCiAgICAgICAgICAgICAgICBAb2Jfc3RhcnQoJ29iX2d6aGFuZGxlcicpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgb2Jfc3RhcnQoKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5qOA5rWL572R56uZ5YWz6Zet77yM5aaC5p6c5YWz6Zet77yM5YiZ5oqb5Ye66ZSZ6K+vLg0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gQ2hlY2tTaXRlQ2xvc2VkKCkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19DTE9TRV9TSVRFJ10pIHsNCiAgICAgICAgICAgIEh0dHA1MDMoKTsNCiAgICAgICAgICAgICR0aGlzLT5TaG93RXJyb3IoODIsIF9fRklMRV9fLCBfX0xJTkVfXyk7DQogICAgICAgICAgICBleGl0Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6Lez6L2s5Yiw5a6J6KOF6aG16Z2iLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBSZWRpcmVjdEluc3RhbGwoKQ0KICAgIHsNCiAgICAgICAgaWYgKCEkdGhpcy0+b3B0aW9uWydaQ19EQVRBQkFTRV9UWVBFJ10pIHsNCiAgICAgICAgICAgIFJlZGlyZWN0KCcuL3piX2luc3RhbGwvaW5kZXgucGhwJyk7DQogICAgICAgIH0NCg0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOajgOa1i+W9k+WJjXVybO+8jOWmguaenOS4jeespuWQiOiuvue9ruWwsei3s+i9rOWIsOWbuuWumuWfn+WQjeeahOmTvuaOpS4NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUmVkaXJlY3RQZXJtYW5lbnREb21haW4oKQ0KICAgIHsNCiAgICAgICAgJGRvbWFpbl9kaXNhYmxlID0gR2V0VmFsdWVJbkFycmF5KCR0aGlzLT5vcHRpb24sJ1pDX1BFUk1BTkVOVF9ET01BSU5fV0hPTEVfRElTQUJMRScpOw0KICAgICAgICBpZiAoJGRvbWFpbl9kaXNhYmxlID09IHRydWUpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgICRmb3JjZWQgPSBHZXRWYWx1ZUluQXJyYXkoJHRoaXMtPm9wdGlvbiwnWkNfUEVSTUFORU5UX0RPTUFJTl9GT1JDRURfVVJMJyk7DQogICAgICAgIGlmICgkdGhpcy0+b3B0aW9uWydaQ19QRVJNQU5FTlRfRE9NQUlOX0VOQUJMRSddID09IGZhbHNlICYmICRmb3JjZWQgPT0gJycpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgICRob3N0ID0gc3RyX3JlcGxhY2UoYXJyYXkoJ2h0dHBzOi8vJywgJ2h0dHA6Ly8nKSwgYXJyYXkoJycsICcnKSwgR2V0Q3VycmVudEhvc3QoWkJQX1BBVEgsICRudWxsKSk7DQogICAgICAgICRob3N0MiA9IHN0cl9yZXBsYWNlKGFycmF5KCdodHRwczovLycsICdodHRwOi8vJyksIGFycmF5KCcnLCAnJyksICR0aGlzLT5ob3N0KTsNCg0KICAgICAgICBpZiAoJGhvc3QgIT0gJGhvc3QyKSB7DQogICAgICAgICAgICAkdSA9IEdldFJlcXVlc3RVcmkoKTsNCiAgICAgICAgICAgICR1ID0gJHRoaXMtPmhvc3QgLiBzdWJzdHIoJHUsIDEsIHN0cmxlbigkdSkpOw0KICAgICAgICAgICAgUmVkaXJlY3QzMDEoJHUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5rOo5YaMUG9zdFR5cGUuDQogICAgICoNCiAgICAgKiBAcGFyYW0gJHR5cGVJZA0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJHVybFJ1bGUgICAgICDpu5jorqTmmK/lj5ZQYWdl57G75Z6L55qEVXJsIFJ1bGUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0ZW1wbGF0ZSAgICAg6buY6K6k5qih5p2/5ZCNcGFnZQ0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGNhdGVnb3J5VHlwZSDlvZPliY3mlofnq6DnsbvnmoTliIbnsbtUeXBlDQogICAgICogQHBhcmFtIHN0cmluZyAkdGFnVHlwZSAgICAgIOW9k+WJjeaWh+eroOexu+eahOagh+etvlR5cGUNCiAgICAgKg0KICAgICAqIEB0aHJvd3MgRXhjZXB0aW9uDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFJlZ1Bvc3RUeXBlKCR0eXBlSWQsICRuYW1lLCAkdXJsUnVsZSA9ICcnLCAkdGVtcGxhdGUgPSAnc2luZ2xlJywgJGNhdGVnb3J5VHlwZSA9IG51bGwsICR0YWdUeXBlID0gbnVsbCkNCiAgICB7DQogICAgICAgIGlmICgkdXJsUnVsZSA9PSAnJykgew0KICAgICAgICAgICAgJHVybFJ1bGUgPSAkdGhpcy0+b3B0aW9uWydaQ19QQUdFX1JFR0VYJ107DQogICAgICAgIH0NCg0KICAgICAgICAkdHlwZUlkID0gKGludCkgJHR5cGVJZDsNCiAgICAgICAgJG5hbWUgPSBzdHJ0b2xvd2VyKHRyaW0oJG5hbWUpKTsNCiAgICAgICAgaWYgKCR0eXBlSWQgPiA5OSkgew0KICAgICAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5wb3N0dHlwZVskdHlwZUlkXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+U2hvd0Vycm9yKDg3LCBfX0ZJTEVfXywgX19MSU5FX18pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICR0aGlzLT5wb3N0dHlwZVskdHlwZUlkXSA9IGFycmF5KCRuYW1lLCAkdXJsUnVsZSwgJHRlbXBsYXRlLCAkY2F0ZWdvcnlUeXBlLCAkdGFnVHlwZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICR0eXBlaWQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RUeXBlX05hbWUoJHR5cGVpZCkNCiAgICB7DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+cG9zdHR5cGVbJHR5cGVpZF0pKSB7DQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdWzBdOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICcnOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQb3N0VHlwZV9VcmxSdWxlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVsxXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+b3B0aW9uWydaQ19QQUdFX1JFR0VYJ107DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIEdldFBvc3RUeXBlX1RlbXBsYXRlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVsyXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAnc2luZ2xlJzsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0UG9zdFR5cGVfQ2F0ZWdvcnlUeXBlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVszXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRQb3N0VHlwZV9UYWdUeXBlKCR0eXBlaWQpDQogICAgew0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBvc3R0eXBlWyR0eXBlaWRdKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wb3N0dHlwZVskdHlwZWlkXVs0XTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOazqOWGjEFjdGlvbi4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqIEBwYXJhbSAkbGV2ZWwNCiAgICAgKiBAcGFyYW0gJHRpdGxlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFJlZ0FjdGlvbigkbmFtZSwgJGxldmVsLCAkdGl0bGUpDQogICAgew0KICAgICAgICAkdGhpcy0+YWN0aW9uc1skbmFtZV0gPSAkbGV2ZWw7DQogICAgICAgICR0aGlzLT5sYW5nWydhY3Rpb25zJ11bJG5hbWVdID0gJHRpdGxlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+W+l0FjdGlvbuadg+mZkOazqOmHii4NCiAgICAgKg0KICAgICAqIEBwYXJhbSAkbmFtZQ0KICAgICAqDQogICAgICogQHJldHVybiBtaXhlZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRBY3Rpb25EZXNjcmlwdGlvbigkbmFtZSkNCiAgICB7DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+bGFuZ1snYWN0aW9ucyddWyRuYW1lXSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+bGFuZ1snYWN0aW9ucyddWyRuYW1lXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkbmFtZTsNCiAgICB9DQoNCiAgICAvL+S4vuS+i++8mmJhY2tlbmQtdWksLCwNCiAgICBwcm90ZWN0ZWQgJF9leGNsdXNpdmUgPSBhcnJheSgpOw0KICAgIC8qKg0KICAgICAqIOmAmuefpeezu+e7n+aOp+WItuadgw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBTZXRFeGNsdXNpdmUoJGZ1bmN0aW9uLCRhcHBpZCkNCiAgICB7DQogICAgICAgIGlmICgkYXBwaWQgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+X2V4Y2x1c2l2ZVskZnVuY3Rpb25dID0gJGFwcGlkOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgLyoqDQogICAgICog5p+l6K+i57O757uf5o6n5Yi25p2DDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIElzRXhjbHVzaXZlKCRmdW5jdGlvbikNCiAgICB7DQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+X2V4Y2x1c2l2ZVskZnVuY3Rpb25dKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5fZXhjbHVzaXZlWyRmdW5jdGlvbl07DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOS7peS4i+mDqOWIhuS4uuW3suW6n+W8g++8jOS9huiAg+iZkeWIsOWFvOWuueaAp+S/neeVmeeahOS7o+eggSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLg0KICAgICAqLw0KDQogICAgLyoqDQogICAgICog6aqM6K+B55So5oi355m75b2V77yITUQ15YqgemJwLT5ndWlk55uQ5ZCO55qE5a+G56CB77yJLg0KICAgICAqDQogICAgICogQGRlcHJlY2F0ZWQNCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgICAgICAgICDnlKjmiLflkI0NCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwc19wYXRoX2hhc2ggTUQ15YqgemJwLT5ndWlk55uQ5ZCO55qE5a+G56CBDQogICAgICogQHBhcmFtIG9iamVjdCAkbWVtYmVyICAgICAgIOi/lOWbnuivu+WPluaIkOWKn+eahG1lbWJlcuWvueixoQ0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZlcmlmeV9NRDVQYXRoKCRuYW1lLCAkcHNfcGF0aF9oYXNoLCAmJG1lbWJlciA9IG51bGwpDQogICAgew0KICAgICAgICBpZiAoJG5hbWUgPT0gJycgfHwgJHBzX3BhdGhfaGFzaCA9PSAnJykgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgICRtID0gJHRoaXMtPkdldE1lbWJlckJ5TmFtZSgkbmFtZSk7DQogICAgICAgIGlmICgkbS0+SUQgPiAwKSB7DQogICAgICAgICAgICBpZiAoJG0tPlBhc3NXb3JkX01ENVBhdGggPT0gJHBzX3BhdGhfaGFzaCkgew0KICAgICAgICAgICAgICAgICRtZW1iZXIgPSAkbTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOiOt+WPlkNTUkYgVG9rZW7nmoTplJnor6/liKvlkI0uDQogICAgICoNCiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYGBHZXRDU1JGVG9rZW5gYA0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkaWQg5bqU55SoSUTvvIzlj6/ku6Xkv53or4Hmr4/kuKrlupTnlKjojrflj5bkuI3lkIznmoRUb2tlbg0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gR2V0VG9rZW4oJGlkID0gJycpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPkdldENTUkZUb2tlbigkaWQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOmqjOivgUNTUkYgVG9rZW7nmoTplJnor6/liKvlkI0uDQogICAgICoNCiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYGBWZXJpZnlDU1JGVG9rZW5gYA0KICAgICAqDQogICAgICogQHBhcmFtICR0DQogICAgICogQHBhcmFtICRpZA0KICAgICAqDQogICAgICogQHJldHVybiBib29sDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFZhbGlkVG9rZW4oJHQsICRpZCA9ICcnKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5WZXJpZnlDU1JGVG9rZW4oJHQsICRpZCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQGRlcHJlY2F0ZWQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBMb2FkQ2F0ZWdvcnlzKCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+TG9hZENhdGVnb3JpZXMoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5bkvJror51XZWJUb2tlbi4NCiAgICAgKg0KICAgICAqIEBkZXByZWNhdGVkIOavq+aXoOaEj+S5ie+8jOWNs+WwhuW6n+W8gw0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkd3RfaWQNCiAgICAgKiBAcGFyYW0gaW50ICAgICRkYXkgICDpu5jorqQx5aSp5pyJ5pWI5pyf77yMMeWwj+aXtuS4ujEvMjTvvIwx5YiG6ZKf5Li6MS8oMjQqNjApDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBHZXRXZWJUb2tlbigkd3RfaWQgPSAnJywgJGRheSA9IDEpDQogICAgew0KICAgICAgICAkdCA9IGludHZhbCgkZGF5ICogMjQgKiAzNjAwKSArIHRpbWUoKTsNCg0KICAgICAgICByZXR1cm4gQ3JlYXRlV2ViVG9rZW4oJHd0X2lkLCAkdCwgJHRoaXMtPmd1aWQsICR0aGlzLT51c2VyLT5TdGF0dXMsICR0aGlzLT51c2VyLT5JRCwgJHRoaXMtPnVzZXItPlBhc3N3b3JkKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDpqozor4HkvJror51XZWJUb2tlbi4NCiAgICAgKg0KICAgICAqIEBkZXByZWNhdGVkIOavq+aXoOaEj+S5ie+8jOWNs+WwhuW6n+W8gw0KICAgICAqDQogICAgICogQHBhcmFtICR3dA0KICAgICAqIEBwYXJhbSAkd3RfaWQNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBWYWxpZFdlYlRva2VuKCR3dCwgJHd0X2lkID0gJycpDQogICAgew0KICAgICAgICBpZiAoVmVyaWZ5V2ViVG9rZW4oJHd0LCAkd3RfaWQsICR0aGlzLT5ndWlkLCAkdGhpcy0+dXNlci0+U3RhdHVzLCAkdGhpcy0+dXNlci0+SUQsICR0aGlzLT51c2VyLT5QYXNzd29yZCkgPT09IHRydWUpIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCn0NCg==</file>
	<file name='zb_system\function\c_system_version.php' crc32='822E5D8D'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNicpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzgnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMjIwMCcpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ1ZhbHlyaWEnKTsNCmRlZmluZSgnWkNfVkVSU0lPTicsIFpDX1ZFUlNJT05fTUFKT1IgLiAnLicgLiBaQ19WRVJTSU9OX01JTk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9CVUlMRCAuICcuJyAuIFpDX1ZFUlNJT05fQ09NTUlUKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9ESVNQTEFZJywgWkNfVkVSU0lPTl9NQUpPUiAuICcuJyAuIFpDX1ZFUlNJT05fTUlOT1IgLiAnLicgLiBaQ19WRVJTSU9OX0JVSUxEIC4gJyAnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fRlVMTCcsIFpDX1ZFUlNJT04gLiAnICgnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSAuICcpJyk7DQpkZWZpbmUoJ1pDX0JMT0dfQ09NTUlUJywgWkNfVkVSU0lPTl9DT01NSVQpOyAvLyDkuLrlhpnlhaXns7vnu5/phY3nva7nu5/kuIDpo47moLwNCiRHTE9CQUxTWydibG9ndmVyc2lvbiddID0gWkNfVkVSU0lPTl9NQUpPUiAuIFpDX1ZFUlNJT05fTUlOT1IgLiBaQ19WRVJTSU9OX0NPTU1JVDsNCmRlZmluZSgnWkNfQkxPR19WRVJTSU9OJywgWkNfVkVSU0lPTl9ESVNQTEFZIC4gJyBCdWlsZCAnIC4gJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0K</file>
	<file name='zb_system\function\lib\config.php' crc32='5BE717C7'  dt:dt='bin.base64'></file>
</files>